
X_GDCLUB_DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007178  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08007318  08007318  00017318  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007714  08007714  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007714  08007714  00017714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800771c  0800771c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800771c  0800771c  0001771c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007720  08007720  00017720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007724  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  200001dc  08007900  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  08007900  00020424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001030c  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029a5  00000000  00000000  00030518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  00032ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  00033ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187c7  00000000  00000000  00034de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012eb0  00000000  00000000  0004d5a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000945b6  00000000  00000000  00060457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4a0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005334  00000000  00000000  000f4a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007300 	.word	0x08007300

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08007300 	.word	0x08007300

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <MX_DMA_Init+0x78>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a1a      	ldr	r2, [pc, #104]	; (8000f34 <MX_DMA_Init+0x78>)
 8000ecc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <MX_DMA_Init+0x78>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	603b      	str	r3, [r7, #0]
 8000ee2:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <MX_DMA_Init+0x78>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a13      	ldr	r2, [pc, #76]	; (8000f34 <MX_DMA_Init+0x78>)
 8000ee8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <MX_DMA_Init+0x78>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2100      	movs	r1, #0
 8000efe:	200b      	movs	r0, #11
 8000f00:	f000 fe7f 	bl	8001c02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f04:	200b      	movs	r0, #11
 8000f06:	f000 fe98 	bl	8001c3a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2039      	movs	r0, #57	; 0x39
 8000f10:	f000 fe77 	bl	8001c02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000f14:	2039      	movs	r0, #57	; 0x39
 8000f16:	f000 fe90 	bl	8001c3a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	2045      	movs	r0, #69	; 0x45
 8000f20:	f000 fe6f 	bl	8001c02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000f24:	2045      	movs	r0, #69	; 0x45
 8000f26:	f000 fe88 	bl	8001c3a <HAL_NVIC_EnableIRQ>

}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40023800 	.word	0x40023800

08000f38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	f107 030c 	add.w	r3, r7, #12
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	4b2e      	ldr	r3, [pc, #184]	; (800100c <MX_GPIO_Init+0xd4>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a2d      	ldr	r2, [pc, #180]	; (800100c <MX_GPIO_Init+0xd4>)
 8000f58:	f043 0304 	orr.w	r3, r3, #4
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b2b      	ldr	r3, [pc, #172]	; (800100c <MX_GPIO_Init+0xd4>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0304 	and.w	r3, r3, #4
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	4b27      	ldr	r3, [pc, #156]	; (800100c <MX_GPIO_Init+0xd4>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a26      	ldr	r2, [pc, #152]	; (800100c <MX_GPIO_Init+0xd4>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b24      	ldr	r3, [pc, #144]	; (800100c <MX_GPIO_Init+0xd4>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	603b      	str	r3, [r7, #0]
 8000f8a:	4b20      	ldr	r3, [pc, #128]	; (800100c <MX_GPIO_Init+0xd4>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a1f      	ldr	r2, [pc, #124]	; (800100c <MX_GPIO_Init+0xd4>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b1d      	ldr	r3, [pc, #116]	; (800100c <MX_GPIO_Init+0xd4>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fa2:	230c      	movs	r3, #12
 8000fa4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <MX_GPIO_Init+0xd8>)
 8000fa8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4817      	ldr	r0, [pc, #92]	; (8001014 <MX_GPIO_Init+0xdc>)
 8000fb6:	f001 f967 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000fba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fc0:	4b15      	ldr	r3, [pc, #84]	; (8001018 <MX_GPIO_Init+0xe0>)
 8000fc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4813      	ldr	r0, [pc, #76]	; (800101c <MX_GPIO_Init+0xe4>)
 8000fd0:	f001 f95a 	bl	8002288 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2008      	movs	r0, #8
 8000fda:	f000 fe12 	bl	8001c02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000fde:	2008      	movs	r0, #8
 8000fe0:	f000 fe2b 	bl	8001c3a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2009      	movs	r0, #9
 8000fea:	f000 fe0a 	bl	8001c02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000fee:	2009      	movs	r0, #9
 8000ff0:	f000 fe23 	bl	8001c3a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2028      	movs	r0, #40	; 0x28
 8000ffa:	f000 fe02 	bl	8001c02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ffe:	2028      	movs	r0, #40	; 0x28
 8001000:	f000 fe1b 	bl	8001c3a <HAL_NVIC_EnableIRQ>

}
 8001004:	bf00      	nop
 8001006:	3720      	adds	r7, #32
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40023800 	.word	0x40023800
 8001010:	10110000 	.word	0x10110000
 8001014:	40020800 	.word	0x40020800
 8001018:	10210000 	.word	0x10210000
 800101c:	40020400 	.word	0x40020400

08001020 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <MX_I2C1_Init+0x50>)
 8001026:	4a13      	ldr	r2, [pc, #76]	; (8001074 <MX_I2C1_Init+0x54>)
 8001028:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MX_I2C1_Init+0x50>)
 800102c:	4a12      	ldr	r2, [pc, #72]	; (8001078 <MX_I2C1_Init+0x58>)
 800102e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001030:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <MX_I2C1_Init+0x50>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <MX_I2C1_Init+0x50>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <MX_I2C1_Init+0x50>)
 800103e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001042:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <MX_I2C1_Init+0x50>)
 8001046:	2200      	movs	r2, #0
 8001048:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <MX_I2C1_Init+0x50>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001050:	4b07      	ldr	r3, [pc, #28]	; (8001070 <MX_I2C1_Init+0x50>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <MX_I2C1_Init+0x50>)
 8001058:	2200      	movs	r2, #0
 800105a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800105c:	4804      	ldr	r0, [pc, #16]	; (8001070 <MX_I2C1_Init+0x50>)
 800105e:	f001 faaf 	bl	80025c0 <HAL_I2C_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001068:	f000 f914 	bl	8001294 <Error_Handler>
  }

}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	200001f8 	.word	0x200001f8
 8001074:	40005400 	.word	0x40005400
 8001078:	000186a0 	.word	0x000186a0

0800107c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a31      	ldr	r2, [pc, #196]	; (8001160 <HAL_I2C_MspInit+0xe4>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d15b      	bne.n	8001156 <HAL_I2C_MspInit+0xda>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	4b30      	ldr	r3, [pc, #192]	; (8001164 <HAL_I2C_MspInit+0xe8>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a2f      	ldr	r2, [pc, #188]	; (8001164 <HAL_I2C_MspInit+0xe8>)
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b2d      	ldr	r3, [pc, #180]	; (8001164 <HAL_I2C_MspInit+0xe8>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c0:	2312      	movs	r3, #18
 80010c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c4:	2301      	movs	r3, #1
 80010c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c8:	2303      	movs	r3, #3
 80010ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010cc:	2304      	movs	r3, #4
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	4824      	ldr	r0, [pc, #144]	; (8001168 <HAL_I2C_MspInit+0xec>)
 80010d8:	f001 f8d6 	bl	8002288 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	4b20      	ldr	r3, [pc, #128]	; (8001164 <HAL_I2C_MspInit+0xe8>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	4a1f      	ldr	r2, [pc, #124]	; (8001164 <HAL_I2C_MspInit+0xe8>)
 80010e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010ea:	6413      	str	r3, [r2, #64]	; 0x40
 80010ec:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <HAL_I2C_MspInit+0xe8>)
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80010f8:	4b1c      	ldr	r3, [pc, #112]	; (800116c <HAL_I2C_MspInit+0xf0>)
 80010fa:	4a1d      	ldr	r2, [pc, #116]	; (8001170 <HAL_I2C_MspInit+0xf4>)
 80010fc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80010fe:	4b1b      	ldr	r3, [pc, #108]	; (800116c <HAL_I2C_MspInit+0xf0>)
 8001100:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001104:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001106:	4b19      	ldr	r3, [pc, #100]	; (800116c <HAL_I2C_MspInit+0xf0>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800110c:	4b17      	ldr	r3, [pc, #92]	; (800116c <HAL_I2C_MspInit+0xf0>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001112:	4b16      	ldr	r3, [pc, #88]	; (800116c <HAL_I2C_MspInit+0xf0>)
 8001114:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001118:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <HAL_I2C_MspInit+0xf0>)
 800111c:	2200      	movs	r2, #0
 800111e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_I2C_MspInit+0xf0>)
 8001122:	2200      	movs	r2, #0
 8001124:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <HAL_I2C_MspInit+0xf0>)
 8001128:	f44f 7280 	mov.w	r2, #256	; 0x100
 800112c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <HAL_I2C_MspInit+0xf0>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001134:	4b0d      	ldr	r3, [pc, #52]	; (800116c <HAL_I2C_MspInit+0xf0>)
 8001136:	2200      	movs	r2, #0
 8001138:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800113a:	480c      	ldr	r0, [pc, #48]	; (800116c <HAL_I2C_MspInit+0xf0>)
 800113c:	f000 fd98 	bl	8001c70 <HAL_DMA_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8001146:	f000 f8a5 	bl	8001294 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a07      	ldr	r2, [pc, #28]	; (800116c <HAL_I2C_MspInit+0xf0>)
 800114e:	639a      	str	r2, [r3, #56]	; 0x38
 8001150:	4a06      	ldr	r2, [pc, #24]	; (800116c <HAL_I2C_MspInit+0xf0>)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001156:	bf00      	nop
 8001158:	3728      	adds	r7, #40	; 0x28
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40005400 	.word	0x40005400
 8001164:	40023800 	.word	0x40023800
 8001168:	40020400 	.word	0x40020400
 800116c:	2000024c 	.word	0x2000024c
 8001170:	40026010 	.word	0x40026010

08001174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117a:	f000 fbf5 	bl	8001968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800117e:	f000 f80f 	bl	80011a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001182:	f7ff fed9 	bl	8000f38 <MX_GPIO_Init>
  MX_DMA_Init();
 8001186:	f7ff fe99 	bl	8000ebc <MX_DMA_Init>
  MX_TIM2_Init();
 800118a:	f000 f9fb 	bl	8001584 <MX_TIM2_Init>
  MX_I2C1_Init();
 800118e:	f7ff ff47 	bl	8001020 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8001192:	f000 fadf 	bl	8001754 <MX_USART6_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	uint8_t tail[4] = { 0x00, 0x00, 0x80, 0x7f };
 8001196:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800119a:	607b      	str	r3, [r7, #4]
  while (1)
 800119c:	e7fe      	b.n	800119c <main+0x28>
	...

080011a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b094      	sub	sp, #80	; 0x50
 80011a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a6:	f107 0320 	add.w	r3, r7, #32
 80011aa:	2230      	movs	r2, #48	; 0x30
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f003 fb96 	bl	80048e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c4:	2300      	movs	r3, #0
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	4b27      	ldr	r3, [pc, #156]	; (8001268 <SystemClock_Config+0xc8>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	4a26      	ldr	r2, [pc, #152]	; (8001268 <SystemClock_Config+0xc8>)
 80011ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d2:	6413      	str	r3, [r2, #64]	; 0x40
 80011d4:	4b24      	ldr	r3, [pc, #144]	; (8001268 <SystemClock_Config+0xc8>)
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	4b21      	ldr	r3, [pc, #132]	; (800126c <SystemClock_Config+0xcc>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a20      	ldr	r2, [pc, #128]	; (800126c <SystemClock_Config+0xcc>)
 80011ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011ee:	6013      	str	r3, [r2, #0]
 80011f0:	4b1e      	ldr	r3, [pc, #120]	; (800126c <SystemClock_Config+0xcc>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011fc:	2302      	movs	r3, #2
 80011fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001200:	2301      	movs	r3, #1
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001204:	2310      	movs	r3, #16
 8001206:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001208:	2302      	movs	r3, #2
 800120a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800120c:	2300      	movs	r3, #0
 800120e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001210:	2308      	movs	r3, #8
 8001212:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001214:	2364      	movs	r3, #100	; 0x64
 8001216:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001218:	2302      	movs	r3, #2
 800121a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800121c:	2304      	movs	r3, #4
 800121e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001220:	f107 0320 	add.w	r3, r7, #32
 8001224:	4618      	mov	r0, r3
 8001226:	f001 fb0f 	bl	8002848 <HAL_RCC_OscConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001230:	f000 f830 	bl	8001294 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001234:	230f      	movs	r3, #15
 8001236:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001238:	2302      	movs	r3, #2
 800123a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001244:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800124a:	f107 030c 	add.w	r3, r7, #12
 800124e:	2103      	movs	r1, #3
 8001250:	4618      	mov	r0, r3
 8001252:	f001 fd67 	bl	8002d24 <HAL_RCC_ClockConfig>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800125c:	f000 f81a 	bl	8001294 <Error_Handler>
  }
}
 8001260:	bf00      	nop
 8001262:	3750      	adds	r7, #80	; 0x50
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40023800 	.word	0x40023800
 800126c:	40007000 	.word	0x40007000

08001270 <__io_putchar>:

#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE

{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, 0xFFFF);
 8001278:	1d39      	adds	r1, r7, #4
 800127a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800127e:	2201      	movs	r2, #1
 8001280:	4803      	ldr	r0, [pc, #12]	; (8001290 <__io_putchar+0x20>)
 8001282:	f002 fae8 	bl	8003856 <HAL_UART_Transmit>

	return ch;
 8001286:	687b      	ldr	r3, [r7, #4]

}
 8001288:	4618      	mov	r0, r3
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200002f0 	.word	0x200002f0

08001294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <HAL_MspInit+0x4c>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	4a0f      	ldr	r2, [pc, #60]	; (80012f0 <HAL_MspInit+0x4c>)
 80012b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <HAL_MspInit+0x4c>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	603b      	str	r3, [r7, #0]
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <HAL_MspInit+0x4c>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	4a08      	ldr	r2, [pc, #32]	; (80012f0 <HAL_MspInit+0x4c>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d4:	6413      	str	r3, [r2, #64]	; 0x40
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_MspInit+0x4c>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800

080012f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001306:	e7fe      	b.n	8001306 <HardFault_Handler+0x4>

08001308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800130c:	e7fe      	b.n	800130c <MemManage_Handler+0x4>

0800130e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001312:	e7fe      	b.n	8001312 <BusFault_Handler+0x4>

08001314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <UsageFault_Handler+0x4>

0800131a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001348:	f000 fb60 	bl	8001a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}

08001350 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001354:	2004      	movs	r0, #4
 8001356:	f001 f91b 	bl	8002590 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}

0800135e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001362:	2008      	movs	r0, #8
 8001364:	f001 f914 	bl	8002590 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}

0800136c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <DMA1_Stream0_IRQHandler+0x10>)
 8001372:	f000 fd4d 	bl	8001e10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	2000024c 	.word	0x2000024c

08001380 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001384:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001388:	f001 f902 	bl	8002590 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}

08001390 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <DMA2_Stream1_IRQHandler+0x10>)
 8001396:	f000 fd3b 	bl	8001e10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000330 	.word	0x20000330

080013a4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80013a8:	4802      	ldr	r0, [pc, #8]	; (80013b4 <DMA2_Stream6_IRQHandler+0x10>)
 80013aa:	f000 fd31 	bl	8001e10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000390 	.word	0x20000390

080013b8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
//		rx_len = RX_BUFFER_SIZE_MAX - temp;
//
//		rx_tc_flag = 1;
//	}
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80013bc:	4802      	ldr	r0, [pc, #8]	; (80013c8 <USART6_IRQHandler+0x10>)
 80013be:	f002 fae3 	bl	8003988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200002f0 	.word	0x200002f0

080013cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
	return 1;
 80013d0:	2301      	movs	r3, #1
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <_kill>:

int _kill(int pid, int sig)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80013e6:	f003 fa43 	bl	8004870 <__errno>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2216      	movs	r2, #22
 80013ee:	601a      	str	r2, [r3, #0]
	return -1;
 80013f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <_exit>:

void _exit (int status)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001404:	f04f 31ff 	mov.w	r1, #4294967295
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ffe7 	bl	80013dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800140e:	e7fe      	b.n	800140e <_exit+0x12>

08001410 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	e00a      	b.n	8001438 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001422:	f3af 8000 	nop.w
 8001426:	4601      	mov	r1, r0
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	1c5a      	adds	r2, r3, #1
 800142c:	60ba      	str	r2, [r7, #8]
 800142e:	b2ca      	uxtb	r2, r1
 8001430:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	3301      	adds	r3, #1
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	429a      	cmp	r2, r3
 800143e:	dbf0      	blt.n	8001422 <_read+0x12>
	}

return len;
 8001440:	687b      	ldr	r3, [r7, #4]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	60f8      	str	r0, [r7, #12]
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	e009      	b.n	8001470 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	60ba      	str	r2, [r7, #8]
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff03 	bl	8001270 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	3301      	adds	r3, #1
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	429a      	cmp	r2, r3
 8001476:	dbf1      	blt.n	800145c <_write+0x12>
	}
	return len;
 8001478:	687b      	ldr	r3, [r7, #4]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <_close>:

int _close(int file)
{
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
	return -1;
 800148a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014aa:	605a      	str	r2, [r3, #4]
	return 0;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <_isatty>:

int _isatty(int file)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
	return 1;
 80014c2:	2301      	movs	r3, #1
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
	return 0;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f4:	4a14      	ldr	r2, [pc, #80]	; (8001548 <_sbrk+0x5c>)
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <_sbrk+0x60>)
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001500:	4b13      	ldr	r3, [pc, #76]	; (8001550 <_sbrk+0x64>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <_sbrk+0x64>)
 800150a:	4a12      	ldr	r2, [pc, #72]	; (8001554 <_sbrk+0x68>)
 800150c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <_sbrk+0x64>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	429a      	cmp	r2, r3
 800151a:	d207      	bcs.n	800152c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800151c:	f003 f9a8 	bl	8004870 <__errno>
 8001520:	4603      	mov	r3, r0
 8001522:	220c      	movs	r2, #12
 8001524:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001526:	f04f 33ff 	mov.w	r3, #4294967295
 800152a:	e009      	b.n	8001540 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <_sbrk+0x64>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001532:	4b07      	ldr	r3, [pc, #28]	; (8001550 <_sbrk+0x64>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <_sbrk+0x64>)
 800153c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800153e:	68fb      	ldr	r3, [r7, #12]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20020000 	.word	0x20020000
 800154c:	00000400 	.word	0x00000400
 8001550:	200002ac 	.word	0x200002ac
 8001554:	20000428 	.word	0x20000428

08001558 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800155c:	4b08      	ldr	r3, [pc, #32]	; (8001580 <SystemInit+0x28>)
 800155e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001562:	4a07      	ldr	r2, [pc, #28]	; (8001580 <SystemInit+0x28>)
 8001564:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001568:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <SystemInit+0x28>)
 800156e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001572:	609a      	str	r2, [r3, #8]
#endif
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	; 0x28
 8001588:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158a:	f107 0320 	add.w	r3, r7, #32
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
 80015a0:	611a      	str	r2, [r3, #16]
 80015a2:	615a      	str	r2, [r3, #20]
 80015a4:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80015a6:	4b2d      	ldr	r3, [pc, #180]	; (800165c <MX_TIM2_Init+0xd8>)
 80015a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80015ae:	4b2b      	ldr	r3, [pc, #172]	; (800165c <MX_TIM2_Init+0xd8>)
 80015b0:	2263      	movs	r2, #99	; 0x63
 80015b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b4:	4b29      	ldr	r3, [pc, #164]	; (800165c <MX_TIM2_Init+0xd8>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80015ba:	4b28      	ldr	r3, [pc, #160]	; (800165c <MX_TIM2_Init+0xd8>)
 80015bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c2:	4b26      	ldr	r3, [pc, #152]	; (800165c <MX_TIM2_Init+0xd8>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c8:	4b24      	ldr	r3, [pc, #144]	; (800165c <MX_TIM2_Init+0xd8>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015ce:	4823      	ldr	r0, [pc, #140]	; (800165c <MX_TIM2_Init+0xd8>)
 80015d0:	f001 fd88 	bl	80030e4 <HAL_TIM_PWM_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80015da:	f7ff fe5b 	bl	8001294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015e6:	f107 0320 	add.w	r3, r7, #32
 80015ea:	4619      	mov	r1, r3
 80015ec:	481b      	ldr	r0, [pc, #108]	; (800165c <MX_TIM2_Init+0xd8>)
 80015ee:	f002 f877 	bl	80036e0 <HAL_TIMEx_MasterConfigSynchronization>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80015f8:	f7ff fe4c 	bl	8001294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015fc:	2360      	movs	r3, #96	; 0x60
 80015fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	2200      	movs	r2, #0
 8001610:	4619      	mov	r1, r3
 8001612:	4812      	ldr	r0, [pc, #72]	; (800165c <MX_TIM2_Init+0xd8>)
 8001614:	f001 fd92 	bl	800313c <HAL_TIM_PWM_ConfigChannel>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800161e:	f7ff fe39 	bl	8001294 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2204      	movs	r2, #4
 8001626:	4619      	mov	r1, r3
 8001628:	480c      	ldr	r0, [pc, #48]	; (800165c <MX_TIM2_Init+0xd8>)
 800162a:	f001 fd87 	bl	800313c <HAL_TIM_PWM_ConfigChannel>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001634:	f7ff fe2e 	bl	8001294 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	2208      	movs	r2, #8
 800163c:	4619      	mov	r1, r3
 800163e:	4807      	ldr	r0, [pc, #28]	; (800165c <MX_TIM2_Init+0xd8>)
 8001640:	f001 fd7c 	bl	800313c <HAL_TIM_PWM_ConfigChannel>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 800164a:	f7ff fe23 	bl	8001294 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800164e:	4803      	ldr	r0, [pc, #12]	; (800165c <MX_TIM2_Init+0xd8>)
 8001650:	f000 f826 	bl	80016a0 <HAL_TIM_MspPostInit>

}
 8001654:	bf00      	nop
 8001656:	3728      	adds	r7, #40	; 0x28
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	200002b0 	.word	0x200002b0

08001660 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001670:	d10d      	bne.n	800168e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <HAL_TIM_PWM_MspInit+0x3c>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	4a08      	ldr	r2, [pc, #32]	; (800169c <HAL_TIM_PWM_MspInit+0x3c>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6413      	str	r3, [r2, #64]	; 0x40
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_TIM_PWM_MspInit+0x3c>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800168e:	bf00      	nop
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800

080016a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	; 0x28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016c0:	d13d      	bne.n	800173e <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	4b20      	ldr	r3, [pc, #128]	; (8001748 <HAL_TIM_MspPostInit+0xa8>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a1f      	ldr	r2, [pc, #124]	; (8001748 <HAL_TIM_MspPostInit+0xa8>)
 80016cc:	f043 0302 	orr.w	r3, r3, #2
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b1d      	ldr	r3, [pc, #116]	; (8001748 <HAL_TIM_MspPostInit+0xa8>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	4b19      	ldr	r3, [pc, #100]	; (8001748 <HAL_TIM_MspPostInit+0xa8>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a18      	ldr	r2, [pc, #96]	; (8001748 <HAL_TIM_MspPostInit+0xa8>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b16      	ldr	r3, [pc, #88]	; (8001748 <HAL_TIM_MspPostInit+0xa8>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 80016fa:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80016fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	2302      	movs	r3, #2
 8001702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2300      	movs	r3, #0
 800170a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800170c:	2301      	movs	r3, #1
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	4619      	mov	r1, r3
 8001716:	480d      	ldr	r0, [pc, #52]	; (800174c <HAL_TIM_MspPostInit+0xac>)
 8001718:	f000 fdb6 	bl	8002288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800171c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	2300      	movs	r3, #0
 800172c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800172e:	2301      	movs	r3, #1
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	4619      	mov	r1, r3
 8001738:	4805      	ldr	r0, [pc, #20]	; (8001750 <HAL_TIM_MspPostInit+0xb0>)
 800173a:	f000 fda5 	bl	8002288 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800173e:	bf00      	nop
 8001740:	3728      	adds	r7, #40	; 0x28
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800
 800174c:	40020400 	.word	0x40020400
 8001750:	40020000 	.word	0x40020000

08001754 <MX_USART6_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <MX_USART6_UART_Init+0x4c>)
 800175a:	4a12      	ldr	r2, [pc, #72]	; (80017a4 <MX_USART6_UART_Init+0x50>)
 800175c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <MX_USART6_UART_Init+0x4c>)
 8001760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001764:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <MX_USART6_UART_Init+0x4c>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <MX_USART6_UART_Init+0x4c>)
 800176e:	2200      	movs	r2, #0
 8001770:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001772:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <MX_USART6_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001778:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <MX_USART6_UART_Init+0x4c>)
 800177a:	220c      	movs	r2, #12
 800177c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800177e:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <MX_USART6_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <MX_USART6_UART_Init+0x4c>)
 8001786:	2200      	movs	r2, #0
 8001788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800178a:	4805      	ldr	r0, [pc, #20]	; (80017a0 <MX_USART6_UART_Init+0x4c>)
 800178c:	f002 f816 	bl	80037bc <HAL_UART_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001796:	f7ff fd7d 	bl	8001294 <Error_Handler>
//	__HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
//	//DMA接收函数，此句一定要加，不加接收不到第一次传进来的实数据，是空的，且此时接收到的数据长度为缓存器的数据长度
//	HAL_UART_Receive_DMA(&huart6, rx_buffer, RX_BUFFER_SIZE_MAX);
	/* USER CODE END MX_USART6_UART_Init */

}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200002f0 	.word	0x200002f0
 80017a4:	40011400 	.word	0x40011400

080017a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a4c      	ldr	r2, [pc, #304]	; (80018f8 <HAL_UART_MspInit+0x150>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	f040 8092 	bne.w	80018f0 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80017cc:	2300      	movs	r3, #0
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	4b4a      	ldr	r3, [pc, #296]	; (80018fc <HAL_UART_MspInit+0x154>)
 80017d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d4:	4a49      	ldr	r2, [pc, #292]	; (80018fc <HAL_UART_MspInit+0x154>)
 80017d6:	f043 0320 	orr.w	r3, r3, #32
 80017da:	6453      	str	r3, [r2, #68]	; 0x44
 80017dc:	4b47      	ldr	r3, [pc, #284]	; (80018fc <HAL_UART_MspInit+0x154>)
 80017de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e0:	f003 0320 	and.w	r3, r3, #32
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	4b43      	ldr	r3, [pc, #268]	; (80018fc <HAL_UART_MspInit+0x154>)
 80017ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f0:	4a42      	ldr	r2, [pc, #264]	; (80018fc <HAL_UART_MspInit+0x154>)
 80017f2:	f043 0304 	orr.w	r3, r3, #4
 80017f6:	6313      	str	r3, [r2, #48]	; 0x30
 80017f8:	4b40      	ldr	r3, [pc, #256]	; (80018fc <HAL_UART_MspInit+0x154>)
 80017fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001804:	23c0      	movs	r3, #192	; 0xc0
 8001806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001810:	2303      	movs	r3, #3
 8001812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001814:	2308      	movs	r3, #8
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	4619      	mov	r1, r3
 800181e:	4838      	ldr	r0, [pc, #224]	; (8001900 <HAL_UART_MspInit+0x158>)
 8001820:	f000 fd32 	bl	8002288 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001824:	4b37      	ldr	r3, [pc, #220]	; (8001904 <HAL_UART_MspInit+0x15c>)
 8001826:	4a38      	ldr	r2, [pc, #224]	; (8001908 <HAL_UART_MspInit+0x160>)
 8001828:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800182a:	4b36      	ldr	r3, [pc, #216]	; (8001904 <HAL_UART_MspInit+0x15c>)
 800182c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001830:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001832:	4b34      	ldr	r3, [pc, #208]	; (8001904 <HAL_UART_MspInit+0x15c>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001838:	4b32      	ldr	r3, [pc, #200]	; (8001904 <HAL_UART_MspInit+0x15c>)
 800183a:	2200      	movs	r2, #0
 800183c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800183e:	4b31      	ldr	r3, [pc, #196]	; (8001904 <HAL_UART_MspInit+0x15c>)
 8001840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001844:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001846:	4b2f      	ldr	r3, [pc, #188]	; (8001904 <HAL_UART_MspInit+0x15c>)
 8001848:	2200      	movs	r2, #0
 800184a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800184c:	4b2d      	ldr	r3, [pc, #180]	; (8001904 <HAL_UART_MspInit+0x15c>)
 800184e:	2200      	movs	r2, #0
 8001850:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001852:	4b2c      	ldr	r3, [pc, #176]	; (8001904 <HAL_UART_MspInit+0x15c>)
 8001854:	2200      	movs	r2, #0
 8001856:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001858:	4b2a      	ldr	r3, [pc, #168]	; (8001904 <HAL_UART_MspInit+0x15c>)
 800185a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800185e:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001860:	4b28      	ldr	r3, [pc, #160]	; (8001904 <HAL_UART_MspInit+0x15c>)
 8001862:	2200      	movs	r2, #0
 8001864:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001866:	4827      	ldr	r0, [pc, #156]	; (8001904 <HAL_UART_MspInit+0x15c>)
 8001868:	f000 fa02 	bl	8001c70 <HAL_DMA_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001872:	f7ff fd0f 	bl	8001294 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a22      	ldr	r2, [pc, #136]	; (8001904 <HAL_UART_MspInit+0x15c>)
 800187a:	635a      	str	r2, [r3, #52]	; 0x34
 800187c:	4a21      	ldr	r2, [pc, #132]	; (8001904 <HAL_UART_MspInit+0x15c>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001882:	4b22      	ldr	r3, [pc, #136]	; (800190c <HAL_UART_MspInit+0x164>)
 8001884:	4a22      	ldr	r2, [pc, #136]	; (8001910 <HAL_UART_MspInit+0x168>)
 8001886:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8001888:	4b20      	ldr	r3, [pc, #128]	; (800190c <HAL_UART_MspInit+0x164>)
 800188a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800188e:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001890:	4b1e      	ldr	r3, [pc, #120]	; (800190c <HAL_UART_MspInit+0x164>)
 8001892:	2240      	movs	r2, #64	; 0x40
 8001894:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001896:	4b1d      	ldr	r3, [pc, #116]	; (800190c <HAL_UART_MspInit+0x164>)
 8001898:	2200      	movs	r2, #0
 800189a:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <HAL_UART_MspInit+0x164>)
 800189e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018a2:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018a4:	4b19      	ldr	r3, [pc, #100]	; (800190c <HAL_UART_MspInit+0x164>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018aa:	4b18      	ldr	r3, [pc, #96]	; (800190c <HAL_UART_MspInit+0x164>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80018b0:	4b16      	ldr	r3, [pc, #88]	; (800190c <HAL_UART_MspInit+0x164>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <HAL_UART_MspInit+0x164>)
 80018b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018bc:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018be:	4b13      	ldr	r3, [pc, #76]	; (800190c <HAL_UART_MspInit+0x164>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80018c4:	4811      	ldr	r0, [pc, #68]	; (800190c <HAL_UART_MspInit+0x164>)
 80018c6:	f000 f9d3 	bl	8001c70 <HAL_DMA_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80018d0:	f7ff fce0 	bl	8001294 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a0d      	ldr	r2, [pc, #52]	; (800190c <HAL_UART_MspInit+0x164>)
 80018d8:	631a      	str	r2, [r3, #48]	; 0x30
 80018da:	4a0c      	ldr	r2, [pc, #48]	; (800190c <HAL_UART_MspInit+0x164>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2100      	movs	r1, #0
 80018e4:	2047      	movs	r0, #71	; 0x47
 80018e6:	f000 f98c 	bl	8001c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80018ea:	2047      	movs	r0, #71	; 0x47
 80018ec:	f000 f9a5 	bl	8001c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80018f0:	bf00      	nop
 80018f2:	3728      	adds	r7, #40	; 0x28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40011400 	.word	0x40011400
 80018fc:	40023800 	.word	0x40023800
 8001900:	40020800 	.word	0x40020800
 8001904:	20000330 	.word	0x20000330
 8001908:	40026428 	.word	0x40026428
 800190c:	20000390 	.word	0x20000390
 8001910:	400264a0 	.word	0x400264a0

08001914 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800194c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001918:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800191a:	e003      	b.n	8001924 <LoopCopyDataInit>

0800191c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800191e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001920:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001922:	3104      	adds	r1, #4

08001924 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001924:	480b      	ldr	r0, [pc, #44]	; (8001954 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001928:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800192a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800192c:	d3f6      	bcc.n	800191c <CopyDataInit>
  ldr  r2, =_sbss
 800192e:	4a0b      	ldr	r2, [pc, #44]	; (800195c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001930:	e002      	b.n	8001938 <LoopFillZerobss>

08001932 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001932:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001934:	f842 3b04 	str.w	r3, [r2], #4

08001938 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800193a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800193c:	d3f9      	bcc.n	8001932 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800193e:	f7ff fe0b 	bl	8001558 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001942:	f002 ff9b 	bl	800487c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001946:	f7ff fc15 	bl	8001174 <main>
  bx  lr    
 800194a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800194c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001950:	08007724 	.word	0x08007724
  ldr  r0, =_sdata
 8001954:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001958:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800195c:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001960:	20000424 	.word	0x20000424

08001964 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001964:	e7fe      	b.n	8001964 <ADC_IRQHandler>
	...

08001968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800196c:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <HAL_Init+0x40>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a0d      	ldr	r2, [pc, #52]	; (80019a8 <HAL_Init+0x40>)
 8001972:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001976:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001978:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <HAL_Init+0x40>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <HAL_Init+0x40>)
 800197e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001982:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <HAL_Init+0x40>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <HAL_Init+0x40>)
 800198a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001990:	2003      	movs	r0, #3
 8001992:	f000 f92b 	bl	8001bec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001996:	2000      	movs	r0, #0
 8001998:	f000 f808 	bl	80019ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800199c:	f7ff fc82 	bl	80012a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40023c00 	.word	0x40023c00

080019ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_InitTick+0x54>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_InitTick+0x58>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	4619      	mov	r1, r3
 80019be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 f943 	bl	8001c56 <HAL_SYSTICK_Config>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00e      	b.n	80019f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b0f      	cmp	r3, #15
 80019de:	d80a      	bhi.n	80019f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e0:	2200      	movs	r2, #0
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	f000 f90b 	bl	8001c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019ec:	4a06      	ldr	r2, [pc, #24]	; (8001a08 <HAL_InitTick+0x5c>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	e000      	b.n	80019f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000000 	.word	0x20000000
 8001a04:	20000008 	.word	0x20000008
 8001a08:	20000004 	.word	0x20000004

08001a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_IncTick+0x20>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_IncTick+0x24>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a04      	ldr	r2, [pc, #16]	; (8001a30 <HAL_IncTick+0x24>)
 8001a1e:	6013      	str	r3, [r2, #0]
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20000008 	.word	0x20000008
 8001a30:	200003f0 	.word	0x200003f0

08001a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return uwTick;
 8001a38:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <HAL_GetTick+0x14>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	200003f0 	.word	0x200003f0

08001a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a7e:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	60d3      	str	r3, [r2, #12]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <__NVIC_GetPriorityGrouping+0x18>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	0a1b      	lsrs	r3, r3, #8
 8001a9e:	f003 0307 	and.w	r3, r3, #7
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	db0b      	blt.n	8001ada <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	f003 021f 	and.w	r2, r3, #31
 8001ac8:	4907      	ldr	r1, [pc, #28]	; (8001ae8 <__NVIC_EnableIRQ+0x38>)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	095b      	lsrs	r3, r3, #5
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000e100 	.word	0xe000e100

08001aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	6039      	str	r1, [r7, #0]
 8001af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	db0a      	blt.n	8001b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	490c      	ldr	r1, [pc, #48]	; (8001b38 <__NVIC_SetPriority+0x4c>)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	0112      	lsls	r2, r2, #4
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	440b      	add	r3, r1
 8001b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b14:	e00a      	b.n	8001b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	4908      	ldr	r1, [pc, #32]	; (8001b3c <__NVIC_SetPriority+0x50>)
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	3b04      	subs	r3, #4
 8001b24:	0112      	lsls	r2, r2, #4
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	440b      	add	r3, r1
 8001b2a:	761a      	strb	r2, [r3, #24]
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000e100 	.word	0xe000e100
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b089      	sub	sp, #36	; 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f1c3 0307 	rsb	r3, r3, #7
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	bf28      	it	cs
 8001b5e:	2304      	movcs	r3, #4
 8001b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3304      	adds	r3, #4
 8001b66:	2b06      	cmp	r3, #6
 8001b68:	d902      	bls.n	8001b70 <NVIC_EncodePriority+0x30>
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3b03      	subs	r3, #3
 8001b6e:	e000      	b.n	8001b72 <NVIC_EncodePriority+0x32>
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	f04f 32ff 	mov.w	r2, #4294967295
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43da      	mvns	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	401a      	ands	r2, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b88:	f04f 31ff 	mov.w	r1, #4294967295
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b92:	43d9      	mvns	r1, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b98:	4313      	orrs	r3, r2
         );
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3724      	adds	r7, #36	; 0x24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bb8:	d301      	bcc.n	8001bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e00f      	b.n	8001bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <SysTick_Config+0x40>)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bc6:	210f      	movs	r1, #15
 8001bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bcc:	f7ff ff8e 	bl	8001aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <SysTick_Config+0x40>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bd6:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <SysTick_Config+0x40>)
 8001bd8:	2207      	movs	r2, #7
 8001bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	e000e010 	.word	0xe000e010

08001bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff ff29 	bl	8001a4c <__NVIC_SetPriorityGrouping>
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b086      	sub	sp, #24
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4603      	mov	r3, r0
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
 8001c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c14:	f7ff ff3e 	bl	8001a94 <__NVIC_GetPriorityGrouping>
 8001c18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	68b9      	ldr	r1, [r7, #8]
 8001c1e:	6978      	ldr	r0, [r7, #20]
 8001c20:	f7ff ff8e 	bl	8001b40 <NVIC_EncodePriority>
 8001c24:	4602      	mov	r2, r0
 8001c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff5d 	bl	8001aec <__NVIC_SetPriority>
}
 8001c32:	bf00      	nop
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	4603      	mov	r3, r0
 8001c42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff31 	bl	8001ab0 <__NVIC_EnableIRQ>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff ffa2 	bl	8001ba8 <SysTick_Config>
 8001c64:	4603      	mov	r3, r0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c7c:	f7ff feda 	bl	8001a34 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e099      	b.n	8001dc0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2202      	movs	r2, #2
 8001c98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0201 	bic.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cac:	e00f      	b.n	8001cce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cae:	f7ff fec1 	bl	8001a34 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b05      	cmp	r3, #5
 8001cba:	d908      	bls.n	8001cce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e078      	b.n	8001dc0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1e8      	bne.n	8001cae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	4b38      	ldr	r3, [pc, #224]	; (8001dc8 <HAL_DMA_Init+0x158>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d107      	bne.n	8001d38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d30:	4313      	orrs	r3, r2
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	f023 0307 	bic.w	r3, r3, #7
 8001d4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d117      	bne.n	8001d92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00e      	beq.n	8001d92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 fa0b 	bl	8002190 <DMA_CheckFifoParam>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d008      	beq.n	8001d92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2240      	movs	r2, #64	; 0x40
 8001d84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e016      	b.n	8001dc0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f9c2 	bl	8002124 <DMA_CalcBaseAndBitshift>
 8001da0:	4603      	mov	r3, r0
 8001da2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da8:	223f      	movs	r2, #63	; 0x3f
 8001daa:	409a      	lsls	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	f010803f 	.word	0xf010803f

08001dcc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d004      	beq.n	8001dea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2280      	movs	r2, #128	; 0x80
 8001de4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e00c      	b.n	8001e04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2205      	movs	r2, #5
 8001dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0201 	bic.w	r2, r2, #1
 8001e00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e1c:	4b8e      	ldr	r3, [pc, #568]	; (8002058 <HAL_DMA_IRQHandler+0x248>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a8e      	ldr	r2, [pc, #568]	; (800205c <HAL_DMA_IRQHandler+0x24c>)
 8001e22:	fba2 2303 	umull	r2, r3, r2, r3
 8001e26:	0a9b      	lsrs	r3, r3, #10
 8001e28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3a:	2208      	movs	r2, #8
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d01a      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d013      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0204 	bic.w	r2, r2, #4
 8001e62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e68:	2208      	movs	r2, #8
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e74:	f043 0201 	orr.w	r2, r3, #1
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e80:	2201      	movs	r2, #1
 8001e82:	409a      	lsls	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4013      	ands	r3, r2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d012      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00b      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	409a      	lsls	r2, r3
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eaa:	f043 0202 	orr.w	r2, r3, #2
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	409a      	lsls	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d012      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00b      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed4:	2204      	movs	r2, #4
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee0:	f043 0204 	orr.w	r2, r3, #4
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eec:	2210      	movs	r2, #16
 8001eee:	409a      	lsls	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d043      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d03c      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0a:	2210      	movs	r2, #16
 8001f0c:	409a      	lsls	r2, r3
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d018      	beq.n	8001f52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d108      	bne.n	8001f40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d024      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	4798      	blx	r3
 8001f3e:	e01f      	b.n	8001f80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d01b      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	4798      	blx	r3
 8001f50:	e016      	b.n	8001f80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d107      	bne.n	8001f70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0208 	bic.w	r2, r2, #8
 8001f6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f84:	2220      	movs	r2, #32
 8001f86:	409a      	lsls	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 808f 	beq.w	80020b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0310 	and.w	r3, r3, #16
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 8087 	beq.w	80020b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	409a      	lsls	r2, r3
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b05      	cmp	r3, #5
 8001fb8:	d136      	bne.n	8002028 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0216 	bic.w	r2, r2, #22
 8001fc8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fd8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d103      	bne.n	8001fea <HAL_DMA_IRQHandler+0x1da>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d007      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0208 	bic.w	r2, r2, #8
 8001ff8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffe:	223f      	movs	r2, #63	; 0x3f
 8002000:	409a      	lsls	r2, r3
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800201a:	2b00      	cmp	r3, #0
 800201c:	d07e      	beq.n	800211c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	4798      	blx	r3
        }
        return;
 8002026:	e079      	b.n	800211c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d01d      	beq.n	8002072 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10d      	bne.n	8002060 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002048:	2b00      	cmp	r3, #0
 800204a:	d031      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	4798      	blx	r3
 8002054:	e02c      	b.n	80020b0 <HAL_DMA_IRQHandler+0x2a0>
 8002056:	bf00      	nop
 8002058:	20000000 	.word	0x20000000
 800205c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002064:	2b00      	cmp	r3, #0
 8002066:	d023      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	4798      	blx	r3
 8002070:	e01e      	b.n	80020b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10f      	bne.n	80020a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0210 	bic.w	r2, r2, #16
 800208e:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d032      	beq.n	800211e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d022      	beq.n	800210a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2205      	movs	r2, #5
 80020c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0201 	bic.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	3301      	adds	r3, #1
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d307      	bcc.n	80020f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f2      	bne.n	80020dc <HAL_DMA_IRQHandler+0x2cc>
 80020f6:	e000      	b.n	80020fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020f8:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210e:	2b00      	cmp	r3, #0
 8002110:	d005      	beq.n	800211e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	4798      	blx	r3
 800211a:	e000      	b.n	800211e <HAL_DMA_IRQHandler+0x30e>
        return;
 800211c:	bf00      	nop
    }
  }
}
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	b2db      	uxtb	r3, r3
 8002132:	3b10      	subs	r3, #16
 8002134:	4a14      	ldr	r2, [pc, #80]	; (8002188 <DMA_CalcBaseAndBitshift+0x64>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	091b      	lsrs	r3, r3, #4
 800213c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800213e:	4a13      	ldr	r2, [pc, #76]	; (800218c <DMA_CalcBaseAndBitshift+0x68>)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4413      	add	r3, r2
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2b03      	cmp	r3, #3
 8002150:	d909      	bls.n	8002166 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800215a:	f023 0303 	bic.w	r3, r3, #3
 800215e:	1d1a      	adds	r2, r3, #4
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	659a      	str	r2, [r3, #88]	; 0x58
 8002164:	e007      	b.n	8002176 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800216e:	f023 0303 	bic.w	r3, r3, #3
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800217a:	4618      	mov	r0, r3
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	aaaaaaab 	.word	0xaaaaaaab
 800218c:	08007330 	.word	0x08007330

08002190 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d11f      	bne.n	80021ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d856      	bhi.n	800225e <DMA_CheckFifoParam+0xce>
 80021b0:	a201      	add	r2, pc, #4	; (adr r2, 80021b8 <DMA_CheckFifoParam+0x28>)
 80021b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b6:	bf00      	nop
 80021b8:	080021c9 	.word	0x080021c9
 80021bc:	080021db 	.word	0x080021db
 80021c0:	080021c9 	.word	0x080021c9
 80021c4:	0800225f 	.word	0x0800225f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d046      	beq.n	8002262 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021d8:	e043      	b.n	8002262 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021e2:	d140      	bne.n	8002266 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021e8:	e03d      	b.n	8002266 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021f2:	d121      	bne.n	8002238 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d837      	bhi.n	800226a <DMA_CheckFifoParam+0xda>
 80021fa:	a201      	add	r2, pc, #4	; (adr r2, 8002200 <DMA_CheckFifoParam+0x70>)
 80021fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002200:	08002211 	.word	0x08002211
 8002204:	08002217 	.word	0x08002217
 8002208:	08002211 	.word	0x08002211
 800220c:	08002229 	.word	0x08002229
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	73fb      	strb	r3, [r7, #15]
      break;
 8002214:	e030      	b.n	8002278 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d025      	beq.n	800226e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002226:	e022      	b.n	800226e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002230:	d11f      	bne.n	8002272 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002236:	e01c      	b.n	8002272 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d903      	bls.n	8002246 <DMA_CheckFifoParam+0xb6>
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2b03      	cmp	r3, #3
 8002242:	d003      	beq.n	800224c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002244:	e018      	b.n	8002278 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	73fb      	strb	r3, [r7, #15]
      break;
 800224a:	e015      	b.n	8002278 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00e      	beq.n	8002276 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	73fb      	strb	r3, [r7, #15]
      break;
 800225c:	e00b      	b.n	8002276 <DMA_CheckFifoParam+0xe6>
      break;
 800225e:	bf00      	nop
 8002260:	e00a      	b.n	8002278 <DMA_CheckFifoParam+0xe8>
      break;
 8002262:	bf00      	nop
 8002264:	e008      	b.n	8002278 <DMA_CheckFifoParam+0xe8>
      break;
 8002266:	bf00      	nop
 8002268:	e006      	b.n	8002278 <DMA_CheckFifoParam+0xe8>
      break;
 800226a:	bf00      	nop
 800226c:	e004      	b.n	8002278 <DMA_CheckFifoParam+0xe8>
      break;
 800226e:	bf00      	nop
 8002270:	e002      	b.n	8002278 <DMA_CheckFifoParam+0xe8>
      break;   
 8002272:	bf00      	nop
 8002274:	e000      	b.n	8002278 <DMA_CheckFifoParam+0xe8>
      break;
 8002276:	bf00      	nop
    }
  } 
  
  return status; 
 8002278:	7bfb      	ldrb	r3, [r7, #15]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop

08002288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	; 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800229a:	2300      	movs	r3, #0
 800229c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
 80022a2:	e159      	b.n	8002558 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022a4:	2201      	movs	r2, #1
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	429a      	cmp	r2, r3
 80022be:	f040 8148 	bne.w	8002552 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d00b      	beq.n	80022e2 <HAL_GPIO_Init+0x5a>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d007      	beq.n	80022e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022d6:	2b11      	cmp	r3, #17
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b12      	cmp	r3, #18
 80022e0:	d130      	bne.n	8002344 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	2203      	movs	r2, #3
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002318:	2201      	movs	r2, #1
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	091b      	lsrs	r3, r3, #4
 800232e:	f003 0201 	and.w	r2, r3, #1
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	2203      	movs	r2, #3
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4013      	ands	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b02      	cmp	r3, #2
 800237a:	d003      	beq.n	8002384 <HAL_GPIO_Init+0xfc>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b12      	cmp	r3, #18
 8002382:	d123      	bne.n	80023cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	08da      	lsrs	r2, r3, #3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3208      	adds	r2, #8
 800238c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	220f      	movs	r2, #15
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	08da      	lsrs	r2, r3, #3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3208      	adds	r2, #8
 80023c6:	69b9      	ldr	r1, [r7, #24]
 80023c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	2203      	movs	r2, #3
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 0203 	and.w	r2, r3, #3
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 80a2 	beq.w	8002552 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	4b57      	ldr	r3, [pc, #348]	; (8002570 <HAL_GPIO_Init+0x2e8>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	4a56      	ldr	r2, [pc, #344]	; (8002570 <HAL_GPIO_Init+0x2e8>)
 8002418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800241c:	6453      	str	r3, [r2, #68]	; 0x44
 800241e:	4b54      	ldr	r3, [pc, #336]	; (8002570 <HAL_GPIO_Init+0x2e8>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800242a:	4a52      	ldr	r2, [pc, #328]	; (8002574 <HAL_GPIO_Init+0x2ec>)
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	089b      	lsrs	r3, r3, #2
 8002430:	3302      	adds	r3, #2
 8002432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	220f      	movs	r2, #15
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a49      	ldr	r2, [pc, #292]	; (8002578 <HAL_GPIO_Init+0x2f0>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d019      	beq.n	800248a <HAL_GPIO_Init+0x202>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a48      	ldr	r2, [pc, #288]	; (800257c <HAL_GPIO_Init+0x2f4>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d013      	beq.n	8002486 <HAL_GPIO_Init+0x1fe>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a47      	ldr	r2, [pc, #284]	; (8002580 <HAL_GPIO_Init+0x2f8>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d00d      	beq.n	8002482 <HAL_GPIO_Init+0x1fa>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a46      	ldr	r2, [pc, #280]	; (8002584 <HAL_GPIO_Init+0x2fc>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d007      	beq.n	800247e <HAL_GPIO_Init+0x1f6>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a45      	ldr	r2, [pc, #276]	; (8002588 <HAL_GPIO_Init+0x300>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d101      	bne.n	800247a <HAL_GPIO_Init+0x1f2>
 8002476:	2304      	movs	r3, #4
 8002478:	e008      	b.n	800248c <HAL_GPIO_Init+0x204>
 800247a:	2307      	movs	r3, #7
 800247c:	e006      	b.n	800248c <HAL_GPIO_Init+0x204>
 800247e:	2303      	movs	r3, #3
 8002480:	e004      	b.n	800248c <HAL_GPIO_Init+0x204>
 8002482:	2302      	movs	r3, #2
 8002484:	e002      	b.n	800248c <HAL_GPIO_Init+0x204>
 8002486:	2301      	movs	r3, #1
 8002488:	e000      	b.n	800248c <HAL_GPIO_Init+0x204>
 800248a:	2300      	movs	r3, #0
 800248c:	69fa      	ldr	r2, [r7, #28]
 800248e:	f002 0203 	and.w	r2, r2, #3
 8002492:	0092      	lsls	r2, r2, #2
 8002494:	4093      	lsls	r3, r2
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4313      	orrs	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800249c:	4935      	ldr	r1, [pc, #212]	; (8002574 <HAL_GPIO_Init+0x2ec>)
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	089b      	lsrs	r3, r3, #2
 80024a2:	3302      	adds	r3, #2
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024aa:	4b38      	ldr	r3, [pc, #224]	; (800258c <HAL_GPIO_Init+0x304>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4013      	ands	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024ce:	4a2f      	ldr	r2, [pc, #188]	; (800258c <HAL_GPIO_Init+0x304>)
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024d4:	4b2d      	ldr	r3, [pc, #180]	; (800258c <HAL_GPIO_Init+0x304>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024f8:	4a24      	ldr	r2, [pc, #144]	; (800258c <HAL_GPIO_Init+0x304>)
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024fe:	4b23      	ldr	r3, [pc, #140]	; (800258c <HAL_GPIO_Init+0x304>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002522:	4a1a      	ldr	r2, [pc, #104]	; (800258c <HAL_GPIO_Init+0x304>)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002528:	4b18      	ldr	r3, [pc, #96]	; (800258c <HAL_GPIO_Init+0x304>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800254c:	4a0f      	ldr	r2, [pc, #60]	; (800258c <HAL_GPIO_Init+0x304>)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3301      	adds	r3, #1
 8002556:	61fb      	str	r3, [r7, #28]
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	2b0f      	cmp	r3, #15
 800255c:	f67f aea2 	bls.w	80022a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002560:	bf00      	nop
 8002562:	bf00      	nop
 8002564:	3724      	adds	r7, #36	; 0x24
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40023800 	.word	0x40023800
 8002574:	40013800 	.word	0x40013800
 8002578:	40020000 	.word	0x40020000
 800257c:	40020400 	.word	0x40020400
 8002580:	40020800 	.word	0x40020800
 8002584:	40020c00 	.word	0x40020c00
 8002588:	40021000 	.word	0x40021000
 800258c:	40013c00 	.word	0x40013c00

08002590 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800259a:	4b08      	ldr	r3, [pc, #32]	; (80025bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800259c:	695a      	ldr	r2, [r3, #20]
 800259e:	88fb      	ldrh	r3, [r7, #6]
 80025a0:	4013      	ands	r3, r2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d006      	beq.n	80025b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025a6:	4a05      	ldr	r2, [pc, #20]	; (80025bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025a8:	88fb      	ldrh	r3, [r7, #6]
 80025aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025ac:	88fb      	ldrh	r3, [r7, #6]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f002 f94e 	bl	8004850 <HAL_GPIO_EXTI_Callback>
  }
}
 80025b4:	bf00      	nop
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40013c00 	.word	0x40013c00

080025c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e12b      	b.n	800282a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d106      	bne.n	80025ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7fe fd48 	bl	800107c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2224      	movs	r2, #36	; 0x24
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0201 	bic.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002612:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002622:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002624:	f000 fd36 	bl	8003094 <HAL_RCC_GetPCLK1Freq>
 8002628:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	4a81      	ldr	r2, [pc, #516]	; (8002834 <HAL_I2C_Init+0x274>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d807      	bhi.n	8002644 <HAL_I2C_Init+0x84>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4a80      	ldr	r2, [pc, #512]	; (8002838 <HAL_I2C_Init+0x278>)
 8002638:	4293      	cmp	r3, r2
 800263a:	bf94      	ite	ls
 800263c:	2301      	movls	r3, #1
 800263e:	2300      	movhi	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	e006      	b.n	8002652 <HAL_I2C_Init+0x92>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4a7d      	ldr	r2, [pc, #500]	; (800283c <HAL_I2C_Init+0x27c>)
 8002648:	4293      	cmp	r3, r2
 800264a:	bf94      	ite	ls
 800264c:	2301      	movls	r3, #1
 800264e:	2300      	movhi	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e0e7      	b.n	800282a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4a78      	ldr	r2, [pc, #480]	; (8002840 <HAL_I2C_Init+0x280>)
 800265e:	fba2 2303 	umull	r2, r3, r2, r3
 8002662:	0c9b      	lsrs	r3, r3, #18
 8002664:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	430a      	orrs	r2, r1
 8002678:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	4a6a      	ldr	r2, [pc, #424]	; (8002834 <HAL_I2C_Init+0x274>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d802      	bhi.n	8002694 <HAL_I2C_Init+0xd4>
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	3301      	adds	r3, #1
 8002692:	e009      	b.n	80026a8 <HAL_I2C_Init+0xe8>
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800269a:	fb02 f303 	mul.w	r3, r2, r3
 800269e:	4a69      	ldr	r2, [pc, #420]	; (8002844 <HAL_I2C_Init+0x284>)
 80026a0:	fba2 2303 	umull	r2, r3, r2, r3
 80026a4:	099b      	lsrs	r3, r3, #6
 80026a6:	3301      	adds	r3, #1
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	430b      	orrs	r3, r1
 80026ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	495c      	ldr	r1, [pc, #368]	; (8002834 <HAL_I2C_Init+0x274>)
 80026c4:	428b      	cmp	r3, r1
 80026c6:	d819      	bhi.n	80026fc <HAL_I2C_Init+0x13c>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1e59      	subs	r1, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80026d6:	1c59      	adds	r1, r3, #1
 80026d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026dc:	400b      	ands	r3, r1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00a      	beq.n	80026f8 <HAL_I2C_Init+0x138>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1e59      	subs	r1, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80026f0:	3301      	adds	r3, #1
 80026f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f6:	e051      	b.n	800279c <HAL_I2C_Init+0x1dc>
 80026f8:	2304      	movs	r3, #4
 80026fa:	e04f      	b.n	800279c <HAL_I2C_Init+0x1dc>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d111      	bne.n	8002728 <HAL_I2C_Init+0x168>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	1e58      	subs	r0, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6859      	ldr	r1, [r3, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	440b      	add	r3, r1
 8002712:	fbb0 f3f3 	udiv	r3, r0, r3
 8002716:	3301      	adds	r3, #1
 8002718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800271c:	2b00      	cmp	r3, #0
 800271e:	bf0c      	ite	eq
 8002720:	2301      	moveq	r3, #1
 8002722:	2300      	movne	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	e012      	b.n	800274e <HAL_I2C_Init+0x18e>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	1e58      	subs	r0, r3, #1
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6859      	ldr	r1, [r3, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	0099      	lsls	r1, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	fbb0 f3f3 	udiv	r3, r0, r3
 800273e:	3301      	adds	r3, #1
 8002740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002744:	2b00      	cmp	r3, #0
 8002746:	bf0c      	ite	eq
 8002748:	2301      	moveq	r3, #1
 800274a:	2300      	movne	r3, #0
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_I2C_Init+0x196>
 8002752:	2301      	movs	r3, #1
 8002754:	e022      	b.n	800279c <HAL_I2C_Init+0x1dc>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10e      	bne.n	800277c <HAL_I2C_Init+0x1bc>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	1e58      	subs	r0, r3, #1
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6859      	ldr	r1, [r3, #4]
 8002766:	460b      	mov	r3, r1
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	440b      	add	r3, r1
 800276c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002770:	3301      	adds	r3, #1
 8002772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800277a:	e00f      	b.n	800279c <HAL_I2C_Init+0x1dc>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	1e58      	subs	r0, r3, #1
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6859      	ldr	r1, [r3, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	440b      	add	r3, r1
 800278a:	0099      	lsls	r1, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002792:	3301      	adds	r3, #1
 8002794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002798:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	6809      	ldr	r1, [r1, #0]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69da      	ldr	r2, [r3, #28]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6911      	ldr	r1, [r2, #16]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	68d2      	ldr	r2, [r2, #12]
 80027d6:	4311      	orrs	r1, r2
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	430b      	orrs	r3, r1
 80027de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695a      	ldr	r2, [r3, #20]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0201 	orr.w	r2, r2, #1
 800280a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2220      	movs	r2, #32
 8002816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	000186a0 	.word	0x000186a0
 8002838:	001e847f 	.word	0x001e847f
 800283c:	003d08ff 	.word	0x003d08ff
 8002840:	431bde83 	.word	0x431bde83
 8002844:	10624dd3 	.word	0x10624dd3

08002848 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e25e      	b.n	8002d18 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d075      	beq.n	8002952 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002866:	4b88      	ldr	r3, [pc, #544]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	2b04      	cmp	r3, #4
 8002870:	d00c      	beq.n	800288c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002872:	4b85      	ldr	r3, [pc, #532]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800287a:	2b08      	cmp	r3, #8
 800287c:	d112      	bne.n	80028a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800287e:	4b82      	ldr	r3, [pc, #520]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002886:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800288a:	d10b      	bne.n	80028a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288c:	4b7e      	ldr	r3, [pc, #504]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d05b      	beq.n	8002950 <HAL_RCC_OscConfig+0x108>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d157      	bne.n	8002950 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e239      	b.n	8002d18 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ac:	d106      	bne.n	80028bc <HAL_RCC_OscConfig+0x74>
 80028ae:	4b76      	ldr	r3, [pc, #472]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a75      	ldr	r2, [pc, #468]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	e01d      	b.n	80028f8 <HAL_RCC_OscConfig+0xb0>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCC_OscConfig+0x98>
 80028c6:	4b70      	ldr	r3, [pc, #448]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a6f      	ldr	r2, [pc, #444]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	4b6d      	ldr	r3, [pc, #436]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a6c      	ldr	r2, [pc, #432]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	e00b      	b.n	80028f8 <HAL_RCC_OscConfig+0xb0>
 80028e0:	4b69      	ldr	r3, [pc, #420]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a68      	ldr	r2, [pc, #416]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	4b66      	ldr	r3, [pc, #408]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a65      	ldr	r2, [pc, #404]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d013      	beq.n	8002928 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002900:	f7ff f898 	bl	8001a34 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002908:	f7ff f894 	bl	8001a34 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b64      	cmp	r3, #100	; 0x64
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e1fe      	b.n	8002d18 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	4b5b      	ldr	r3, [pc, #364]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0xc0>
 8002926:	e014      	b.n	8002952 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002928:	f7ff f884 	bl	8001a34 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002930:	f7ff f880 	bl	8001a34 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b64      	cmp	r3, #100	; 0x64
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e1ea      	b.n	8002d18 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002942:	4b51      	ldr	r3, [pc, #324]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0xe8>
 800294e:	e000      	b.n	8002952 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d063      	beq.n	8002a26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800295e:	4b4a      	ldr	r3, [pc, #296]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00b      	beq.n	8002982 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800296a:	4b47      	ldr	r3, [pc, #284]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002972:	2b08      	cmp	r3, #8
 8002974:	d11c      	bne.n	80029b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002976:	4b44      	ldr	r3, [pc, #272]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d116      	bne.n	80029b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002982:	4b41      	ldr	r3, [pc, #260]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d005      	beq.n	800299a <HAL_RCC_OscConfig+0x152>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d001      	beq.n	800299a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e1be      	b.n	8002d18 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299a:	4b3b      	ldr	r3, [pc, #236]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	4937      	ldr	r1, [pc, #220]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ae:	e03a      	b.n	8002a26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d020      	beq.n	80029fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029b8:	4b34      	ldr	r3, [pc, #208]	; (8002a8c <HAL_RCC_OscConfig+0x244>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029be:	f7ff f839 	bl	8001a34 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029c6:	f7ff f835 	bl	8001a34 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e19f      	b.n	8002d18 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d8:	4b2b      	ldr	r3, [pc, #172]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0f0      	beq.n	80029c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e4:	4b28      	ldr	r3, [pc, #160]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4925      	ldr	r1, [pc, #148]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	600b      	str	r3, [r1, #0]
 80029f8:	e015      	b.n	8002a26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029fa:	4b24      	ldr	r3, [pc, #144]	; (8002a8c <HAL_RCC_OscConfig+0x244>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a00:	f7ff f818 	bl	8001a34 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a08:	f7ff f814 	bl	8001a34 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e17e      	b.n	8002d18 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1a:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d036      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d016      	beq.n	8002a68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a3a:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <HAL_RCC_OscConfig+0x248>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a40:	f7fe fff8 	bl	8001a34 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a48:	f7fe fff4 	bl	8001a34 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e15e      	b.n	8002d18 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x200>
 8002a66:	e01b      	b.n	8002aa0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a68:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <HAL_RCC_OscConfig+0x248>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6e:	f7fe ffe1 	bl	8001a34 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a74:	e00e      	b.n	8002a94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a76:	f7fe ffdd 	bl	8001a34 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d907      	bls.n	8002a94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e147      	b.n	8002d18 <HAL_RCC_OscConfig+0x4d0>
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	42470000 	.word	0x42470000
 8002a90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a94:	4b88      	ldr	r3, [pc, #544]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1ea      	bne.n	8002a76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 8097 	beq.w	8002bdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ab2:	4b81      	ldr	r3, [pc, #516]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10f      	bne.n	8002ade <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	4b7d      	ldr	r3, [pc, #500]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	4a7c      	ldr	r2, [pc, #496]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002acc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ace:	4b7a      	ldr	r3, [pc, #488]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ada:	2301      	movs	r3, #1
 8002adc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ade:	4b77      	ldr	r3, [pc, #476]	; (8002cbc <HAL_RCC_OscConfig+0x474>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d118      	bne.n	8002b1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aea:	4b74      	ldr	r3, [pc, #464]	; (8002cbc <HAL_RCC_OscConfig+0x474>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a73      	ldr	r2, [pc, #460]	; (8002cbc <HAL_RCC_OscConfig+0x474>)
 8002af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af6:	f7fe ff9d 	bl	8001a34 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002afe:	f7fe ff99 	bl	8001a34 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e103      	b.n	8002d18 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b10:	4b6a      	ldr	r3, [pc, #424]	; (8002cbc <HAL_RCC_OscConfig+0x474>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0f0      	beq.n	8002afe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d106      	bne.n	8002b32 <HAL_RCC_OscConfig+0x2ea>
 8002b24:	4b64      	ldr	r3, [pc, #400]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b28:	4a63      	ldr	r2, [pc, #396]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b30:	e01c      	b.n	8002b6c <HAL_RCC_OscConfig+0x324>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b05      	cmp	r3, #5
 8002b38:	d10c      	bne.n	8002b54 <HAL_RCC_OscConfig+0x30c>
 8002b3a:	4b5f      	ldr	r3, [pc, #380]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3e:	4a5e      	ldr	r2, [pc, #376]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b40:	f043 0304 	orr.w	r3, r3, #4
 8002b44:	6713      	str	r3, [r2, #112]	; 0x70
 8002b46:	4b5c      	ldr	r3, [pc, #368]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4a:	4a5b      	ldr	r2, [pc, #364]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	6713      	str	r3, [r2, #112]	; 0x70
 8002b52:	e00b      	b.n	8002b6c <HAL_RCC_OscConfig+0x324>
 8002b54:	4b58      	ldr	r3, [pc, #352]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b58:	4a57      	ldr	r2, [pc, #348]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b5a:	f023 0301 	bic.w	r3, r3, #1
 8002b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b60:	4b55      	ldr	r3, [pc, #340]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b64:	4a54      	ldr	r2, [pc, #336]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b66:	f023 0304 	bic.w	r3, r3, #4
 8002b6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d015      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b74:	f7fe ff5e 	bl	8001a34 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7a:	e00a      	b.n	8002b92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b7c:	f7fe ff5a 	bl	8001a34 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e0c2      	b.n	8002d18 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b92:	4b49      	ldr	r3, [pc, #292]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0ee      	beq.n	8002b7c <HAL_RCC_OscConfig+0x334>
 8002b9e:	e014      	b.n	8002bca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba0:	f7fe ff48 	bl	8001a34 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba8:	f7fe ff44 	bl	8001a34 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e0ac      	b.n	8002d18 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bbe:	4b3e      	ldr	r3, [pc, #248]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1ee      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bca:	7dfb      	ldrb	r3, [r7, #23]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d105      	bne.n	8002bdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd0:	4b39      	ldr	r3, [pc, #228]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	4a38      	ldr	r2, [pc, #224]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002bd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8098 	beq.w	8002d16 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002be6:	4b34      	ldr	r3, [pc, #208]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d05c      	beq.n	8002cac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d141      	bne.n	8002c7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfa:	4b31      	ldr	r3, [pc, #196]	; (8002cc0 <HAL_RCC_OscConfig+0x478>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c00:	f7fe ff18 	bl	8001a34 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c08:	f7fe ff14 	bl	8001a34 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e07e      	b.n	8002d18 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1a:	4b27      	ldr	r3, [pc, #156]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69da      	ldr	r2, [r3, #28]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	019b      	lsls	r3, r3, #6
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3c:	085b      	lsrs	r3, r3, #1
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	041b      	lsls	r3, r3, #16
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	061b      	lsls	r3, r3, #24
 8002c4a:	491b      	ldr	r1, [pc, #108]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c50:	4b1b      	ldr	r3, [pc, #108]	; (8002cc0 <HAL_RCC_OscConfig+0x478>)
 8002c52:	2201      	movs	r2, #1
 8002c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c56:	f7fe feed 	bl	8001a34 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c5e:	f7fe fee9 	bl	8001a34 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e053      	b.n	8002d18 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c70:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x416>
 8002c7c:	e04b      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7e:	4b10      	ldr	r3, [pc, #64]	; (8002cc0 <HAL_RCC_OscConfig+0x478>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c84:	f7fe fed6 	bl	8001a34 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c8c:	f7fe fed2 	bl	8001a34 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e03c      	b.n	8002d18 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9e:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f0      	bne.n	8002c8c <HAL_RCC_OscConfig+0x444>
 8002caa:	e034      	b.n	8002d16 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d107      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e02f      	b.n	8002d18 <HAL_RCC_OscConfig+0x4d0>
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40007000 	.word	0x40007000
 8002cc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cc4:	4b16      	ldr	r3, [pc, #88]	; (8002d20 <HAL_RCC_OscConfig+0x4d8>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d11c      	bne.n	8002d12 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d115      	bne.n	8002d12 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cec:	4013      	ands	r3, r2
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d10d      	bne.n	8002d12 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d106      	bne.n	8002d12 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d001      	beq.n	8002d16 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40023800 	.word	0x40023800

08002d24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e0cc      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d38:	4b68      	ldr	r3, [pc, #416]	; (8002edc <HAL_RCC_ClockConfig+0x1b8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 030f 	and.w	r3, r3, #15
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d90c      	bls.n	8002d60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d46:	4b65      	ldr	r3, [pc, #404]	; (8002edc <HAL_RCC_ClockConfig+0x1b8>)
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4e:	4b63      	ldr	r3, [pc, #396]	; (8002edc <HAL_RCC_ClockConfig+0x1b8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0b8      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d020      	beq.n	8002dae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d005      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d78:	4b59      	ldr	r3, [pc, #356]	; (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	4a58      	ldr	r2, [pc, #352]	; (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d90:	4b53      	ldr	r3, [pc, #332]	; (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	4a52      	ldr	r2, [pc, #328]	; (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d9c:	4b50      	ldr	r3, [pc, #320]	; (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	494d      	ldr	r1, [pc, #308]	; (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d044      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d107      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc2:	4b47      	ldr	r3, [pc, #284]	; (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d119      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e07f      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d003      	beq.n	8002de2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d107      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de2:	4b3f      	ldr	r3, [pc, #252]	; (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d109      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e06f      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df2:	4b3b      	ldr	r3, [pc, #236]	; (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e067      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e02:	4b37      	ldr	r3, [pc, #220]	; (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f023 0203 	bic.w	r2, r3, #3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	4934      	ldr	r1, [pc, #208]	; (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e14:	f7fe fe0e 	bl	8001a34 <HAL_GetTick>
 8002e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1a:	e00a      	b.n	8002e32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e1c:	f7fe fe0a 	bl	8001a34 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e04f      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e32:	4b2b      	ldr	r3, [pc, #172]	; (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 020c 	and.w	r2, r3, #12
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d1eb      	bne.n	8002e1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e44:	4b25      	ldr	r3, [pc, #148]	; (8002edc <HAL_RCC_ClockConfig+0x1b8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 030f 	and.w	r3, r3, #15
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d20c      	bcs.n	8002e6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e52:	4b22      	ldr	r3, [pc, #136]	; (8002edc <HAL_RCC_ClockConfig+0x1b8>)
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5a:	4b20      	ldr	r3, [pc, #128]	; (8002edc <HAL_RCC_ClockConfig+0x1b8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d001      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e032      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d008      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e78:	4b19      	ldr	r3, [pc, #100]	; (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	4916      	ldr	r1, [pc, #88]	; (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d009      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e96:	4b12      	ldr	r3, [pc, #72]	; (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	490e      	ldr	r1, [pc, #56]	; (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eaa:	f000 f821 	bl	8002ef0 <HAL_RCC_GetSysClockFreq>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	091b      	lsrs	r3, r3, #4
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	490a      	ldr	r1, [pc, #40]	; (8002ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8002ebc:	5ccb      	ldrb	r3, [r1, r3]
 8002ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec2:	4a09      	ldr	r2, [pc, #36]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ec6:	4b09      	ldr	r3, [pc, #36]	; (8002eec <HAL_RCC_ClockConfig+0x1c8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fe fd6e 	bl	80019ac <HAL_InitTick>

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40023c00 	.word	0x40023c00
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	08007318 	.word	0x08007318
 8002ee8:	20000000 	.word	0x20000000
 8002eec:	20000004 	.word	0x20000004

08002ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ef4:	b090      	sub	sp, #64	; 0x40
 8002ef6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	637b      	str	r3, [r7, #52]	; 0x34
 8002efc:	2300      	movs	r3, #0
 8002efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f00:	2300      	movs	r3, #0
 8002f02:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f08:	4b59      	ldr	r3, [pc, #356]	; (8003070 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 030c 	and.w	r3, r3, #12
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d00d      	beq.n	8002f30 <HAL_RCC_GetSysClockFreq+0x40>
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	f200 80a1 	bhi.w	800305c <HAL_RCC_GetSysClockFreq+0x16c>
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d002      	beq.n	8002f24 <HAL_RCC_GetSysClockFreq+0x34>
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d003      	beq.n	8002f2a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f22:	e09b      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f24:	4b53      	ldr	r3, [pc, #332]	; (8003074 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f26:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002f28:	e09b      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f2a:	4b53      	ldr	r3, [pc, #332]	; (8003078 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f2e:	e098      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f30:	4b4f      	ldr	r3, [pc, #316]	; (8003070 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f38:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f3a:	4b4d      	ldr	r3, [pc, #308]	; (8003070 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d028      	beq.n	8002f98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f46:	4b4a      	ldr	r3, [pc, #296]	; (8003070 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	099b      	lsrs	r3, r3, #6
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	623b      	str	r3, [r7, #32]
 8002f50:	627a      	str	r2, [r7, #36]	; 0x24
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f58:	2100      	movs	r1, #0
 8002f5a:	4b47      	ldr	r3, [pc, #284]	; (8003078 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f5c:	fb03 f201 	mul.w	r2, r3, r1
 8002f60:	2300      	movs	r3, #0
 8002f62:	fb00 f303 	mul.w	r3, r0, r3
 8002f66:	4413      	add	r3, r2
 8002f68:	4a43      	ldr	r2, [pc, #268]	; (8003078 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f6a:	fba0 1202 	umull	r1, r2, r0, r2
 8002f6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f70:	460a      	mov	r2, r1
 8002f72:	62ba      	str	r2, [r7, #40]	; 0x28
 8002f74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f76:	4413      	add	r3, r2
 8002f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	61bb      	str	r3, [r7, #24]
 8002f80:	61fa      	str	r2, [r7, #28]
 8002f82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f8a:	f7fd fe15 	bl	8000bb8 <__aeabi_uldivmod>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	4613      	mov	r3, r2
 8002f94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f96:	e053      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f98:	4b35      	ldr	r3, [pc, #212]	; (8003070 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	099b      	lsrs	r3, r3, #6
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	617a      	str	r2, [r7, #20]
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002faa:	f04f 0b00 	mov.w	fp, #0
 8002fae:	4652      	mov	r2, sl
 8002fb0:	465b      	mov	r3, fp
 8002fb2:	f04f 0000 	mov.w	r0, #0
 8002fb6:	f04f 0100 	mov.w	r1, #0
 8002fba:	0159      	lsls	r1, r3, #5
 8002fbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fc0:	0150      	lsls	r0, r2, #5
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	ebb2 080a 	subs.w	r8, r2, sl
 8002fca:	eb63 090b 	sbc.w	r9, r3, fp
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002fda:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002fde:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002fe2:	ebb2 0408 	subs.w	r4, r2, r8
 8002fe6:	eb63 0509 	sbc.w	r5, r3, r9
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	00eb      	lsls	r3, r5, #3
 8002ff4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ff8:	00e2      	lsls	r2, r4, #3
 8002ffa:	4614      	mov	r4, r2
 8002ffc:	461d      	mov	r5, r3
 8002ffe:	eb14 030a 	adds.w	r3, r4, sl
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	eb45 030b 	adc.w	r3, r5, fp
 8003008:	607b      	str	r3, [r7, #4]
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	f04f 0300 	mov.w	r3, #0
 8003012:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003016:	4629      	mov	r1, r5
 8003018:	028b      	lsls	r3, r1, #10
 800301a:	4621      	mov	r1, r4
 800301c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003020:	4621      	mov	r1, r4
 8003022:	028a      	lsls	r2, r1, #10
 8003024:	4610      	mov	r0, r2
 8003026:	4619      	mov	r1, r3
 8003028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800302a:	2200      	movs	r2, #0
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	60fa      	str	r2, [r7, #12]
 8003030:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003034:	f7fd fdc0 	bl	8000bb8 <__aeabi_uldivmod>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4613      	mov	r3, r2
 800303e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003040:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <HAL_RCC_GetSysClockFreq+0x180>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	0c1b      	lsrs	r3, r3, #16
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	3301      	adds	r3, #1
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003050:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003054:	fbb2 f3f3 	udiv	r3, r2, r3
 8003058:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800305a:	e002      	b.n	8003062 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800305c:	4b05      	ldr	r3, [pc, #20]	; (8003074 <HAL_RCC_GetSysClockFreq+0x184>)
 800305e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003060:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003064:	4618      	mov	r0, r3
 8003066:	3740      	adds	r7, #64	; 0x40
 8003068:	46bd      	mov	sp, r7
 800306a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800306e:	bf00      	nop
 8003070:	40023800 	.word	0x40023800
 8003074:	00f42400 	.word	0x00f42400
 8003078:	017d7840 	.word	0x017d7840

0800307c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003080:	4b03      	ldr	r3, [pc, #12]	; (8003090 <HAL_RCC_GetHCLKFreq+0x14>)
 8003082:	681b      	ldr	r3, [r3, #0]
}
 8003084:	4618      	mov	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	20000000 	.word	0x20000000

08003094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003098:	f7ff fff0 	bl	800307c <HAL_RCC_GetHCLKFreq>
 800309c:	4602      	mov	r2, r0
 800309e:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	0a9b      	lsrs	r3, r3, #10
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	4903      	ldr	r1, [pc, #12]	; (80030b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030aa:	5ccb      	ldrb	r3, [r1, r3]
 80030ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40023800 	.word	0x40023800
 80030b8:	08007328 	.word	0x08007328

080030bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030c0:	f7ff ffdc 	bl	800307c <HAL_RCC_GetHCLKFreq>
 80030c4:	4602      	mov	r2, r0
 80030c6:	4b05      	ldr	r3, [pc, #20]	; (80030dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	0b5b      	lsrs	r3, r3, #13
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	4903      	ldr	r1, [pc, #12]	; (80030e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030d2:	5ccb      	ldrb	r3, [r1, r3]
 80030d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d8:	4618      	mov	r0, r3
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40023800 	.word	0x40023800
 80030e0:	08007328 	.word	0x08007328

080030e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e01d      	b.n	8003132 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d106      	bne.n	8003110 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7fe faa8 	bl	8001660 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3304      	adds	r3, #4
 8003120:	4619      	mov	r1, r3
 8003122:	4610      	mov	r0, r2
 8003124:	f000 f8d0 	bl	80032c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003152:	2302      	movs	r3, #2
 8003154:	e0b4      	b.n	80032c0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2202      	movs	r2, #2
 8003162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b0c      	cmp	r3, #12
 800316a:	f200 809f 	bhi.w	80032ac <HAL_TIM_PWM_ConfigChannel+0x170>
 800316e:	a201      	add	r2, pc, #4	; (adr r2, 8003174 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003174:	080031a9 	.word	0x080031a9
 8003178:	080032ad 	.word	0x080032ad
 800317c:	080032ad 	.word	0x080032ad
 8003180:	080032ad 	.word	0x080032ad
 8003184:	080031e9 	.word	0x080031e9
 8003188:	080032ad 	.word	0x080032ad
 800318c:	080032ad 	.word	0x080032ad
 8003190:	080032ad 	.word	0x080032ad
 8003194:	0800322b 	.word	0x0800322b
 8003198:	080032ad 	.word	0x080032ad
 800319c:	080032ad 	.word	0x080032ad
 80031a0:	080032ad 	.word	0x080032ad
 80031a4:	0800326b 	.word	0x0800326b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68b9      	ldr	r1, [r7, #8]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 f90a 	bl	80033c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699a      	ldr	r2, [r3, #24]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0208 	orr.w	r2, r2, #8
 80031c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	699a      	ldr	r2, [r3, #24]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0204 	bic.w	r2, r2, #4
 80031d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6999      	ldr	r1, [r3, #24]
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	691a      	ldr	r2, [r3, #16]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	619a      	str	r2, [r3, #24]
      break;
 80031e6:	e062      	b.n	80032ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68b9      	ldr	r1, [r7, #8]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 f950 	bl	8003494 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699a      	ldr	r2, [r3, #24]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699a      	ldr	r2, [r3, #24]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6999      	ldr	r1, [r3, #24]
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	021a      	lsls	r2, r3, #8
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	619a      	str	r2, [r3, #24]
      break;
 8003228:	e041      	b.n	80032ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68b9      	ldr	r1, [r7, #8]
 8003230:	4618      	mov	r0, r3
 8003232:	f000 f99b 	bl	800356c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	69da      	ldr	r2, [r3, #28]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f042 0208 	orr.w	r2, r2, #8
 8003244:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	69da      	ldr	r2, [r3, #28]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0204 	bic.w	r2, r2, #4
 8003254:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	69d9      	ldr	r1, [r3, #28]
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	691a      	ldr	r2, [r3, #16]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	61da      	str	r2, [r3, #28]
      break;
 8003268:	e021      	b.n	80032ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68b9      	ldr	r1, [r7, #8]
 8003270:	4618      	mov	r0, r3
 8003272:	f000 f9e5 	bl	8003640 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	69da      	ldr	r2, [r3, #28]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003284:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	69da      	ldr	r2, [r3, #28]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003294:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	69d9      	ldr	r1, [r3, #28]
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	021a      	lsls	r2, r3, #8
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	61da      	str	r2, [r3, #28]
      break;
 80032aa:	e000      	b.n	80032ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80032ac:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a34      	ldr	r2, [pc, #208]	; (80033ac <TIM_Base_SetConfig+0xe4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d00f      	beq.n	8003300 <TIM_Base_SetConfig+0x38>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e6:	d00b      	beq.n	8003300 <TIM_Base_SetConfig+0x38>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a31      	ldr	r2, [pc, #196]	; (80033b0 <TIM_Base_SetConfig+0xe8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d007      	beq.n	8003300 <TIM_Base_SetConfig+0x38>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a30      	ldr	r2, [pc, #192]	; (80033b4 <TIM_Base_SetConfig+0xec>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d003      	beq.n	8003300 <TIM_Base_SetConfig+0x38>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a2f      	ldr	r2, [pc, #188]	; (80033b8 <TIM_Base_SetConfig+0xf0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d108      	bne.n	8003312 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003306:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a25      	ldr	r2, [pc, #148]	; (80033ac <TIM_Base_SetConfig+0xe4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d01b      	beq.n	8003352 <TIM_Base_SetConfig+0x8a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003320:	d017      	beq.n	8003352 <TIM_Base_SetConfig+0x8a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a22      	ldr	r2, [pc, #136]	; (80033b0 <TIM_Base_SetConfig+0xe8>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d013      	beq.n	8003352 <TIM_Base_SetConfig+0x8a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a21      	ldr	r2, [pc, #132]	; (80033b4 <TIM_Base_SetConfig+0xec>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d00f      	beq.n	8003352 <TIM_Base_SetConfig+0x8a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a20      	ldr	r2, [pc, #128]	; (80033b8 <TIM_Base_SetConfig+0xf0>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d00b      	beq.n	8003352 <TIM_Base_SetConfig+0x8a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a1f      	ldr	r2, [pc, #124]	; (80033bc <TIM_Base_SetConfig+0xf4>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d007      	beq.n	8003352 <TIM_Base_SetConfig+0x8a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a1e      	ldr	r2, [pc, #120]	; (80033c0 <TIM_Base_SetConfig+0xf8>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d003      	beq.n	8003352 <TIM_Base_SetConfig+0x8a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a1d      	ldr	r2, [pc, #116]	; (80033c4 <TIM_Base_SetConfig+0xfc>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d108      	bne.n	8003364 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	4313      	orrs	r3, r2
 8003362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	4313      	orrs	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a08      	ldr	r2, [pc, #32]	; (80033ac <TIM_Base_SetConfig+0xe4>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d103      	bne.n	8003398 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	615a      	str	r2, [r3, #20]
}
 800339e:	bf00      	nop
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40010000 	.word	0x40010000
 80033b0:	40000400 	.word	0x40000400
 80033b4:	40000800 	.word	0x40000800
 80033b8:	40000c00 	.word	0x40000c00
 80033bc:	40014000 	.word	0x40014000
 80033c0:	40014400 	.word	0x40014400
 80033c4:	40014800 	.word	0x40014800

080033c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	f023 0201 	bic.w	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0303 	bic.w	r3, r3, #3
 80033fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	4313      	orrs	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f023 0302 	bic.w	r3, r3, #2
 8003410:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	4313      	orrs	r3, r2
 800341a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a1c      	ldr	r2, [pc, #112]	; (8003490 <TIM_OC1_SetConfig+0xc8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d10c      	bne.n	800343e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f023 0308 	bic.w	r3, r3, #8
 800342a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	4313      	orrs	r3, r2
 8003434:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f023 0304 	bic.w	r3, r3, #4
 800343c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a13      	ldr	r2, [pc, #76]	; (8003490 <TIM_OC1_SetConfig+0xc8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d111      	bne.n	800346a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800344c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003454:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	4313      	orrs	r3, r2
 800345e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	621a      	str	r2, [r3, #32]
}
 8003484:	bf00      	nop
 8003486:	371c      	adds	r7, #28
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	40010000 	.word	0x40010000

08003494 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	f023 0210 	bic.w	r2, r3, #16
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	021b      	lsls	r3, r3, #8
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f023 0320 	bic.w	r3, r3, #32
 80034de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a1e      	ldr	r2, [pc, #120]	; (8003568 <TIM_OC2_SetConfig+0xd4>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d10d      	bne.n	8003510 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800350e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a15      	ldr	r2, [pc, #84]	; (8003568 <TIM_OC2_SetConfig+0xd4>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d113      	bne.n	8003540 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800351e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003526:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	4313      	orrs	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	4313      	orrs	r3, r2
 800353e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	621a      	str	r2, [r3, #32]
}
 800355a:	bf00      	nop
 800355c:	371c      	adds	r7, #28
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40010000 	.word	0x40010000

0800356c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800356c:	b480      	push	{r7}
 800356e:	b087      	sub	sp, #28
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f023 0303 	bic.w	r3, r3, #3
 80035a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	021b      	lsls	r3, r3, #8
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	4313      	orrs	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a1d      	ldr	r2, [pc, #116]	; (800363c <TIM_OC3_SetConfig+0xd0>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d10d      	bne.n	80035e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	021b      	lsls	r3, r3, #8
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	4313      	orrs	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a14      	ldr	r2, [pc, #80]	; (800363c <TIM_OC3_SetConfig+0xd0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d113      	bne.n	8003616 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	4313      	orrs	r3, r2
 8003614:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	621a      	str	r2, [r3, #32]
}
 8003630:	bf00      	nop
 8003632:	371c      	adds	r7, #28
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	40010000 	.word	0x40010000

08003640 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800366e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	021b      	lsls	r3, r3, #8
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	4313      	orrs	r3, r2
 8003682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800368a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	031b      	lsls	r3, r3, #12
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a10      	ldr	r2, [pc, #64]	; (80036dc <TIM_OC4_SetConfig+0x9c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d109      	bne.n	80036b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	019b      	lsls	r3, r3, #6
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	621a      	str	r2, [r3, #32]
}
 80036ce:	bf00      	nop
 80036d0:	371c      	adds	r7, #28
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	40010000 	.word	0x40010000

080036e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e050      	b.n	800379a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4313      	orrs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a1c      	ldr	r2, [pc, #112]	; (80037a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d018      	beq.n	800376e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003744:	d013      	beq.n	800376e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a18      	ldr	r2, [pc, #96]	; (80037ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d00e      	beq.n	800376e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a16      	ldr	r2, [pc, #88]	; (80037b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d009      	beq.n	800376e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a15      	ldr	r2, [pc, #84]	; (80037b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d004      	beq.n	800376e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a13      	ldr	r2, [pc, #76]	; (80037b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d10c      	bne.n	8003788 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003774:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	4313      	orrs	r3, r2
 800377e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40010000 	.word	0x40010000
 80037ac:	40000400 	.word	0x40000400
 80037b0:	40000800 	.word	0x40000800
 80037b4:	40000c00 	.word	0x40000c00
 80037b8:	40014000 	.word	0x40014000

080037bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e03f      	b.n	800384e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d106      	bne.n	80037e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fd ffe0 	bl	80017a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2224      	movs	r2, #36	; 0x24
 80037ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 fb4b 	bl	8003e9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003814:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695a      	ldr	r2, [r3, #20]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003824:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003834:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b088      	sub	sp, #32
 800385a:	af02      	add	r7, sp, #8
 800385c:	60f8      	str	r0, [r7, #12]
 800385e:	60b9      	str	r1, [r7, #8]
 8003860:	603b      	str	r3, [r7, #0]
 8003862:	4613      	mov	r3, r2
 8003864:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b20      	cmp	r3, #32
 8003874:	f040 8083 	bne.w	800397e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <HAL_UART_Transmit+0x2e>
 800387e:	88fb      	ldrh	r3, [r7, #6]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e07b      	b.n	8003980 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800388e:	2b01      	cmp	r3, #1
 8003890:	d101      	bne.n	8003896 <HAL_UART_Transmit+0x40>
 8003892:	2302      	movs	r3, #2
 8003894:	e074      	b.n	8003980 <HAL_UART_Transmit+0x12a>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2221      	movs	r2, #33	; 0x21
 80038a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80038ac:	f7fe f8c2 	bl	8001a34 <HAL_GetTick>
 80038b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	88fa      	ldrh	r2, [r7, #6]
 80038b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	88fa      	ldrh	r2, [r7, #6]
 80038bc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80038c6:	e042      	b.n	800394e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038de:	d122      	bne.n	8003926 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	2200      	movs	r2, #0
 80038e8:	2180      	movs	r1, #128	; 0x80
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 f96a 	bl	8003bc4 <UART_WaitOnFlagUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e042      	b.n	8003980 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	461a      	mov	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800390c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d103      	bne.n	800391e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	3302      	adds	r3, #2
 800391a:	60bb      	str	r3, [r7, #8]
 800391c:	e017      	b.n	800394e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	3301      	adds	r3, #1
 8003922:	60bb      	str	r3, [r7, #8]
 8003924:	e013      	b.n	800394e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2200      	movs	r2, #0
 800392e:	2180      	movs	r1, #128	; 0x80
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 f947 	bl	8003bc4 <UART_WaitOnFlagUntilTimeout>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e01f      	b.n	8003980 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	60ba      	str	r2, [r7, #8]
 8003946:	781a      	ldrb	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003952:	b29b      	uxth	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1b7      	bne.n	80038c8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2200      	movs	r2, #0
 8003960:	2140      	movs	r1, #64	; 0x40
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f92e 	bl	8003bc4 <UART_WaitOnFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e006      	b.n	8003980 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800397a:	2300      	movs	r3, #0
 800397c:	e000      	b.n	8003980 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800397e:	2302      	movs	r3, #2
  }
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b088      	sub	sp, #32
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10d      	bne.n	80039da <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f003 0320 	and.w	r3, r3, #32
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d008      	beq.n	80039da <HAL_UART_IRQHandler+0x52>
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	f003 0320 	and.w	r3, r3, #32
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f9e0 	bl	8003d98 <UART_Receive_IT>
      return;
 80039d8:	e0d0      	b.n	8003b7c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 80b0 	beq.w	8003b42 <HAL_UART_IRQHandler+0x1ba>
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d105      	bne.n	80039f8 <HAL_UART_IRQHandler+0x70>
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 80a5 	beq.w	8003b42 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <HAL_UART_IRQHandler+0x90>
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a10:	f043 0201 	orr.w	r2, r3, #1
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <HAL_UART_IRQHandler+0xb0>
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a30:	f043 0202 	orr.w	r2, r3, #2
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00a      	beq.n	8003a58 <HAL_UART_IRQHandler+0xd0>
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a50:	f043 0204 	orr.w	r2, r3, #4
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00f      	beq.n	8003a82 <HAL_UART_IRQHandler+0xfa>
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	f003 0320 	and.w	r3, r3, #32
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d104      	bne.n	8003a76 <HAL_UART_IRQHandler+0xee>
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d005      	beq.n	8003a82 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7a:	f043 0208 	orr.w	r2, r3, #8
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d077      	beq.n	8003b7a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	f003 0320 	and.w	r3, r3, #32
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d007      	beq.n	8003aa4 <HAL_UART_IRQHandler+0x11c>
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	f003 0320 	and.w	r3, r3, #32
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f97a 	bl	8003d98 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aae:	2b40      	cmp	r3, #64	; 0x40
 8003ab0:	bf0c      	ite	eq
 8003ab2:	2301      	moveq	r3, #1
 8003ab4:	2300      	movne	r3, #0
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d102      	bne.n	8003acc <HAL_UART_IRQHandler+0x144>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d031      	beq.n	8003b30 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f8c3 	bl	8003c58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003adc:	2b40      	cmp	r3, #64	; 0x40
 8003ade:	d123      	bne.n	8003b28 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695a      	ldr	r2, [r3, #20]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aee:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d013      	beq.n	8003b20 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afc:	4a21      	ldr	r2, [pc, #132]	; (8003b84 <HAL_UART_IRQHandler+0x1fc>)
 8003afe:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7fe f961 	bl	8001dcc <HAL_DMA_Abort_IT>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d016      	beq.n	8003b3e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b1e:	e00e      	b.n	8003b3e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f845 	bl	8003bb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b26:	e00a      	b.n	8003b3e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f841 	bl	8003bb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b2e:	e006      	b.n	8003b3e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f83d 	bl	8003bb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003b3c:	e01d      	b.n	8003b7a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b3e:	bf00      	nop
    return;
 8003b40:	e01b      	b.n	8003b7a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d008      	beq.n	8003b5e <HAL_UART_IRQHandler+0x1d6>
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f8b0 	bl	8003cbc <UART_Transmit_IT>
    return;
 8003b5c:	e00e      	b.n	8003b7c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d009      	beq.n	8003b7c <HAL_UART_IRQHandler+0x1f4>
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d004      	beq.n	8003b7c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f8f8 	bl	8003d68 <UART_EndTransmit_IT>
    return;
 8003b78:	e000      	b.n	8003b7c <HAL_UART_IRQHandler+0x1f4>
    return;
 8003b7a:	bf00      	nop
  }
}
 8003b7c:	3720      	adds	r7, #32
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	08003c95 	.word	0x08003c95

08003b88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	603b      	str	r3, [r7, #0]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bd4:	e02c      	b.n	8003c30 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bdc:	d028      	beq.n	8003c30 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d007      	beq.n	8003bf4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003be4:	f7fd ff26 	bl	8001a34 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d21d      	bcs.n	8003c30 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c02:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695a      	ldr	r2, [r3, #20]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0201 	bic.w	r2, r2, #1
 8003c12:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e00f      	b.n	8003c50 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	bf0c      	ite	eq
 8003c40:	2301      	moveq	r3, #1
 8003c42:	2300      	movne	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	461a      	mov	r2, r3
 8003c48:	79fb      	ldrb	r3, [r7, #7]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d0c3      	beq.n	8003bd6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c6e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	695a      	ldr	r2, [r3, #20]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0201 	bic.w	r2, r2, #1
 8003c7e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f7ff ff7e 	bl	8003bb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cb4:	bf00      	nop
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b21      	cmp	r3, #33	; 0x21
 8003cce:	d144      	bne.n	8003d5a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd8:	d11a      	bne.n	8003d10 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cee:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d105      	bne.n	8003d04 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	1c9a      	adds	r2, r3, #2
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	621a      	str	r2, [r3, #32]
 8003d02:	e00e      	b.n	8003d22 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	621a      	str	r2, [r3, #32]
 8003d0e:	e008      	b.n	8003d22 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	1c59      	adds	r1, r3, #1
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6211      	str	r1, [r2, #32]
 8003d1a:	781a      	ldrb	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	4619      	mov	r1, r3
 8003d30:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10f      	bne.n	8003d56 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68da      	ldr	r2, [r3, #12]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d44:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68da      	ldr	r2, [r3, #12]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d54:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	e000      	b.n	8003d5c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003d5a:	2302      	movs	r3, #2
  }
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d7e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff fefd 	bl	8003b88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b22      	cmp	r3, #34	; 0x22
 8003daa:	d171      	bne.n	8003e90 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db4:	d123      	bne.n	8003dfe <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dba:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10e      	bne.n	8003de2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dda:	1c9a      	adds	r2, r3, #2
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	629a      	str	r2, [r3, #40]	; 0x28
 8003de0:	e029      	b.n	8003e36 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	629a      	str	r2, [r3, #40]	; 0x28
 8003dfc:	e01b      	b.n	8003e36 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10a      	bne.n	8003e1c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6858      	ldr	r0, [r3, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e10:	1c59      	adds	r1, r3, #1
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6291      	str	r1, [r2, #40]	; 0x28
 8003e16:	b2c2      	uxtb	r2, r0
 8003e18:	701a      	strb	r2, [r3, #0]
 8003e1a:	e00c      	b.n	8003e36 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e28:	1c58      	adds	r0, r3, #1
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	6288      	str	r0, [r1, #40]	; 0x28
 8003e2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	4619      	mov	r1, r3
 8003e44:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d120      	bne.n	8003e8c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0220 	bic.w	r2, r2, #32
 8003e58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695a      	ldr	r2, [r3, #20]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 0201 	bic.w	r2, r2, #1
 8003e78:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7ff fe8a 	bl	8003b9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	e002      	b.n	8003e92 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	e000      	b.n	8003e92 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003e90:	2302      	movs	r3, #2
  }
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ea0:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eaa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003eb6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003eba:	68d9      	ldr	r1, [r3, #12]
 8003ebc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	ea40 0301 	orr.w	r3, r0, r1
 8003ec6:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ec8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	431a      	orrs	r2, r3
 8003ede:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8003eea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ef6:	f021 010c 	bic.w	r1, r1, #12
 8003efa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8003f04:	430b      	orrs	r3, r1
 8003f06:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f08:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f14:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f18:	6999      	ldr	r1, [r3, #24]
 8003f1a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	ea40 0301 	orr.w	r3, r0, r1
 8003f24:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f26:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f30:	f040 824a 	bne.w	80043c8 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f34:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	4b96      	ldr	r3, [pc, #600]	; (8004194 <UART_SetConfig+0x2f8>)
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d006      	beq.n	8003f4e <UART_SetConfig+0xb2>
 8003f40:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	4b94      	ldr	r3, [pc, #592]	; (8004198 <UART_SetConfig+0x2fc>)
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	f040 8129 	bne.w	80041a0 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f4e:	f7ff f8b5 	bl	80030bc <HAL_RCC_GetPCLK2Freq>
 8003f52:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f56:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8003f60:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8003f64:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8003f68:	4622      	mov	r2, r4
 8003f6a:	462b      	mov	r3, r5
 8003f6c:	1891      	adds	r1, r2, r2
 8003f6e:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003f72:	415b      	adcs	r3, r3
 8003f74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003f78:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8003f7c:	4621      	mov	r1, r4
 8003f7e:	1851      	adds	r1, r2, r1
 8003f80:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8003f84:	4629      	mov	r1, r5
 8003f86:	414b      	adcs	r3, r1
 8003f88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8003f98:	4649      	mov	r1, r9
 8003f9a:	00cb      	lsls	r3, r1, #3
 8003f9c:	4641      	mov	r1, r8
 8003f9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fa2:	4641      	mov	r1, r8
 8003fa4:	00ca      	lsls	r2, r1, #3
 8003fa6:	4610      	mov	r0, r2
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4603      	mov	r3, r0
 8003fac:	4622      	mov	r2, r4
 8003fae:	189b      	adds	r3, r3, r2
 8003fb0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003fb4:	462b      	mov	r3, r5
 8003fb6:	460a      	mov	r2, r1
 8003fb8:	eb42 0303 	adc.w	r3, r2, r3
 8003fbc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8003fc0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003fcc:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8003fd0:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	18db      	adds	r3, r3, r3
 8003fd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fdc:	4613      	mov	r3, r2
 8003fde:	eb42 0303 	adc.w	r3, r2, r3
 8003fe2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003fe6:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8003fea:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8003fee:	f7fc fde3 	bl	8000bb8 <__aeabi_uldivmod>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4b69      	ldr	r3, [pc, #420]	; (800419c <UART_SetConfig+0x300>)
 8003ff8:	fba3 2302 	umull	r2, r3, r3, r2
 8003ffc:	095b      	lsrs	r3, r3, #5
 8003ffe:	011c      	lsls	r4, r3, #4
 8004000:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004004:	2200      	movs	r2, #0
 8004006:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800400a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800400e:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8004012:	4642      	mov	r2, r8
 8004014:	464b      	mov	r3, r9
 8004016:	1891      	adds	r1, r2, r2
 8004018:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800401c:	415b      	adcs	r3, r3
 800401e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004022:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8004026:	4641      	mov	r1, r8
 8004028:	1851      	adds	r1, r2, r1
 800402a:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800402e:	4649      	mov	r1, r9
 8004030:	414b      	adcs	r3, r1
 8004032:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004036:	f04f 0200 	mov.w	r2, #0
 800403a:	f04f 0300 	mov.w	r3, #0
 800403e:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8004042:	4659      	mov	r1, fp
 8004044:	00cb      	lsls	r3, r1, #3
 8004046:	4651      	mov	r1, sl
 8004048:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800404c:	4651      	mov	r1, sl
 800404e:	00ca      	lsls	r2, r1, #3
 8004050:	4610      	mov	r0, r2
 8004052:	4619      	mov	r1, r3
 8004054:	4603      	mov	r3, r0
 8004056:	4642      	mov	r2, r8
 8004058:	189b      	adds	r3, r3, r2
 800405a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800405e:	464b      	mov	r3, r9
 8004060:	460a      	mov	r2, r1
 8004062:	eb42 0303 	adc.w	r3, r2, r3
 8004066:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800406a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004076:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 800407a:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 800407e:	460b      	mov	r3, r1
 8004080:	18db      	adds	r3, r3, r3
 8004082:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004086:	4613      	mov	r3, r2
 8004088:	eb42 0303 	adc.w	r3, r2, r3
 800408c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004090:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8004094:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8004098:	f7fc fd8e 	bl	8000bb8 <__aeabi_uldivmod>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	4611      	mov	r1, r2
 80040a2:	4b3e      	ldr	r3, [pc, #248]	; (800419c <UART_SetConfig+0x300>)
 80040a4:	fba3 2301 	umull	r2, r3, r3, r1
 80040a8:	095b      	lsrs	r3, r3, #5
 80040aa:	2264      	movs	r2, #100	; 0x64
 80040ac:	fb02 f303 	mul.w	r3, r2, r3
 80040b0:	1acb      	subs	r3, r1, r3
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80040b8:	4b38      	ldr	r3, [pc, #224]	; (800419c <UART_SetConfig+0x300>)
 80040ba:	fba3 2302 	umull	r2, r3, r3, r2
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040c6:	441c      	add	r4, r3
 80040c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80040cc:	2200      	movs	r2, #0
 80040ce:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80040d2:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80040d6:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 80040da:	4642      	mov	r2, r8
 80040dc:	464b      	mov	r3, r9
 80040de:	1891      	adds	r1, r2, r2
 80040e0:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80040e4:	415b      	adcs	r3, r3
 80040e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80040ea:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80040ee:	4641      	mov	r1, r8
 80040f0:	1851      	adds	r1, r2, r1
 80040f2:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80040f6:	4649      	mov	r1, r9
 80040f8:	414b      	adcs	r3, r1
 80040fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	f04f 0300 	mov.w	r3, #0
 8004106:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 800410a:	4659      	mov	r1, fp
 800410c:	00cb      	lsls	r3, r1, #3
 800410e:	4651      	mov	r1, sl
 8004110:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004114:	4651      	mov	r1, sl
 8004116:	00ca      	lsls	r2, r1, #3
 8004118:	4610      	mov	r0, r2
 800411a:	4619      	mov	r1, r3
 800411c:	4603      	mov	r3, r0
 800411e:	4642      	mov	r2, r8
 8004120:	189b      	adds	r3, r3, r2
 8004122:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8004126:	464b      	mov	r3, r9
 8004128:	460a      	mov	r2, r1
 800412a:	eb42 0303 	adc.w	r3, r2, r3
 800412e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004132:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800413e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8004142:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8004146:	460b      	mov	r3, r1
 8004148:	18db      	adds	r3, r3, r3
 800414a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800414e:	4613      	mov	r3, r2
 8004150:	eb42 0303 	adc.w	r3, r2, r3
 8004154:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004158:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800415c:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8004160:	f7fc fd2a 	bl	8000bb8 <__aeabi_uldivmod>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4b0c      	ldr	r3, [pc, #48]	; (800419c <UART_SetConfig+0x300>)
 800416a:	fba3 1302 	umull	r1, r3, r3, r2
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	2164      	movs	r1, #100	; 0x64
 8004172:	fb01 f303 	mul.w	r3, r1, r3
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	3332      	adds	r3, #50	; 0x32
 800417c:	4a07      	ldr	r2, [pc, #28]	; (800419c <UART_SetConfig+0x300>)
 800417e:	fba2 2303 	umull	r2, r3, r2, r3
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	f003 0207 	and.w	r2, r3, #7
 8004188:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4422      	add	r2, r4
 8004190:	609a      	str	r2, [r3, #8]
 8004192:	e349      	b.n	8004828 <UART_SetConfig+0x98c>
 8004194:	40011000 	.word	0x40011000
 8004198:	40011400 	.word	0x40011400
 800419c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041a0:	f7fe ff78 	bl	8003094 <HAL_RCC_GetPCLK1Freq>
 80041a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80041ac:	2200      	movs	r2, #0
 80041ae:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80041b2:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 80041b6:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 80041ba:	4622      	mov	r2, r4
 80041bc:	462b      	mov	r3, r5
 80041be:	1891      	adds	r1, r2, r2
 80041c0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80041c4:	415b      	adcs	r3, r3
 80041c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80041ca:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80041ce:	4621      	mov	r1, r4
 80041d0:	eb12 0a01 	adds.w	sl, r2, r1
 80041d4:	4629      	mov	r1, r5
 80041d6:	eb43 0b01 	adc.w	fp, r3, r1
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	f04f 0300 	mov.w	r3, #0
 80041e2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041e6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041ee:	4692      	mov	sl, r2
 80041f0:	469b      	mov	fp, r3
 80041f2:	4623      	mov	r3, r4
 80041f4:	eb1a 0303 	adds.w	r3, sl, r3
 80041f8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80041fc:	462b      	mov	r3, r5
 80041fe:	eb4b 0303 	adc.w	r3, fp, r3
 8004202:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004206:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8004212:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004216:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 800421a:	460b      	mov	r3, r1
 800421c:	18db      	adds	r3, r3, r3
 800421e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004222:	4613      	mov	r3, r2
 8004224:	eb42 0303 	adc.w	r3, r2, r3
 8004228:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800422c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004230:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8004234:	f7fc fcc0 	bl	8000bb8 <__aeabi_uldivmod>
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	4b61      	ldr	r3, [pc, #388]	; (80043c4 <UART_SetConfig+0x528>)
 800423e:	fba3 2302 	umull	r2, r3, r3, r2
 8004242:	095b      	lsrs	r3, r3, #5
 8004244:	011c      	lsls	r4, r3, #4
 8004246:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800424a:	2200      	movs	r2, #0
 800424c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8004250:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8004254:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8004258:	4642      	mov	r2, r8
 800425a:	464b      	mov	r3, r9
 800425c:	1891      	adds	r1, r2, r2
 800425e:	67b9      	str	r1, [r7, #120]	; 0x78
 8004260:	415b      	adcs	r3, r3
 8004262:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004264:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004268:	4641      	mov	r1, r8
 800426a:	1851      	adds	r1, r2, r1
 800426c:	6739      	str	r1, [r7, #112]	; 0x70
 800426e:	4649      	mov	r1, r9
 8004270:	414b      	adcs	r3, r1
 8004272:	677b      	str	r3, [r7, #116]	; 0x74
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	f04f 0300 	mov.w	r3, #0
 800427c:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8004280:	4659      	mov	r1, fp
 8004282:	00cb      	lsls	r3, r1, #3
 8004284:	4651      	mov	r1, sl
 8004286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800428a:	4651      	mov	r1, sl
 800428c:	00ca      	lsls	r2, r1, #3
 800428e:	4610      	mov	r0, r2
 8004290:	4619      	mov	r1, r3
 8004292:	4603      	mov	r3, r0
 8004294:	4642      	mov	r2, r8
 8004296:	189b      	adds	r3, r3, r2
 8004298:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800429c:	464b      	mov	r3, r9
 800429e:	460a      	mov	r2, r1
 80042a0:	eb42 0303 	adc.w	r3, r2, r3
 80042a4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80042a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80042b4:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80042b8:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 80042bc:	460b      	mov	r3, r1
 80042be:	18db      	adds	r3, r3, r3
 80042c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80042c2:	4613      	mov	r3, r2
 80042c4:	eb42 0303 	adc.w	r3, r2, r3
 80042c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042ca:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80042ce:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80042d2:	f7fc fc71 	bl	8000bb8 <__aeabi_uldivmod>
 80042d6:	4602      	mov	r2, r0
 80042d8:	460b      	mov	r3, r1
 80042da:	4611      	mov	r1, r2
 80042dc:	4b39      	ldr	r3, [pc, #228]	; (80043c4 <UART_SetConfig+0x528>)
 80042de:	fba3 2301 	umull	r2, r3, r3, r1
 80042e2:	095b      	lsrs	r3, r3, #5
 80042e4:	2264      	movs	r2, #100	; 0x64
 80042e6:	fb02 f303 	mul.w	r3, r2, r3
 80042ea:	1acb      	subs	r3, r1, r3
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80042f2:	4b34      	ldr	r3, [pc, #208]	; (80043c4 <UART_SetConfig+0x528>)
 80042f4:	fba3 2302 	umull	r2, r3, r3, r2
 80042f8:	095b      	lsrs	r3, r3, #5
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004300:	441c      	add	r4, r3
 8004302:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004306:	2200      	movs	r2, #0
 8004308:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 800430c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004310:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8004314:	4642      	mov	r2, r8
 8004316:	464b      	mov	r3, r9
 8004318:	1891      	adds	r1, r2, r2
 800431a:	6639      	str	r1, [r7, #96]	; 0x60
 800431c:	415b      	adcs	r3, r3
 800431e:	667b      	str	r3, [r7, #100]	; 0x64
 8004320:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004324:	4641      	mov	r1, r8
 8004326:	1851      	adds	r1, r2, r1
 8004328:	65b9      	str	r1, [r7, #88]	; 0x58
 800432a:	4649      	mov	r1, r9
 800432c:	414b      	adcs	r3, r1
 800432e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 800433c:	4659      	mov	r1, fp
 800433e:	00cb      	lsls	r3, r1, #3
 8004340:	4651      	mov	r1, sl
 8004342:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004346:	4651      	mov	r1, sl
 8004348:	00ca      	lsls	r2, r1, #3
 800434a:	4610      	mov	r0, r2
 800434c:	4619      	mov	r1, r3
 800434e:	4603      	mov	r3, r0
 8004350:	4642      	mov	r2, r8
 8004352:	189b      	adds	r3, r3, r2
 8004354:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8004358:	464b      	mov	r3, r9
 800435a:	460a      	mov	r2, r1
 800435c:	eb42 0303 	adc.w	r3, r2, r3
 8004360:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004364:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8004370:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8004374:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8004378:	460b      	mov	r3, r1
 800437a:	18db      	adds	r3, r3, r3
 800437c:	653b      	str	r3, [r7, #80]	; 0x50
 800437e:	4613      	mov	r3, r2
 8004380:	eb42 0303 	adc.w	r3, r2, r3
 8004384:	657b      	str	r3, [r7, #84]	; 0x54
 8004386:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800438a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800438e:	f7fc fc13 	bl	8000bb8 <__aeabi_uldivmod>
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <UART_SetConfig+0x528>)
 8004398:	fba3 1302 	umull	r1, r3, r3, r2
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	2164      	movs	r1, #100	; 0x64
 80043a0:	fb01 f303 	mul.w	r3, r1, r3
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	3332      	adds	r3, #50	; 0x32
 80043aa:	4a06      	ldr	r2, [pc, #24]	; (80043c4 <UART_SetConfig+0x528>)
 80043ac:	fba2 2303 	umull	r2, r3, r2, r3
 80043b0:	095b      	lsrs	r3, r3, #5
 80043b2:	f003 0207 	and.w	r2, r3, #7
 80043b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4422      	add	r2, r4
 80043be:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80043c0:	e232      	b.n	8004828 <UART_SetConfig+0x98c>
 80043c2:	bf00      	nop
 80043c4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043c8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	4b8d      	ldr	r3, [pc, #564]	; (8004604 <UART_SetConfig+0x768>)
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d006      	beq.n	80043e2 <UART_SetConfig+0x546>
 80043d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	4b8b      	ldr	r3, [pc, #556]	; (8004608 <UART_SetConfig+0x76c>)
 80043dc:	429a      	cmp	r2, r3
 80043de:	f040 8117 	bne.w	8004610 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 80043e2:	f7fe fe6b 	bl	80030bc <HAL_RCC_GetPCLK2Freq>
 80043e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80043ee:	2200      	movs	r2, #0
 80043f0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80043f4:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80043f8:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80043fc:	4622      	mov	r2, r4
 80043fe:	462b      	mov	r3, r5
 8004400:	1891      	adds	r1, r2, r2
 8004402:	64b9      	str	r1, [r7, #72]	; 0x48
 8004404:	415b      	adcs	r3, r3
 8004406:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004408:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800440c:	4621      	mov	r1, r4
 800440e:	eb12 0801 	adds.w	r8, r2, r1
 8004412:	4629      	mov	r1, r5
 8004414:	eb43 0901 	adc.w	r9, r3, r1
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	f04f 0300 	mov.w	r3, #0
 8004420:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004424:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004428:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800442c:	4690      	mov	r8, r2
 800442e:	4699      	mov	r9, r3
 8004430:	4623      	mov	r3, r4
 8004432:	eb18 0303 	adds.w	r3, r8, r3
 8004436:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800443a:	462b      	mov	r3, r5
 800443c:	eb49 0303 	adc.w	r3, r9, r3
 8004440:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8004444:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004450:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8004454:	f04f 0200 	mov.w	r2, #0
 8004458:	f04f 0300 	mov.w	r3, #0
 800445c:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8004460:	4629      	mov	r1, r5
 8004462:	008b      	lsls	r3, r1, #2
 8004464:	4621      	mov	r1, r4
 8004466:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800446a:	4621      	mov	r1, r4
 800446c:	008a      	lsls	r2, r1, #2
 800446e:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8004472:	f7fc fba1 	bl	8000bb8 <__aeabi_uldivmod>
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	4b64      	ldr	r3, [pc, #400]	; (800460c <UART_SetConfig+0x770>)
 800447c:	fba3 2302 	umull	r2, r3, r3, r2
 8004480:	095b      	lsrs	r3, r3, #5
 8004482:	011c      	lsls	r4, r3, #4
 8004484:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004488:	2200      	movs	r2, #0
 800448a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800448e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004492:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8004496:	4642      	mov	r2, r8
 8004498:	464b      	mov	r3, r9
 800449a:	1891      	adds	r1, r2, r2
 800449c:	6439      	str	r1, [r7, #64]	; 0x40
 800449e:	415b      	adcs	r3, r3
 80044a0:	647b      	str	r3, [r7, #68]	; 0x44
 80044a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044a6:	4641      	mov	r1, r8
 80044a8:	1851      	adds	r1, r2, r1
 80044aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80044ac:	4649      	mov	r1, r9
 80044ae:	414b      	adcs	r3, r1
 80044b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 80044be:	4659      	mov	r1, fp
 80044c0:	00cb      	lsls	r3, r1, #3
 80044c2:	4651      	mov	r1, sl
 80044c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044c8:	4651      	mov	r1, sl
 80044ca:	00ca      	lsls	r2, r1, #3
 80044cc:	4610      	mov	r0, r2
 80044ce:	4619      	mov	r1, r3
 80044d0:	4603      	mov	r3, r0
 80044d2:	4642      	mov	r2, r8
 80044d4:	189b      	adds	r3, r3, r2
 80044d6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80044da:	464b      	mov	r3, r9
 80044dc:	460a      	mov	r2, r1
 80044de:	eb42 0303 	adc.w	r3, r2, r3
 80044e2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80044e6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80044f2:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80044f6:	f04f 0200 	mov.w	r2, #0
 80044fa:	f04f 0300 	mov.w	r3, #0
 80044fe:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8004502:	4649      	mov	r1, r9
 8004504:	008b      	lsls	r3, r1, #2
 8004506:	4641      	mov	r1, r8
 8004508:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800450c:	4641      	mov	r1, r8
 800450e:	008a      	lsls	r2, r1, #2
 8004510:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8004514:	f7fc fb50 	bl	8000bb8 <__aeabi_uldivmod>
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4b3b      	ldr	r3, [pc, #236]	; (800460c <UART_SetConfig+0x770>)
 800451e:	fba3 1302 	umull	r1, r3, r3, r2
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	2164      	movs	r1, #100	; 0x64
 8004526:	fb01 f303 	mul.w	r3, r1, r3
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	3332      	adds	r3, #50	; 0x32
 8004530:	4a36      	ldr	r2, [pc, #216]	; (800460c <UART_SetConfig+0x770>)
 8004532:	fba2 2303 	umull	r2, r3, r2, r3
 8004536:	095b      	lsrs	r3, r3, #5
 8004538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800453c:	441c      	add	r4, r3
 800453e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004542:	2200      	movs	r2, #0
 8004544:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004548:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800454c:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8004550:	4642      	mov	r2, r8
 8004552:	464b      	mov	r3, r9
 8004554:	1891      	adds	r1, r2, r2
 8004556:	6339      	str	r1, [r7, #48]	; 0x30
 8004558:	415b      	adcs	r3, r3
 800455a:	637b      	str	r3, [r7, #52]	; 0x34
 800455c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004560:	4641      	mov	r1, r8
 8004562:	1851      	adds	r1, r2, r1
 8004564:	62b9      	str	r1, [r7, #40]	; 0x28
 8004566:	4649      	mov	r1, r9
 8004568:	414b      	adcs	r3, r1
 800456a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8004578:	4659      	mov	r1, fp
 800457a:	00cb      	lsls	r3, r1, #3
 800457c:	4651      	mov	r1, sl
 800457e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004582:	4651      	mov	r1, sl
 8004584:	00ca      	lsls	r2, r1, #3
 8004586:	4610      	mov	r0, r2
 8004588:	4619      	mov	r1, r3
 800458a:	4603      	mov	r3, r0
 800458c:	4642      	mov	r2, r8
 800458e:	189b      	adds	r3, r3, r2
 8004590:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004594:	464b      	mov	r3, r9
 8004596:	460a      	mov	r2, r1
 8004598:	eb42 0303 	adc.w	r3, r2, r3
 800459c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80045a0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80045ac:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80045b0:	f04f 0200 	mov.w	r2, #0
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 80045bc:	4649      	mov	r1, r9
 80045be:	008b      	lsls	r3, r1, #2
 80045c0:	4641      	mov	r1, r8
 80045c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045c6:	4641      	mov	r1, r8
 80045c8:	008a      	lsls	r2, r1, #2
 80045ca:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80045ce:	f7fc faf3 	bl	8000bb8 <__aeabi_uldivmod>
 80045d2:	4602      	mov	r2, r0
 80045d4:	460b      	mov	r3, r1
 80045d6:	4b0d      	ldr	r3, [pc, #52]	; (800460c <UART_SetConfig+0x770>)
 80045d8:	fba3 1302 	umull	r1, r3, r3, r2
 80045dc:	095b      	lsrs	r3, r3, #5
 80045de:	2164      	movs	r1, #100	; 0x64
 80045e0:	fb01 f303 	mul.w	r3, r1, r3
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	011b      	lsls	r3, r3, #4
 80045e8:	3332      	adds	r3, #50	; 0x32
 80045ea:	4a08      	ldr	r2, [pc, #32]	; (800460c <UART_SetConfig+0x770>)
 80045ec:	fba2 2303 	umull	r2, r3, r2, r3
 80045f0:	095b      	lsrs	r3, r3, #5
 80045f2:	f003 020f 	and.w	r2, r3, #15
 80045f6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4422      	add	r2, r4
 80045fe:	609a      	str	r2, [r3, #8]
 8004600:	e112      	b.n	8004828 <UART_SetConfig+0x98c>
 8004602:	bf00      	nop
 8004604:	40011000 	.word	0x40011000
 8004608:	40011400 	.word	0x40011400
 800460c:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8004610:	f7fe fd40 	bl	8003094 <HAL_RCC_GetPCLK1Freq>
 8004614:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004618:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800461c:	2200      	movs	r2, #0
 800461e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004622:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004626:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 800462a:	4642      	mov	r2, r8
 800462c:	464b      	mov	r3, r9
 800462e:	1891      	adds	r1, r2, r2
 8004630:	6239      	str	r1, [r7, #32]
 8004632:	415b      	adcs	r3, r3
 8004634:	627b      	str	r3, [r7, #36]	; 0x24
 8004636:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800463a:	4641      	mov	r1, r8
 800463c:	1854      	adds	r4, r2, r1
 800463e:	4649      	mov	r1, r9
 8004640:	eb43 0501 	adc.w	r5, r3, r1
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	00eb      	lsls	r3, r5, #3
 800464e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004652:	00e2      	lsls	r2, r4, #3
 8004654:	4614      	mov	r4, r2
 8004656:	461d      	mov	r5, r3
 8004658:	4643      	mov	r3, r8
 800465a:	18e3      	adds	r3, r4, r3
 800465c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004660:	464b      	mov	r3, r9
 8004662:	eb45 0303 	adc.w	r3, r5, r3
 8004666:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800466a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004676:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800467a:	f04f 0200 	mov.w	r2, #0
 800467e:	f04f 0300 	mov.w	r3, #0
 8004682:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8004686:	4629      	mov	r1, r5
 8004688:	008b      	lsls	r3, r1, #2
 800468a:	4621      	mov	r1, r4
 800468c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004690:	4621      	mov	r1, r4
 8004692:	008a      	lsls	r2, r1, #2
 8004694:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8004698:	f7fc fa8e 	bl	8000bb8 <__aeabi_uldivmod>
 800469c:	4602      	mov	r2, r0
 800469e:	460b      	mov	r3, r1
 80046a0:	4b64      	ldr	r3, [pc, #400]	; (8004834 <UART_SetConfig+0x998>)
 80046a2:	fba3 2302 	umull	r2, r3, r3, r2
 80046a6:	095b      	lsrs	r3, r3, #5
 80046a8:	011c      	lsls	r4, r3, #4
 80046aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80046ae:	2200      	movs	r2, #0
 80046b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80046b4:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80046b8:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 80046bc:	4642      	mov	r2, r8
 80046be:	464b      	mov	r3, r9
 80046c0:	1891      	adds	r1, r2, r2
 80046c2:	61b9      	str	r1, [r7, #24]
 80046c4:	415b      	adcs	r3, r3
 80046c6:	61fb      	str	r3, [r7, #28]
 80046c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046cc:	4641      	mov	r1, r8
 80046ce:	1851      	adds	r1, r2, r1
 80046d0:	6139      	str	r1, [r7, #16]
 80046d2:	4649      	mov	r1, r9
 80046d4:	414b      	adcs	r3, r1
 80046d6:	617b      	str	r3, [r7, #20]
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f04f 0300 	mov.w	r3, #0
 80046e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046e4:	4659      	mov	r1, fp
 80046e6:	00cb      	lsls	r3, r1, #3
 80046e8:	4651      	mov	r1, sl
 80046ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046ee:	4651      	mov	r1, sl
 80046f0:	00ca      	lsls	r2, r1, #3
 80046f2:	4610      	mov	r0, r2
 80046f4:	4619      	mov	r1, r3
 80046f6:	4603      	mov	r3, r0
 80046f8:	4642      	mov	r2, r8
 80046fa:	189b      	adds	r3, r3, r2
 80046fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004700:	464b      	mov	r3, r9
 8004702:	460a      	mov	r2, r1
 8004704:	eb42 0303 	adc.w	r3, r2, r3
 8004708:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800470c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004718:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800471c:	f04f 0200 	mov.w	r2, #0
 8004720:	f04f 0300 	mov.w	r3, #0
 8004724:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8004728:	4649      	mov	r1, r9
 800472a:	008b      	lsls	r3, r1, #2
 800472c:	4641      	mov	r1, r8
 800472e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004732:	4641      	mov	r1, r8
 8004734:	008a      	lsls	r2, r1, #2
 8004736:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800473a:	f7fc fa3d 	bl	8000bb8 <__aeabi_uldivmod>
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	4b3c      	ldr	r3, [pc, #240]	; (8004834 <UART_SetConfig+0x998>)
 8004744:	fba3 1302 	umull	r1, r3, r3, r2
 8004748:	095b      	lsrs	r3, r3, #5
 800474a:	2164      	movs	r1, #100	; 0x64
 800474c:	fb01 f303 	mul.w	r3, r1, r3
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	011b      	lsls	r3, r3, #4
 8004754:	3332      	adds	r3, #50	; 0x32
 8004756:	4a37      	ldr	r2, [pc, #220]	; (8004834 <UART_SetConfig+0x998>)
 8004758:	fba2 2303 	umull	r2, r3, r2, r3
 800475c:	095b      	lsrs	r3, r3, #5
 800475e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004762:	441c      	add	r4, r3
 8004764:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004768:	2200      	movs	r2, #0
 800476a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800476e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004772:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004776:	4642      	mov	r2, r8
 8004778:	464b      	mov	r3, r9
 800477a:	1891      	adds	r1, r2, r2
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	415b      	adcs	r3, r3
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004786:	4641      	mov	r1, r8
 8004788:	1851      	adds	r1, r2, r1
 800478a:	6039      	str	r1, [r7, #0]
 800478c:	4649      	mov	r1, r9
 800478e:	414b      	adcs	r3, r1
 8004790:	607b      	str	r3, [r7, #4]
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	f04f 0300 	mov.w	r3, #0
 800479a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800479e:	4659      	mov	r1, fp
 80047a0:	00cb      	lsls	r3, r1, #3
 80047a2:	4651      	mov	r1, sl
 80047a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047a8:	4651      	mov	r1, sl
 80047aa:	00ca      	lsls	r2, r1, #3
 80047ac:	4610      	mov	r0, r2
 80047ae:	4619      	mov	r1, r3
 80047b0:	4603      	mov	r3, r0
 80047b2:	4642      	mov	r2, r8
 80047b4:	189b      	adds	r3, r3, r2
 80047b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047ba:	464b      	mov	r3, r9
 80047bc:	460a      	mov	r2, r1
 80047be:	eb42 0303 	adc.w	r3, r2, r3
 80047c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047c6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80047d6:	f04f 0200 	mov.w	r2, #0
 80047da:	f04f 0300 	mov.w	r3, #0
 80047de:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80047e2:	4649      	mov	r1, r9
 80047e4:	008b      	lsls	r3, r1, #2
 80047e6:	4641      	mov	r1, r8
 80047e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047ec:	4641      	mov	r1, r8
 80047ee:	008a      	lsls	r2, r1, #2
 80047f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80047f4:	f7fc f9e0 	bl	8000bb8 <__aeabi_uldivmod>
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	4b0d      	ldr	r3, [pc, #52]	; (8004834 <UART_SetConfig+0x998>)
 80047fe:	fba3 1302 	umull	r1, r3, r3, r2
 8004802:	095b      	lsrs	r3, r3, #5
 8004804:	2164      	movs	r1, #100	; 0x64
 8004806:	fb01 f303 	mul.w	r3, r1, r3
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	3332      	adds	r3, #50	; 0x32
 8004810:	4a08      	ldr	r2, [pc, #32]	; (8004834 <UART_SetConfig+0x998>)
 8004812:	fba2 2303 	umull	r2, r3, r2, r3
 8004816:	095b      	lsrs	r3, r3, #5
 8004818:	f003 020f 	and.w	r2, r3, #15
 800481c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4422      	add	r2, r4
 8004824:	609a      	str	r2, [r3, #8]
}
 8004826:	e7ff      	b.n	8004828 <UART_SetConfig+0x98c>
 8004828:	bf00      	nop
 800482a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800482e:	46bd      	mov	sp, r7
 8004830:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004834:	51eb851f 	.word	0x51eb851f

08004838 <gyro_data_ready_cb>:
/* Every time new gyro data is available, this function is called in an
 * ISR context. In this example, it sets a flag protecting the FIFO read
 * function.
 */
void gyro_data_ready_cb(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
    hal.new_gyro = 1;
 800483c:	4b03      	ldr	r3, [pc, #12]	; (800484c <gyro_data_ready_cb+0x14>)
 800483e:	2201      	movs	r2, #1
 8004840:	711a      	strb	r2, [r3, #4]
}
 8004842:	bf00      	nop
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	200003f4 	.word	0x200003f4

08004850 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	4603      	mov	r3, r0
 8004858:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_12)
 800485a:	88fb      	ldrh	r3, [r7, #6]
 800485c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004860:	d101      	bne.n	8004866 <HAL_GPIO_EXTI_Callback+0x16>
		{
			gyro_data_ready_cb();
 8004862:	f7ff ffe9 	bl	8004838 <gyro_data_ready_cb>
		}
}
 8004866:	bf00      	nop
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
	...

08004870 <__errno>:
 8004870:	4b01      	ldr	r3, [pc, #4]	; (8004878 <__errno+0x8>)
 8004872:	6818      	ldr	r0, [r3, #0]
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	2000000c 	.word	0x2000000c

0800487c <__libc_init_array>:
 800487c:	b570      	push	{r4, r5, r6, lr}
 800487e:	4d0d      	ldr	r5, [pc, #52]	; (80048b4 <__libc_init_array+0x38>)
 8004880:	4c0d      	ldr	r4, [pc, #52]	; (80048b8 <__libc_init_array+0x3c>)
 8004882:	1b64      	subs	r4, r4, r5
 8004884:	10a4      	asrs	r4, r4, #2
 8004886:	2600      	movs	r6, #0
 8004888:	42a6      	cmp	r6, r4
 800488a:	d109      	bne.n	80048a0 <__libc_init_array+0x24>
 800488c:	4d0b      	ldr	r5, [pc, #44]	; (80048bc <__libc_init_array+0x40>)
 800488e:	4c0c      	ldr	r4, [pc, #48]	; (80048c0 <__libc_init_array+0x44>)
 8004890:	f002 fd36 	bl	8007300 <_init>
 8004894:	1b64      	subs	r4, r4, r5
 8004896:	10a4      	asrs	r4, r4, #2
 8004898:	2600      	movs	r6, #0
 800489a:	42a6      	cmp	r6, r4
 800489c:	d105      	bne.n	80048aa <__libc_init_array+0x2e>
 800489e:	bd70      	pop	{r4, r5, r6, pc}
 80048a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80048a4:	4798      	blx	r3
 80048a6:	3601      	adds	r6, #1
 80048a8:	e7ee      	b.n	8004888 <__libc_init_array+0xc>
 80048aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ae:	4798      	blx	r3
 80048b0:	3601      	adds	r6, #1
 80048b2:	e7f2      	b.n	800489a <__libc_init_array+0x1e>
 80048b4:	0800771c 	.word	0x0800771c
 80048b8:	0800771c 	.word	0x0800771c
 80048bc:	0800771c 	.word	0x0800771c
 80048c0:	08007720 	.word	0x08007720

080048c4 <memcpy>:
 80048c4:	440a      	add	r2, r1
 80048c6:	4291      	cmp	r1, r2
 80048c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80048cc:	d100      	bne.n	80048d0 <memcpy+0xc>
 80048ce:	4770      	bx	lr
 80048d0:	b510      	push	{r4, lr}
 80048d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048da:	4291      	cmp	r1, r2
 80048dc:	d1f9      	bne.n	80048d2 <memcpy+0xe>
 80048de:	bd10      	pop	{r4, pc}

080048e0 <memset>:
 80048e0:	4402      	add	r2, r0
 80048e2:	4603      	mov	r3, r0
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d100      	bne.n	80048ea <memset+0xa>
 80048e8:	4770      	bx	lr
 80048ea:	f803 1b01 	strb.w	r1, [r3], #1
 80048ee:	e7f9      	b.n	80048e4 <memset+0x4>

080048f0 <__cvt>:
 80048f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048f4:	ec55 4b10 	vmov	r4, r5, d0
 80048f8:	2d00      	cmp	r5, #0
 80048fa:	460e      	mov	r6, r1
 80048fc:	4619      	mov	r1, r3
 80048fe:	462b      	mov	r3, r5
 8004900:	bfbb      	ittet	lt
 8004902:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004906:	461d      	movlt	r5, r3
 8004908:	2300      	movge	r3, #0
 800490a:	232d      	movlt	r3, #45	; 0x2d
 800490c:	700b      	strb	r3, [r1, #0]
 800490e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004910:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004914:	4691      	mov	r9, r2
 8004916:	f023 0820 	bic.w	r8, r3, #32
 800491a:	bfbc      	itt	lt
 800491c:	4622      	movlt	r2, r4
 800491e:	4614      	movlt	r4, r2
 8004920:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004924:	d005      	beq.n	8004932 <__cvt+0x42>
 8004926:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800492a:	d100      	bne.n	800492e <__cvt+0x3e>
 800492c:	3601      	adds	r6, #1
 800492e:	2102      	movs	r1, #2
 8004930:	e000      	b.n	8004934 <__cvt+0x44>
 8004932:	2103      	movs	r1, #3
 8004934:	ab03      	add	r3, sp, #12
 8004936:	9301      	str	r3, [sp, #4]
 8004938:	ab02      	add	r3, sp, #8
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	ec45 4b10 	vmov	d0, r4, r5
 8004940:	4653      	mov	r3, sl
 8004942:	4632      	mov	r2, r6
 8004944:	f000 fd8c 	bl	8005460 <_dtoa_r>
 8004948:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800494c:	4607      	mov	r7, r0
 800494e:	d102      	bne.n	8004956 <__cvt+0x66>
 8004950:	f019 0f01 	tst.w	r9, #1
 8004954:	d022      	beq.n	800499c <__cvt+0xac>
 8004956:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800495a:	eb07 0906 	add.w	r9, r7, r6
 800495e:	d110      	bne.n	8004982 <__cvt+0x92>
 8004960:	783b      	ldrb	r3, [r7, #0]
 8004962:	2b30      	cmp	r3, #48	; 0x30
 8004964:	d10a      	bne.n	800497c <__cvt+0x8c>
 8004966:	2200      	movs	r2, #0
 8004968:	2300      	movs	r3, #0
 800496a:	4620      	mov	r0, r4
 800496c:	4629      	mov	r1, r5
 800496e:	f7fc f8b3 	bl	8000ad8 <__aeabi_dcmpeq>
 8004972:	b918      	cbnz	r0, 800497c <__cvt+0x8c>
 8004974:	f1c6 0601 	rsb	r6, r6, #1
 8004978:	f8ca 6000 	str.w	r6, [sl]
 800497c:	f8da 3000 	ldr.w	r3, [sl]
 8004980:	4499      	add	r9, r3
 8004982:	2200      	movs	r2, #0
 8004984:	2300      	movs	r3, #0
 8004986:	4620      	mov	r0, r4
 8004988:	4629      	mov	r1, r5
 800498a:	f7fc f8a5 	bl	8000ad8 <__aeabi_dcmpeq>
 800498e:	b108      	cbz	r0, 8004994 <__cvt+0xa4>
 8004990:	f8cd 900c 	str.w	r9, [sp, #12]
 8004994:	2230      	movs	r2, #48	; 0x30
 8004996:	9b03      	ldr	r3, [sp, #12]
 8004998:	454b      	cmp	r3, r9
 800499a:	d307      	bcc.n	80049ac <__cvt+0xbc>
 800499c:	9b03      	ldr	r3, [sp, #12]
 800499e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049a0:	1bdb      	subs	r3, r3, r7
 80049a2:	4638      	mov	r0, r7
 80049a4:	6013      	str	r3, [r2, #0]
 80049a6:	b004      	add	sp, #16
 80049a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049ac:	1c59      	adds	r1, r3, #1
 80049ae:	9103      	str	r1, [sp, #12]
 80049b0:	701a      	strb	r2, [r3, #0]
 80049b2:	e7f0      	b.n	8004996 <__cvt+0xa6>

080049b4 <__exponent>:
 80049b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049b6:	4603      	mov	r3, r0
 80049b8:	2900      	cmp	r1, #0
 80049ba:	bfb8      	it	lt
 80049bc:	4249      	neglt	r1, r1
 80049be:	f803 2b02 	strb.w	r2, [r3], #2
 80049c2:	bfb4      	ite	lt
 80049c4:	222d      	movlt	r2, #45	; 0x2d
 80049c6:	222b      	movge	r2, #43	; 0x2b
 80049c8:	2909      	cmp	r1, #9
 80049ca:	7042      	strb	r2, [r0, #1]
 80049cc:	dd2a      	ble.n	8004a24 <__exponent+0x70>
 80049ce:	f10d 0407 	add.w	r4, sp, #7
 80049d2:	46a4      	mov	ip, r4
 80049d4:	270a      	movs	r7, #10
 80049d6:	46a6      	mov	lr, r4
 80049d8:	460a      	mov	r2, r1
 80049da:	fb91 f6f7 	sdiv	r6, r1, r7
 80049de:	fb07 1516 	mls	r5, r7, r6, r1
 80049e2:	3530      	adds	r5, #48	; 0x30
 80049e4:	2a63      	cmp	r2, #99	; 0x63
 80049e6:	f104 34ff 	add.w	r4, r4, #4294967295
 80049ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80049ee:	4631      	mov	r1, r6
 80049f0:	dcf1      	bgt.n	80049d6 <__exponent+0x22>
 80049f2:	3130      	adds	r1, #48	; 0x30
 80049f4:	f1ae 0502 	sub.w	r5, lr, #2
 80049f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80049fc:	1c44      	adds	r4, r0, #1
 80049fe:	4629      	mov	r1, r5
 8004a00:	4561      	cmp	r1, ip
 8004a02:	d30a      	bcc.n	8004a1a <__exponent+0x66>
 8004a04:	f10d 0209 	add.w	r2, sp, #9
 8004a08:	eba2 020e 	sub.w	r2, r2, lr
 8004a0c:	4565      	cmp	r5, ip
 8004a0e:	bf88      	it	hi
 8004a10:	2200      	movhi	r2, #0
 8004a12:	4413      	add	r3, r2
 8004a14:	1a18      	subs	r0, r3, r0
 8004a16:	b003      	add	sp, #12
 8004a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a1e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004a22:	e7ed      	b.n	8004a00 <__exponent+0x4c>
 8004a24:	2330      	movs	r3, #48	; 0x30
 8004a26:	3130      	adds	r1, #48	; 0x30
 8004a28:	7083      	strb	r3, [r0, #2]
 8004a2a:	70c1      	strb	r1, [r0, #3]
 8004a2c:	1d03      	adds	r3, r0, #4
 8004a2e:	e7f1      	b.n	8004a14 <__exponent+0x60>

08004a30 <_printf_float>:
 8004a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a34:	ed2d 8b02 	vpush	{d8}
 8004a38:	b08d      	sub	sp, #52	; 0x34
 8004a3a:	460c      	mov	r4, r1
 8004a3c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004a40:	4616      	mov	r6, r2
 8004a42:	461f      	mov	r7, r3
 8004a44:	4605      	mov	r5, r0
 8004a46:	f001 fcb1 	bl	80063ac <_localeconv_r>
 8004a4a:	f8d0 a000 	ldr.w	sl, [r0]
 8004a4e:	4650      	mov	r0, sl
 8004a50:	f7fb fbc6 	bl	80001e0 <strlen>
 8004a54:	2300      	movs	r3, #0
 8004a56:	930a      	str	r3, [sp, #40]	; 0x28
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	9305      	str	r3, [sp, #20]
 8004a5c:	f8d8 3000 	ldr.w	r3, [r8]
 8004a60:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004a64:	3307      	adds	r3, #7
 8004a66:	f023 0307 	bic.w	r3, r3, #7
 8004a6a:	f103 0208 	add.w	r2, r3, #8
 8004a6e:	f8c8 2000 	str.w	r2, [r8]
 8004a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a76:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a7a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004a7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a82:	9307      	str	r3, [sp, #28]
 8004a84:	f8cd 8018 	str.w	r8, [sp, #24]
 8004a88:	ee08 0a10 	vmov	s16, r0
 8004a8c:	4b9f      	ldr	r3, [pc, #636]	; (8004d0c <_printf_float+0x2dc>)
 8004a8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a92:	f04f 32ff 	mov.w	r2, #4294967295
 8004a96:	f7fc f851 	bl	8000b3c <__aeabi_dcmpun>
 8004a9a:	bb88      	cbnz	r0, 8004b00 <_printf_float+0xd0>
 8004a9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004aa0:	4b9a      	ldr	r3, [pc, #616]	; (8004d0c <_printf_float+0x2dc>)
 8004aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8004aa6:	f7fc f82b 	bl	8000b00 <__aeabi_dcmple>
 8004aaa:	bb48      	cbnz	r0, 8004b00 <_printf_float+0xd0>
 8004aac:	2200      	movs	r2, #0
 8004aae:	2300      	movs	r3, #0
 8004ab0:	4640      	mov	r0, r8
 8004ab2:	4649      	mov	r1, r9
 8004ab4:	f7fc f81a 	bl	8000aec <__aeabi_dcmplt>
 8004ab8:	b110      	cbz	r0, 8004ac0 <_printf_float+0x90>
 8004aba:	232d      	movs	r3, #45	; 0x2d
 8004abc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ac0:	4b93      	ldr	r3, [pc, #588]	; (8004d10 <_printf_float+0x2e0>)
 8004ac2:	4894      	ldr	r0, [pc, #592]	; (8004d14 <_printf_float+0x2e4>)
 8004ac4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004ac8:	bf94      	ite	ls
 8004aca:	4698      	movls	r8, r3
 8004acc:	4680      	movhi	r8, r0
 8004ace:	2303      	movs	r3, #3
 8004ad0:	6123      	str	r3, [r4, #16]
 8004ad2:	9b05      	ldr	r3, [sp, #20]
 8004ad4:	f023 0204 	bic.w	r2, r3, #4
 8004ad8:	6022      	str	r2, [r4, #0]
 8004ada:	f04f 0900 	mov.w	r9, #0
 8004ade:	9700      	str	r7, [sp, #0]
 8004ae0:	4633      	mov	r3, r6
 8004ae2:	aa0b      	add	r2, sp, #44	; 0x2c
 8004ae4:	4621      	mov	r1, r4
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	f000 f9d8 	bl	8004e9c <_printf_common>
 8004aec:	3001      	adds	r0, #1
 8004aee:	f040 8090 	bne.w	8004c12 <_printf_float+0x1e2>
 8004af2:	f04f 30ff 	mov.w	r0, #4294967295
 8004af6:	b00d      	add	sp, #52	; 0x34
 8004af8:	ecbd 8b02 	vpop	{d8}
 8004afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b00:	4642      	mov	r2, r8
 8004b02:	464b      	mov	r3, r9
 8004b04:	4640      	mov	r0, r8
 8004b06:	4649      	mov	r1, r9
 8004b08:	f7fc f818 	bl	8000b3c <__aeabi_dcmpun>
 8004b0c:	b140      	cbz	r0, 8004b20 <_printf_float+0xf0>
 8004b0e:	464b      	mov	r3, r9
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	bfbc      	itt	lt
 8004b14:	232d      	movlt	r3, #45	; 0x2d
 8004b16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004b1a:	487f      	ldr	r0, [pc, #508]	; (8004d18 <_printf_float+0x2e8>)
 8004b1c:	4b7f      	ldr	r3, [pc, #508]	; (8004d1c <_printf_float+0x2ec>)
 8004b1e:	e7d1      	b.n	8004ac4 <_printf_float+0x94>
 8004b20:	6863      	ldr	r3, [r4, #4]
 8004b22:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004b26:	9206      	str	r2, [sp, #24]
 8004b28:	1c5a      	adds	r2, r3, #1
 8004b2a:	d13f      	bne.n	8004bac <_printf_float+0x17c>
 8004b2c:	2306      	movs	r3, #6
 8004b2e:	6063      	str	r3, [r4, #4]
 8004b30:	9b05      	ldr	r3, [sp, #20]
 8004b32:	6861      	ldr	r1, [r4, #4]
 8004b34:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004b38:	2300      	movs	r3, #0
 8004b3a:	9303      	str	r3, [sp, #12]
 8004b3c:	ab0a      	add	r3, sp, #40	; 0x28
 8004b3e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004b42:	ab09      	add	r3, sp, #36	; 0x24
 8004b44:	ec49 8b10 	vmov	d0, r8, r9
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	6022      	str	r2, [r4, #0]
 8004b4c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004b50:	4628      	mov	r0, r5
 8004b52:	f7ff fecd 	bl	80048f0 <__cvt>
 8004b56:	9b06      	ldr	r3, [sp, #24]
 8004b58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b5a:	2b47      	cmp	r3, #71	; 0x47
 8004b5c:	4680      	mov	r8, r0
 8004b5e:	d108      	bne.n	8004b72 <_printf_float+0x142>
 8004b60:	1cc8      	adds	r0, r1, #3
 8004b62:	db02      	blt.n	8004b6a <_printf_float+0x13a>
 8004b64:	6863      	ldr	r3, [r4, #4]
 8004b66:	4299      	cmp	r1, r3
 8004b68:	dd41      	ble.n	8004bee <_printf_float+0x1be>
 8004b6a:	f1ab 0b02 	sub.w	fp, fp, #2
 8004b6e:	fa5f fb8b 	uxtb.w	fp, fp
 8004b72:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004b76:	d820      	bhi.n	8004bba <_printf_float+0x18a>
 8004b78:	3901      	subs	r1, #1
 8004b7a:	465a      	mov	r2, fp
 8004b7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b80:	9109      	str	r1, [sp, #36]	; 0x24
 8004b82:	f7ff ff17 	bl	80049b4 <__exponent>
 8004b86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b88:	1813      	adds	r3, r2, r0
 8004b8a:	2a01      	cmp	r2, #1
 8004b8c:	4681      	mov	r9, r0
 8004b8e:	6123      	str	r3, [r4, #16]
 8004b90:	dc02      	bgt.n	8004b98 <_printf_float+0x168>
 8004b92:	6822      	ldr	r2, [r4, #0]
 8004b94:	07d2      	lsls	r2, r2, #31
 8004b96:	d501      	bpl.n	8004b9c <_printf_float+0x16c>
 8004b98:	3301      	adds	r3, #1
 8004b9a:	6123      	str	r3, [r4, #16]
 8004b9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d09c      	beq.n	8004ade <_printf_float+0xae>
 8004ba4:	232d      	movs	r3, #45	; 0x2d
 8004ba6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004baa:	e798      	b.n	8004ade <_printf_float+0xae>
 8004bac:	9a06      	ldr	r2, [sp, #24]
 8004bae:	2a47      	cmp	r2, #71	; 0x47
 8004bb0:	d1be      	bne.n	8004b30 <_printf_float+0x100>
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1bc      	bne.n	8004b30 <_printf_float+0x100>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e7b9      	b.n	8004b2e <_printf_float+0xfe>
 8004bba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004bbe:	d118      	bne.n	8004bf2 <_printf_float+0x1c2>
 8004bc0:	2900      	cmp	r1, #0
 8004bc2:	6863      	ldr	r3, [r4, #4]
 8004bc4:	dd0b      	ble.n	8004bde <_printf_float+0x1ae>
 8004bc6:	6121      	str	r1, [r4, #16]
 8004bc8:	b913      	cbnz	r3, 8004bd0 <_printf_float+0x1a0>
 8004bca:	6822      	ldr	r2, [r4, #0]
 8004bcc:	07d0      	lsls	r0, r2, #31
 8004bce:	d502      	bpl.n	8004bd6 <_printf_float+0x1a6>
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	440b      	add	r3, r1
 8004bd4:	6123      	str	r3, [r4, #16]
 8004bd6:	65a1      	str	r1, [r4, #88]	; 0x58
 8004bd8:	f04f 0900 	mov.w	r9, #0
 8004bdc:	e7de      	b.n	8004b9c <_printf_float+0x16c>
 8004bde:	b913      	cbnz	r3, 8004be6 <_printf_float+0x1b6>
 8004be0:	6822      	ldr	r2, [r4, #0]
 8004be2:	07d2      	lsls	r2, r2, #31
 8004be4:	d501      	bpl.n	8004bea <_printf_float+0x1ba>
 8004be6:	3302      	adds	r3, #2
 8004be8:	e7f4      	b.n	8004bd4 <_printf_float+0x1a4>
 8004bea:	2301      	movs	r3, #1
 8004bec:	e7f2      	b.n	8004bd4 <_printf_float+0x1a4>
 8004bee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004bf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bf4:	4299      	cmp	r1, r3
 8004bf6:	db05      	blt.n	8004c04 <_printf_float+0x1d4>
 8004bf8:	6823      	ldr	r3, [r4, #0]
 8004bfa:	6121      	str	r1, [r4, #16]
 8004bfc:	07d8      	lsls	r0, r3, #31
 8004bfe:	d5ea      	bpl.n	8004bd6 <_printf_float+0x1a6>
 8004c00:	1c4b      	adds	r3, r1, #1
 8004c02:	e7e7      	b.n	8004bd4 <_printf_float+0x1a4>
 8004c04:	2900      	cmp	r1, #0
 8004c06:	bfd4      	ite	le
 8004c08:	f1c1 0202 	rsble	r2, r1, #2
 8004c0c:	2201      	movgt	r2, #1
 8004c0e:	4413      	add	r3, r2
 8004c10:	e7e0      	b.n	8004bd4 <_printf_float+0x1a4>
 8004c12:	6823      	ldr	r3, [r4, #0]
 8004c14:	055a      	lsls	r2, r3, #21
 8004c16:	d407      	bmi.n	8004c28 <_printf_float+0x1f8>
 8004c18:	6923      	ldr	r3, [r4, #16]
 8004c1a:	4642      	mov	r2, r8
 8004c1c:	4631      	mov	r1, r6
 8004c1e:	4628      	mov	r0, r5
 8004c20:	47b8      	blx	r7
 8004c22:	3001      	adds	r0, #1
 8004c24:	d12c      	bne.n	8004c80 <_printf_float+0x250>
 8004c26:	e764      	b.n	8004af2 <_printf_float+0xc2>
 8004c28:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004c2c:	f240 80e0 	bls.w	8004df0 <_printf_float+0x3c0>
 8004c30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c34:	2200      	movs	r2, #0
 8004c36:	2300      	movs	r3, #0
 8004c38:	f7fb ff4e 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c3c:	2800      	cmp	r0, #0
 8004c3e:	d034      	beq.n	8004caa <_printf_float+0x27a>
 8004c40:	4a37      	ldr	r2, [pc, #220]	; (8004d20 <_printf_float+0x2f0>)
 8004c42:	2301      	movs	r3, #1
 8004c44:	4631      	mov	r1, r6
 8004c46:	4628      	mov	r0, r5
 8004c48:	47b8      	blx	r7
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	f43f af51 	beq.w	8004af2 <_printf_float+0xc2>
 8004c50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c54:	429a      	cmp	r2, r3
 8004c56:	db02      	blt.n	8004c5e <_printf_float+0x22e>
 8004c58:	6823      	ldr	r3, [r4, #0]
 8004c5a:	07d8      	lsls	r0, r3, #31
 8004c5c:	d510      	bpl.n	8004c80 <_printf_float+0x250>
 8004c5e:	ee18 3a10 	vmov	r3, s16
 8004c62:	4652      	mov	r2, sl
 8004c64:	4631      	mov	r1, r6
 8004c66:	4628      	mov	r0, r5
 8004c68:	47b8      	blx	r7
 8004c6a:	3001      	adds	r0, #1
 8004c6c:	f43f af41 	beq.w	8004af2 <_printf_float+0xc2>
 8004c70:	f04f 0800 	mov.w	r8, #0
 8004c74:	f104 091a 	add.w	r9, r4, #26
 8004c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	4543      	cmp	r3, r8
 8004c7e:	dc09      	bgt.n	8004c94 <_printf_float+0x264>
 8004c80:	6823      	ldr	r3, [r4, #0]
 8004c82:	079b      	lsls	r3, r3, #30
 8004c84:	f100 8105 	bmi.w	8004e92 <_printf_float+0x462>
 8004c88:	68e0      	ldr	r0, [r4, #12]
 8004c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c8c:	4298      	cmp	r0, r3
 8004c8e:	bfb8      	it	lt
 8004c90:	4618      	movlt	r0, r3
 8004c92:	e730      	b.n	8004af6 <_printf_float+0xc6>
 8004c94:	2301      	movs	r3, #1
 8004c96:	464a      	mov	r2, r9
 8004c98:	4631      	mov	r1, r6
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	47b8      	blx	r7
 8004c9e:	3001      	adds	r0, #1
 8004ca0:	f43f af27 	beq.w	8004af2 <_printf_float+0xc2>
 8004ca4:	f108 0801 	add.w	r8, r8, #1
 8004ca8:	e7e6      	b.n	8004c78 <_printf_float+0x248>
 8004caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	dc39      	bgt.n	8004d24 <_printf_float+0x2f4>
 8004cb0:	4a1b      	ldr	r2, [pc, #108]	; (8004d20 <_printf_float+0x2f0>)
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	4631      	mov	r1, r6
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	47b8      	blx	r7
 8004cba:	3001      	adds	r0, #1
 8004cbc:	f43f af19 	beq.w	8004af2 <_printf_float+0xc2>
 8004cc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	d102      	bne.n	8004cce <_printf_float+0x29e>
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	07d9      	lsls	r1, r3, #31
 8004ccc:	d5d8      	bpl.n	8004c80 <_printf_float+0x250>
 8004cce:	ee18 3a10 	vmov	r3, s16
 8004cd2:	4652      	mov	r2, sl
 8004cd4:	4631      	mov	r1, r6
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	47b8      	blx	r7
 8004cda:	3001      	adds	r0, #1
 8004cdc:	f43f af09 	beq.w	8004af2 <_printf_float+0xc2>
 8004ce0:	f04f 0900 	mov.w	r9, #0
 8004ce4:	f104 0a1a 	add.w	sl, r4, #26
 8004ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cea:	425b      	negs	r3, r3
 8004cec:	454b      	cmp	r3, r9
 8004cee:	dc01      	bgt.n	8004cf4 <_printf_float+0x2c4>
 8004cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cf2:	e792      	b.n	8004c1a <_printf_float+0x1ea>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	4652      	mov	r2, sl
 8004cf8:	4631      	mov	r1, r6
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	47b8      	blx	r7
 8004cfe:	3001      	adds	r0, #1
 8004d00:	f43f aef7 	beq.w	8004af2 <_printf_float+0xc2>
 8004d04:	f109 0901 	add.w	r9, r9, #1
 8004d08:	e7ee      	b.n	8004ce8 <_printf_float+0x2b8>
 8004d0a:	bf00      	nop
 8004d0c:	7fefffff 	.word	0x7fefffff
 8004d10:	0800733c 	.word	0x0800733c
 8004d14:	08007340 	.word	0x08007340
 8004d18:	08007348 	.word	0x08007348
 8004d1c:	08007344 	.word	0x08007344
 8004d20:	0800734c 	.word	0x0800734c
 8004d24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	bfa8      	it	ge
 8004d2c:	461a      	movge	r2, r3
 8004d2e:	2a00      	cmp	r2, #0
 8004d30:	4691      	mov	r9, r2
 8004d32:	dc37      	bgt.n	8004da4 <_printf_float+0x374>
 8004d34:	f04f 0b00 	mov.w	fp, #0
 8004d38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d3c:	f104 021a 	add.w	r2, r4, #26
 8004d40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d42:	9305      	str	r3, [sp, #20]
 8004d44:	eba3 0309 	sub.w	r3, r3, r9
 8004d48:	455b      	cmp	r3, fp
 8004d4a:	dc33      	bgt.n	8004db4 <_printf_float+0x384>
 8004d4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d50:	429a      	cmp	r2, r3
 8004d52:	db3b      	blt.n	8004dcc <_printf_float+0x39c>
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	07da      	lsls	r2, r3, #31
 8004d58:	d438      	bmi.n	8004dcc <_printf_float+0x39c>
 8004d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d5c:	9a05      	ldr	r2, [sp, #20]
 8004d5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d60:	1a9a      	subs	r2, r3, r2
 8004d62:	eba3 0901 	sub.w	r9, r3, r1
 8004d66:	4591      	cmp	r9, r2
 8004d68:	bfa8      	it	ge
 8004d6a:	4691      	movge	r9, r2
 8004d6c:	f1b9 0f00 	cmp.w	r9, #0
 8004d70:	dc35      	bgt.n	8004dde <_printf_float+0x3ae>
 8004d72:	f04f 0800 	mov.w	r8, #0
 8004d76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d7a:	f104 0a1a 	add.w	sl, r4, #26
 8004d7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d82:	1a9b      	subs	r3, r3, r2
 8004d84:	eba3 0309 	sub.w	r3, r3, r9
 8004d88:	4543      	cmp	r3, r8
 8004d8a:	f77f af79 	ble.w	8004c80 <_printf_float+0x250>
 8004d8e:	2301      	movs	r3, #1
 8004d90:	4652      	mov	r2, sl
 8004d92:	4631      	mov	r1, r6
 8004d94:	4628      	mov	r0, r5
 8004d96:	47b8      	blx	r7
 8004d98:	3001      	adds	r0, #1
 8004d9a:	f43f aeaa 	beq.w	8004af2 <_printf_float+0xc2>
 8004d9e:	f108 0801 	add.w	r8, r8, #1
 8004da2:	e7ec      	b.n	8004d7e <_printf_float+0x34e>
 8004da4:	4613      	mov	r3, r2
 8004da6:	4631      	mov	r1, r6
 8004da8:	4642      	mov	r2, r8
 8004daa:	4628      	mov	r0, r5
 8004dac:	47b8      	blx	r7
 8004dae:	3001      	adds	r0, #1
 8004db0:	d1c0      	bne.n	8004d34 <_printf_float+0x304>
 8004db2:	e69e      	b.n	8004af2 <_printf_float+0xc2>
 8004db4:	2301      	movs	r3, #1
 8004db6:	4631      	mov	r1, r6
 8004db8:	4628      	mov	r0, r5
 8004dba:	9205      	str	r2, [sp, #20]
 8004dbc:	47b8      	blx	r7
 8004dbe:	3001      	adds	r0, #1
 8004dc0:	f43f ae97 	beq.w	8004af2 <_printf_float+0xc2>
 8004dc4:	9a05      	ldr	r2, [sp, #20]
 8004dc6:	f10b 0b01 	add.w	fp, fp, #1
 8004dca:	e7b9      	b.n	8004d40 <_printf_float+0x310>
 8004dcc:	ee18 3a10 	vmov	r3, s16
 8004dd0:	4652      	mov	r2, sl
 8004dd2:	4631      	mov	r1, r6
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	47b8      	blx	r7
 8004dd8:	3001      	adds	r0, #1
 8004dda:	d1be      	bne.n	8004d5a <_printf_float+0x32a>
 8004ddc:	e689      	b.n	8004af2 <_printf_float+0xc2>
 8004dde:	9a05      	ldr	r2, [sp, #20]
 8004de0:	464b      	mov	r3, r9
 8004de2:	4442      	add	r2, r8
 8004de4:	4631      	mov	r1, r6
 8004de6:	4628      	mov	r0, r5
 8004de8:	47b8      	blx	r7
 8004dea:	3001      	adds	r0, #1
 8004dec:	d1c1      	bne.n	8004d72 <_printf_float+0x342>
 8004dee:	e680      	b.n	8004af2 <_printf_float+0xc2>
 8004df0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004df2:	2a01      	cmp	r2, #1
 8004df4:	dc01      	bgt.n	8004dfa <_printf_float+0x3ca>
 8004df6:	07db      	lsls	r3, r3, #31
 8004df8:	d538      	bpl.n	8004e6c <_printf_float+0x43c>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	4642      	mov	r2, r8
 8004dfe:	4631      	mov	r1, r6
 8004e00:	4628      	mov	r0, r5
 8004e02:	47b8      	blx	r7
 8004e04:	3001      	adds	r0, #1
 8004e06:	f43f ae74 	beq.w	8004af2 <_printf_float+0xc2>
 8004e0a:	ee18 3a10 	vmov	r3, s16
 8004e0e:	4652      	mov	r2, sl
 8004e10:	4631      	mov	r1, r6
 8004e12:	4628      	mov	r0, r5
 8004e14:	47b8      	blx	r7
 8004e16:	3001      	adds	r0, #1
 8004e18:	f43f ae6b 	beq.w	8004af2 <_printf_float+0xc2>
 8004e1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e20:	2200      	movs	r2, #0
 8004e22:	2300      	movs	r3, #0
 8004e24:	f7fb fe58 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e28:	b9d8      	cbnz	r0, 8004e62 <_printf_float+0x432>
 8004e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e2c:	f108 0201 	add.w	r2, r8, #1
 8004e30:	3b01      	subs	r3, #1
 8004e32:	4631      	mov	r1, r6
 8004e34:	4628      	mov	r0, r5
 8004e36:	47b8      	blx	r7
 8004e38:	3001      	adds	r0, #1
 8004e3a:	d10e      	bne.n	8004e5a <_printf_float+0x42a>
 8004e3c:	e659      	b.n	8004af2 <_printf_float+0xc2>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	4652      	mov	r2, sl
 8004e42:	4631      	mov	r1, r6
 8004e44:	4628      	mov	r0, r5
 8004e46:	47b8      	blx	r7
 8004e48:	3001      	adds	r0, #1
 8004e4a:	f43f ae52 	beq.w	8004af2 <_printf_float+0xc2>
 8004e4e:	f108 0801 	add.w	r8, r8, #1
 8004e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e54:	3b01      	subs	r3, #1
 8004e56:	4543      	cmp	r3, r8
 8004e58:	dcf1      	bgt.n	8004e3e <_printf_float+0x40e>
 8004e5a:	464b      	mov	r3, r9
 8004e5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e60:	e6dc      	b.n	8004c1c <_printf_float+0x1ec>
 8004e62:	f04f 0800 	mov.w	r8, #0
 8004e66:	f104 0a1a 	add.w	sl, r4, #26
 8004e6a:	e7f2      	b.n	8004e52 <_printf_float+0x422>
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	4642      	mov	r2, r8
 8004e70:	e7df      	b.n	8004e32 <_printf_float+0x402>
 8004e72:	2301      	movs	r3, #1
 8004e74:	464a      	mov	r2, r9
 8004e76:	4631      	mov	r1, r6
 8004e78:	4628      	mov	r0, r5
 8004e7a:	47b8      	blx	r7
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	f43f ae38 	beq.w	8004af2 <_printf_float+0xc2>
 8004e82:	f108 0801 	add.w	r8, r8, #1
 8004e86:	68e3      	ldr	r3, [r4, #12]
 8004e88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e8a:	1a5b      	subs	r3, r3, r1
 8004e8c:	4543      	cmp	r3, r8
 8004e8e:	dcf0      	bgt.n	8004e72 <_printf_float+0x442>
 8004e90:	e6fa      	b.n	8004c88 <_printf_float+0x258>
 8004e92:	f04f 0800 	mov.w	r8, #0
 8004e96:	f104 0919 	add.w	r9, r4, #25
 8004e9a:	e7f4      	b.n	8004e86 <_printf_float+0x456>

08004e9c <_printf_common>:
 8004e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ea0:	4616      	mov	r6, r2
 8004ea2:	4699      	mov	r9, r3
 8004ea4:	688a      	ldr	r2, [r1, #8]
 8004ea6:	690b      	ldr	r3, [r1, #16]
 8004ea8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004eac:	4293      	cmp	r3, r2
 8004eae:	bfb8      	it	lt
 8004eb0:	4613      	movlt	r3, r2
 8004eb2:	6033      	str	r3, [r6, #0]
 8004eb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004eb8:	4607      	mov	r7, r0
 8004eba:	460c      	mov	r4, r1
 8004ebc:	b10a      	cbz	r2, 8004ec2 <_printf_common+0x26>
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	6033      	str	r3, [r6, #0]
 8004ec2:	6823      	ldr	r3, [r4, #0]
 8004ec4:	0699      	lsls	r1, r3, #26
 8004ec6:	bf42      	ittt	mi
 8004ec8:	6833      	ldrmi	r3, [r6, #0]
 8004eca:	3302      	addmi	r3, #2
 8004ecc:	6033      	strmi	r3, [r6, #0]
 8004ece:	6825      	ldr	r5, [r4, #0]
 8004ed0:	f015 0506 	ands.w	r5, r5, #6
 8004ed4:	d106      	bne.n	8004ee4 <_printf_common+0x48>
 8004ed6:	f104 0a19 	add.w	sl, r4, #25
 8004eda:	68e3      	ldr	r3, [r4, #12]
 8004edc:	6832      	ldr	r2, [r6, #0]
 8004ede:	1a9b      	subs	r3, r3, r2
 8004ee0:	42ab      	cmp	r3, r5
 8004ee2:	dc26      	bgt.n	8004f32 <_printf_common+0x96>
 8004ee4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ee8:	1e13      	subs	r3, r2, #0
 8004eea:	6822      	ldr	r2, [r4, #0]
 8004eec:	bf18      	it	ne
 8004eee:	2301      	movne	r3, #1
 8004ef0:	0692      	lsls	r2, r2, #26
 8004ef2:	d42b      	bmi.n	8004f4c <_printf_common+0xb0>
 8004ef4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ef8:	4649      	mov	r1, r9
 8004efa:	4638      	mov	r0, r7
 8004efc:	47c0      	blx	r8
 8004efe:	3001      	adds	r0, #1
 8004f00:	d01e      	beq.n	8004f40 <_printf_common+0xa4>
 8004f02:	6823      	ldr	r3, [r4, #0]
 8004f04:	68e5      	ldr	r5, [r4, #12]
 8004f06:	6832      	ldr	r2, [r6, #0]
 8004f08:	f003 0306 	and.w	r3, r3, #6
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	bf08      	it	eq
 8004f10:	1aad      	subeq	r5, r5, r2
 8004f12:	68a3      	ldr	r3, [r4, #8]
 8004f14:	6922      	ldr	r2, [r4, #16]
 8004f16:	bf0c      	ite	eq
 8004f18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f1c:	2500      	movne	r5, #0
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	bfc4      	itt	gt
 8004f22:	1a9b      	subgt	r3, r3, r2
 8004f24:	18ed      	addgt	r5, r5, r3
 8004f26:	2600      	movs	r6, #0
 8004f28:	341a      	adds	r4, #26
 8004f2a:	42b5      	cmp	r5, r6
 8004f2c:	d11a      	bne.n	8004f64 <_printf_common+0xc8>
 8004f2e:	2000      	movs	r0, #0
 8004f30:	e008      	b.n	8004f44 <_printf_common+0xa8>
 8004f32:	2301      	movs	r3, #1
 8004f34:	4652      	mov	r2, sl
 8004f36:	4649      	mov	r1, r9
 8004f38:	4638      	mov	r0, r7
 8004f3a:	47c0      	blx	r8
 8004f3c:	3001      	adds	r0, #1
 8004f3e:	d103      	bne.n	8004f48 <_printf_common+0xac>
 8004f40:	f04f 30ff 	mov.w	r0, #4294967295
 8004f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f48:	3501      	adds	r5, #1
 8004f4a:	e7c6      	b.n	8004eda <_printf_common+0x3e>
 8004f4c:	18e1      	adds	r1, r4, r3
 8004f4e:	1c5a      	adds	r2, r3, #1
 8004f50:	2030      	movs	r0, #48	; 0x30
 8004f52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f56:	4422      	add	r2, r4
 8004f58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f60:	3302      	adds	r3, #2
 8004f62:	e7c7      	b.n	8004ef4 <_printf_common+0x58>
 8004f64:	2301      	movs	r3, #1
 8004f66:	4622      	mov	r2, r4
 8004f68:	4649      	mov	r1, r9
 8004f6a:	4638      	mov	r0, r7
 8004f6c:	47c0      	blx	r8
 8004f6e:	3001      	adds	r0, #1
 8004f70:	d0e6      	beq.n	8004f40 <_printf_common+0xa4>
 8004f72:	3601      	adds	r6, #1
 8004f74:	e7d9      	b.n	8004f2a <_printf_common+0x8e>
	...

08004f78 <_printf_i>:
 8004f78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f7c:	7e0f      	ldrb	r7, [r1, #24]
 8004f7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f80:	2f78      	cmp	r7, #120	; 0x78
 8004f82:	4691      	mov	r9, r2
 8004f84:	4680      	mov	r8, r0
 8004f86:	460c      	mov	r4, r1
 8004f88:	469a      	mov	sl, r3
 8004f8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f8e:	d807      	bhi.n	8004fa0 <_printf_i+0x28>
 8004f90:	2f62      	cmp	r7, #98	; 0x62
 8004f92:	d80a      	bhi.n	8004faa <_printf_i+0x32>
 8004f94:	2f00      	cmp	r7, #0
 8004f96:	f000 80d8 	beq.w	800514a <_printf_i+0x1d2>
 8004f9a:	2f58      	cmp	r7, #88	; 0x58
 8004f9c:	f000 80a3 	beq.w	80050e6 <_printf_i+0x16e>
 8004fa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fa8:	e03a      	b.n	8005020 <_printf_i+0xa8>
 8004faa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fae:	2b15      	cmp	r3, #21
 8004fb0:	d8f6      	bhi.n	8004fa0 <_printf_i+0x28>
 8004fb2:	a101      	add	r1, pc, #4	; (adr r1, 8004fb8 <_printf_i+0x40>)
 8004fb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fb8:	08005011 	.word	0x08005011
 8004fbc:	08005025 	.word	0x08005025
 8004fc0:	08004fa1 	.word	0x08004fa1
 8004fc4:	08004fa1 	.word	0x08004fa1
 8004fc8:	08004fa1 	.word	0x08004fa1
 8004fcc:	08004fa1 	.word	0x08004fa1
 8004fd0:	08005025 	.word	0x08005025
 8004fd4:	08004fa1 	.word	0x08004fa1
 8004fd8:	08004fa1 	.word	0x08004fa1
 8004fdc:	08004fa1 	.word	0x08004fa1
 8004fe0:	08004fa1 	.word	0x08004fa1
 8004fe4:	08005131 	.word	0x08005131
 8004fe8:	08005055 	.word	0x08005055
 8004fec:	08005113 	.word	0x08005113
 8004ff0:	08004fa1 	.word	0x08004fa1
 8004ff4:	08004fa1 	.word	0x08004fa1
 8004ff8:	08005153 	.word	0x08005153
 8004ffc:	08004fa1 	.word	0x08004fa1
 8005000:	08005055 	.word	0x08005055
 8005004:	08004fa1 	.word	0x08004fa1
 8005008:	08004fa1 	.word	0x08004fa1
 800500c:	0800511b 	.word	0x0800511b
 8005010:	682b      	ldr	r3, [r5, #0]
 8005012:	1d1a      	adds	r2, r3, #4
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	602a      	str	r2, [r5, #0]
 8005018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800501c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005020:	2301      	movs	r3, #1
 8005022:	e0a3      	b.n	800516c <_printf_i+0x1f4>
 8005024:	6820      	ldr	r0, [r4, #0]
 8005026:	6829      	ldr	r1, [r5, #0]
 8005028:	0606      	lsls	r6, r0, #24
 800502a:	f101 0304 	add.w	r3, r1, #4
 800502e:	d50a      	bpl.n	8005046 <_printf_i+0xce>
 8005030:	680e      	ldr	r6, [r1, #0]
 8005032:	602b      	str	r3, [r5, #0]
 8005034:	2e00      	cmp	r6, #0
 8005036:	da03      	bge.n	8005040 <_printf_i+0xc8>
 8005038:	232d      	movs	r3, #45	; 0x2d
 800503a:	4276      	negs	r6, r6
 800503c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005040:	485e      	ldr	r0, [pc, #376]	; (80051bc <_printf_i+0x244>)
 8005042:	230a      	movs	r3, #10
 8005044:	e019      	b.n	800507a <_printf_i+0x102>
 8005046:	680e      	ldr	r6, [r1, #0]
 8005048:	602b      	str	r3, [r5, #0]
 800504a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800504e:	bf18      	it	ne
 8005050:	b236      	sxthne	r6, r6
 8005052:	e7ef      	b.n	8005034 <_printf_i+0xbc>
 8005054:	682b      	ldr	r3, [r5, #0]
 8005056:	6820      	ldr	r0, [r4, #0]
 8005058:	1d19      	adds	r1, r3, #4
 800505a:	6029      	str	r1, [r5, #0]
 800505c:	0601      	lsls	r1, r0, #24
 800505e:	d501      	bpl.n	8005064 <_printf_i+0xec>
 8005060:	681e      	ldr	r6, [r3, #0]
 8005062:	e002      	b.n	800506a <_printf_i+0xf2>
 8005064:	0646      	lsls	r6, r0, #25
 8005066:	d5fb      	bpl.n	8005060 <_printf_i+0xe8>
 8005068:	881e      	ldrh	r6, [r3, #0]
 800506a:	4854      	ldr	r0, [pc, #336]	; (80051bc <_printf_i+0x244>)
 800506c:	2f6f      	cmp	r7, #111	; 0x6f
 800506e:	bf0c      	ite	eq
 8005070:	2308      	moveq	r3, #8
 8005072:	230a      	movne	r3, #10
 8005074:	2100      	movs	r1, #0
 8005076:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800507a:	6865      	ldr	r5, [r4, #4]
 800507c:	60a5      	str	r5, [r4, #8]
 800507e:	2d00      	cmp	r5, #0
 8005080:	bfa2      	ittt	ge
 8005082:	6821      	ldrge	r1, [r4, #0]
 8005084:	f021 0104 	bicge.w	r1, r1, #4
 8005088:	6021      	strge	r1, [r4, #0]
 800508a:	b90e      	cbnz	r6, 8005090 <_printf_i+0x118>
 800508c:	2d00      	cmp	r5, #0
 800508e:	d04d      	beq.n	800512c <_printf_i+0x1b4>
 8005090:	4615      	mov	r5, r2
 8005092:	fbb6 f1f3 	udiv	r1, r6, r3
 8005096:	fb03 6711 	mls	r7, r3, r1, r6
 800509a:	5dc7      	ldrb	r7, [r0, r7]
 800509c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050a0:	4637      	mov	r7, r6
 80050a2:	42bb      	cmp	r3, r7
 80050a4:	460e      	mov	r6, r1
 80050a6:	d9f4      	bls.n	8005092 <_printf_i+0x11a>
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d10b      	bne.n	80050c4 <_printf_i+0x14c>
 80050ac:	6823      	ldr	r3, [r4, #0]
 80050ae:	07de      	lsls	r6, r3, #31
 80050b0:	d508      	bpl.n	80050c4 <_printf_i+0x14c>
 80050b2:	6923      	ldr	r3, [r4, #16]
 80050b4:	6861      	ldr	r1, [r4, #4]
 80050b6:	4299      	cmp	r1, r3
 80050b8:	bfde      	ittt	le
 80050ba:	2330      	movle	r3, #48	; 0x30
 80050bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050c4:	1b52      	subs	r2, r2, r5
 80050c6:	6122      	str	r2, [r4, #16]
 80050c8:	f8cd a000 	str.w	sl, [sp]
 80050cc:	464b      	mov	r3, r9
 80050ce:	aa03      	add	r2, sp, #12
 80050d0:	4621      	mov	r1, r4
 80050d2:	4640      	mov	r0, r8
 80050d4:	f7ff fee2 	bl	8004e9c <_printf_common>
 80050d8:	3001      	adds	r0, #1
 80050da:	d14c      	bne.n	8005176 <_printf_i+0x1fe>
 80050dc:	f04f 30ff 	mov.w	r0, #4294967295
 80050e0:	b004      	add	sp, #16
 80050e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050e6:	4835      	ldr	r0, [pc, #212]	; (80051bc <_printf_i+0x244>)
 80050e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80050ec:	6829      	ldr	r1, [r5, #0]
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80050f4:	6029      	str	r1, [r5, #0]
 80050f6:	061d      	lsls	r5, r3, #24
 80050f8:	d514      	bpl.n	8005124 <_printf_i+0x1ac>
 80050fa:	07df      	lsls	r7, r3, #31
 80050fc:	bf44      	itt	mi
 80050fe:	f043 0320 	orrmi.w	r3, r3, #32
 8005102:	6023      	strmi	r3, [r4, #0]
 8005104:	b91e      	cbnz	r6, 800510e <_printf_i+0x196>
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	f023 0320 	bic.w	r3, r3, #32
 800510c:	6023      	str	r3, [r4, #0]
 800510e:	2310      	movs	r3, #16
 8005110:	e7b0      	b.n	8005074 <_printf_i+0xfc>
 8005112:	6823      	ldr	r3, [r4, #0]
 8005114:	f043 0320 	orr.w	r3, r3, #32
 8005118:	6023      	str	r3, [r4, #0]
 800511a:	2378      	movs	r3, #120	; 0x78
 800511c:	4828      	ldr	r0, [pc, #160]	; (80051c0 <_printf_i+0x248>)
 800511e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005122:	e7e3      	b.n	80050ec <_printf_i+0x174>
 8005124:	0659      	lsls	r1, r3, #25
 8005126:	bf48      	it	mi
 8005128:	b2b6      	uxthmi	r6, r6
 800512a:	e7e6      	b.n	80050fa <_printf_i+0x182>
 800512c:	4615      	mov	r5, r2
 800512e:	e7bb      	b.n	80050a8 <_printf_i+0x130>
 8005130:	682b      	ldr	r3, [r5, #0]
 8005132:	6826      	ldr	r6, [r4, #0]
 8005134:	6961      	ldr	r1, [r4, #20]
 8005136:	1d18      	adds	r0, r3, #4
 8005138:	6028      	str	r0, [r5, #0]
 800513a:	0635      	lsls	r5, r6, #24
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	d501      	bpl.n	8005144 <_printf_i+0x1cc>
 8005140:	6019      	str	r1, [r3, #0]
 8005142:	e002      	b.n	800514a <_printf_i+0x1d2>
 8005144:	0670      	lsls	r0, r6, #25
 8005146:	d5fb      	bpl.n	8005140 <_printf_i+0x1c8>
 8005148:	8019      	strh	r1, [r3, #0]
 800514a:	2300      	movs	r3, #0
 800514c:	6123      	str	r3, [r4, #16]
 800514e:	4615      	mov	r5, r2
 8005150:	e7ba      	b.n	80050c8 <_printf_i+0x150>
 8005152:	682b      	ldr	r3, [r5, #0]
 8005154:	1d1a      	adds	r2, r3, #4
 8005156:	602a      	str	r2, [r5, #0]
 8005158:	681d      	ldr	r5, [r3, #0]
 800515a:	6862      	ldr	r2, [r4, #4]
 800515c:	2100      	movs	r1, #0
 800515e:	4628      	mov	r0, r5
 8005160:	f7fb f846 	bl	80001f0 <memchr>
 8005164:	b108      	cbz	r0, 800516a <_printf_i+0x1f2>
 8005166:	1b40      	subs	r0, r0, r5
 8005168:	6060      	str	r0, [r4, #4]
 800516a:	6863      	ldr	r3, [r4, #4]
 800516c:	6123      	str	r3, [r4, #16]
 800516e:	2300      	movs	r3, #0
 8005170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005174:	e7a8      	b.n	80050c8 <_printf_i+0x150>
 8005176:	6923      	ldr	r3, [r4, #16]
 8005178:	462a      	mov	r2, r5
 800517a:	4649      	mov	r1, r9
 800517c:	4640      	mov	r0, r8
 800517e:	47d0      	blx	sl
 8005180:	3001      	adds	r0, #1
 8005182:	d0ab      	beq.n	80050dc <_printf_i+0x164>
 8005184:	6823      	ldr	r3, [r4, #0]
 8005186:	079b      	lsls	r3, r3, #30
 8005188:	d413      	bmi.n	80051b2 <_printf_i+0x23a>
 800518a:	68e0      	ldr	r0, [r4, #12]
 800518c:	9b03      	ldr	r3, [sp, #12]
 800518e:	4298      	cmp	r0, r3
 8005190:	bfb8      	it	lt
 8005192:	4618      	movlt	r0, r3
 8005194:	e7a4      	b.n	80050e0 <_printf_i+0x168>
 8005196:	2301      	movs	r3, #1
 8005198:	4632      	mov	r2, r6
 800519a:	4649      	mov	r1, r9
 800519c:	4640      	mov	r0, r8
 800519e:	47d0      	blx	sl
 80051a0:	3001      	adds	r0, #1
 80051a2:	d09b      	beq.n	80050dc <_printf_i+0x164>
 80051a4:	3501      	adds	r5, #1
 80051a6:	68e3      	ldr	r3, [r4, #12]
 80051a8:	9903      	ldr	r1, [sp, #12]
 80051aa:	1a5b      	subs	r3, r3, r1
 80051ac:	42ab      	cmp	r3, r5
 80051ae:	dcf2      	bgt.n	8005196 <_printf_i+0x21e>
 80051b0:	e7eb      	b.n	800518a <_printf_i+0x212>
 80051b2:	2500      	movs	r5, #0
 80051b4:	f104 0619 	add.w	r6, r4, #25
 80051b8:	e7f5      	b.n	80051a6 <_printf_i+0x22e>
 80051ba:	bf00      	nop
 80051bc:	0800734e 	.word	0x0800734e
 80051c0:	0800735f 	.word	0x0800735f

080051c4 <__swbuf_r>:
 80051c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c6:	460e      	mov	r6, r1
 80051c8:	4614      	mov	r4, r2
 80051ca:	4605      	mov	r5, r0
 80051cc:	b118      	cbz	r0, 80051d6 <__swbuf_r+0x12>
 80051ce:	6983      	ldr	r3, [r0, #24]
 80051d0:	b90b      	cbnz	r3, 80051d6 <__swbuf_r+0x12>
 80051d2:	f001 f84d 	bl	8006270 <__sinit>
 80051d6:	4b21      	ldr	r3, [pc, #132]	; (800525c <__swbuf_r+0x98>)
 80051d8:	429c      	cmp	r4, r3
 80051da:	d12b      	bne.n	8005234 <__swbuf_r+0x70>
 80051dc:	686c      	ldr	r4, [r5, #4]
 80051de:	69a3      	ldr	r3, [r4, #24]
 80051e0:	60a3      	str	r3, [r4, #8]
 80051e2:	89a3      	ldrh	r3, [r4, #12]
 80051e4:	071a      	lsls	r2, r3, #28
 80051e6:	d52f      	bpl.n	8005248 <__swbuf_r+0x84>
 80051e8:	6923      	ldr	r3, [r4, #16]
 80051ea:	b36b      	cbz	r3, 8005248 <__swbuf_r+0x84>
 80051ec:	6923      	ldr	r3, [r4, #16]
 80051ee:	6820      	ldr	r0, [r4, #0]
 80051f0:	1ac0      	subs	r0, r0, r3
 80051f2:	6963      	ldr	r3, [r4, #20]
 80051f4:	b2f6      	uxtb	r6, r6
 80051f6:	4283      	cmp	r3, r0
 80051f8:	4637      	mov	r7, r6
 80051fa:	dc04      	bgt.n	8005206 <__swbuf_r+0x42>
 80051fc:	4621      	mov	r1, r4
 80051fe:	4628      	mov	r0, r5
 8005200:	f000 ffa2 	bl	8006148 <_fflush_r>
 8005204:	bb30      	cbnz	r0, 8005254 <__swbuf_r+0x90>
 8005206:	68a3      	ldr	r3, [r4, #8]
 8005208:	3b01      	subs	r3, #1
 800520a:	60a3      	str	r3, [r4, #8]
 800520c:	6823      	ldr	r3, [r4, #0]
 800520e:	1c5a      	adds	r2, r3, #1
 8005210:	6022      	str	r2, [r4, #0]
 8005212:	701e      	strb	r6, [r3, #0]
 8005214:	6963      	ldr	r3, [r4, #20]
 8005216:	3001      	adds	r0, #1
 8005218:	4283      	cmp	r3, r0
 800521a:	d004      	beq.n	8005226 <__swbuf_r+0x62>
 800521c:	89a3      	ldrh	r3, [r4, #12]
 800521e:	07db      	lsls	r3, r3, #31
 8005220:	d506      	bpl.n	8005230 <__swbuf_r+0x6c>
 8005222:	2e0a      	cmp	r6, #10
 8005224:	d104      	bne.n	8005230 <__swbuf_r+0x6c>
 8005226:	4621      	mov	r1, r4
 8005228:	4628      	mov	r0, r5
 800522a:	f000 ff8d 	bl	8006148 <_fflush_r>
 800522e:	b988      	cbnz	r0, 8005254 <__swbuf_r+0x90>
 8005230:	4638      	mov	r0, r7
 8005232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005234:	4b0a      	ldr	r3, [pc, #40]	; (8005260 <__swbuf_r+0x9c>)
 8005236:	429c      	cmp	r4, r3
 8005238:	d101      	bne.n	800523e <__swbuf_r+0x7a>
 800523a:	68ac      	ldr	r4, [r5, #8]
 800523c:	e7cf      	b.n	80051de <__swbuf_r+0x1a>
 800523e:	4b09      	ldr	r3, [pc, #36]	; (8005264 <__swbuf_r+0xa0>)
 8005240:	429c      	cmp	r4, r3
 8005242:	bf08      	it	eq
 8005244:	68ec      	ldreq	r4, [r5, #12]
 8005246:	e7ca      	b.n	80051de <__swbuf_r+0x1a>
 8005248:	4621      	mov	r1, r4
 800524a:	4628      	mov	r0, r5
 800524c:	f000 f80c 	bl	8005268 <__swsetup_r>
 8005250:	2800      	cmp	r0, #0
 8005252:	d0cb      	beq.n	80051ec <__swbuf_r+0x28>
 8005254:	f04f 37ff 	mov.w	r7, #4294967295
 8005258:	e7ea      	b.n	8005230 <__swbuf_r+0x6c>
 800525a:	bf00      	nop
 800525c:	08007420 	.word	0x08007420
 8005260:	08007440 	.word	0x08007440
 8005264:	08007400 	.word	0x08007400

08005268 <__swsetup_r>:
 8005268:	4b32      	ldr	r3, [pc, #200]	; (8005334 <__swsetup_r+0xcc>)
 800526a:	b570      	push	{r4, r5, r6, lr}
 800526c:	681d      	ldr	r5, [r3, #0]
 800526e:	4606      	mov	r6, r0
 8005270:	460c      	mov	r4, r1
 8005272:	b125      	cbz	r5, 800527e <__swsetup_r+0x16>
 8005274:	69ab      	ldr	r3, [r5, #24]
 8005276:	b913      	cbnz	r3, 800527e <__swsetup_r+0x16>
 8005278:	4628      	mov	r0, r5
 800527a:	f000 fff9 	bl	8006270 <__sinit>
 800527e:	4b2e      	ldr	r3, [pc, #184]	; (8005338 <__swsetup_r+0xd0>)
 8005280:	429c      	cmp	r4, r3
 8005282:	d10f      	bne.n	80052a4 <__swsetup_r+0x3c>
 8005284:	686c      	ldr	r4, [r5, #4]
 8005286:	89a3      	ldrh	r3, [r4, #12]
 8005288:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800528c:	0719      	lsls	r1, r3, #28
 800528e:	d42c      	bmi.n	80052ea <__swsetup_r+0x82>
 8005290:	06dd      	lsls	r5, r3, #27
 8005292:	d411      	bmi.n	80052b8 <__swsetup_r+0x50>
 8005294:	2309      	movs	r3, #9
 8005296:	6033      	str	r3, [r6, #0]
 8005298:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800529c:	81a3      	strh	r3, [r4, #12]
 800529e:	f04f 30ff 	mov.w	r0, #4294967295
 80052a2:	e03e      	b.n	8005322 <__swsetup_r+0xba>
 80052a4:	4b25      	ldr	r3, [pc, #148]	; (800533c <__swsetup_r+0xd4>)
 80052a6:	429c      	cmp	r4, r3
 80052a8:	d101      	bne.n	80052ae <__swsetup_r+0x46>
 80052aa:	68ac      	ldr	r4, [r5, #8]
 80052ac:	e7eb      	b.n	8005286 <__swsetup_r+0x1e>
 80052ae:	4b24      	ldr	r3, [pc, #144]	; (8005340 <__swsetup_r+0xd8>)
 80052b0:	429c      	cmp	r4, r3
 80052b2:	bf08      	it	eq
 80052b4:	68ec      	ldreq	r4, [r5, #12]
 80052b6:	e7e6      	b.n	8005286 <__swsetup_r+0x1e>
 80052b8:	0758      	lsls	r0, r3, #29
 80052ba:	d512      	bpl.n	80052e2 <__swsetup_r+0x7a>
 80052bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052be:	b141      	cbz	r1, 80052d2 <__swsetup_r+0x6a>
 80052c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052c4:	4299      	cmp	r1, r3
 80052c6:	d002      	beq.n	80052ce <__swsetup_r+0x66>
 80052c8:	4630      	mov	r0, r6
 80052ca:	f001 fc7d 	bl	8006bc8 <_free_r>
 80052ce:	2300      	movs	r3, #0
 80052d0:	6363      	str	r3, [r4, #52]	; 0x34
 80052d2:	89a3      	ldrh	r3, [r4, #12]
 80052d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80052d8:	81a3      	strh	r3, [r4, #12]
 80052da:	2300      	movs	r3, #0
 80052dc:	6063      	str	r3, [r4, #4]
 80052de:	6923      	ldr	r3, [r4, #16]
 80052e0:	6023      	str	r3, [r4, #0]
 80052e2:	89a3      	ldrh	r3, [r4, #12]
 80052e4:	f043 0308 	orr.w	r3, r3, #8
 80052e8:	81a3      	strh	r3, [r4, #12]
 80052ea:	6923      	ldr	r3, [r4, #16]
 80052ec:	b94b      	cbnz	r3, 8005302 <__swsetup_r+0x9a>
 80052ee:	89a3      	ldrh	r3, [r4, #12]
 80052f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80052f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052f8:	d003      	beq.n	8005302 <__swsetup_r+0x9a>
 80052fa:	4621      	mov	r1, r4
 80052fc:	4630      	mov	r0, r6
 80052fe:	f001 f881 	bl	8006404 <__smakebuf_r>
 8005302:	89a0      	ldrh	r0, [r4, #12]
 8005304:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005308:	f010 0301 	ands.w	r3, r0, #1
 800530c:	d00a      	beq.n	8005324 <__swsetup_r+0xbc>
 800530e:	2300      	movs	r3, #0
 8005310:	60a3      	str	r3, [r4, #8]
 8005312:	6963      	ldr	r3, [r4, #20]
 8005314:	425b      	negs	r3, r3
 8005316:	61a3      	str	r3, [r4, #24]
 8005318:	6923      	ldr	r3, [r4, #16]
 800531a:	b943      	cbnz	r3, 800532e <__swsetup_r+0xc6>
 800531c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005320:	d1ba      	bne.n	8005298 <__swsetup_r+0x30>
 8005322:	bd70      	pop	{r4, r5, r6, pc}
 8005324:	0781      	lsls	r1, r0, #30
 8005326:	bf58      	it	pl
 8005328:	6963      	ldrpl	r3, [r4, #20]
 800532a:	60a3      	str	r3, [r4, #8]
 800532c:	e7f4      	b.n	8005318 <__swsetup_r+0xb0>
 800532e:	2000      	movs	r0, #0
 8005330:	e7f7      	b.n	8005322 <__swsetup_r+0xba>
 8005332:	bf00      	nop
 8005334:	2000000c 	.word	0x2000000c
 8005338:	08007420 	.word	0x08007420
 800533c:	08007440 	.word	0x08007440
 8005340:	08007400 	.word	0x08007400

08005344 <quorem>:
 8005344:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005348:	6903      	ldr	r3, [r0, #16]
 800534a:	690c      	ldr	r4, [r1, #16]
 800534c:	42a3      	cmp	r3, r4
 800534e:	4607      	mov	r7, r0
 8005350:	f2c0 8081 	blt.w	8005456 <quorem+0x112>
 8005354:	3c01      	subs	r4, #1
 8005356:	f101 0814 	add.w	r8, r1, #20
 800535a:	f100 0514 	add.w	r5, r0, #20
 800535e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005362:	9301      	str	r3, [sp, #4]
 8005364:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005368:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800536c:	3301      	adds	r3, #1
 800536e:	429a      	cmp	r2, r3
 8005370:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005374:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005378:	fbb2 f6f3 	udiv	r6, r2, r3
 800537c:	d331      	bcc.n	80053e2 <quorem+0x9e>
 800537e:	f04f 0e00 	mov.w	lr, #0
 8005382:	4640      	mov	r0, r8
 8005384:	46ac      	mov	ip, r5
 8005386:	46f2      	mov	sl, lr
 8005388:	f850 2b04 	ldr.w	r2, [r0], #4
 800538c:	b293      	uxth	r3, r2
 800538e:	fb06 e303 	mla	r3, r6, r3, lr
 8005392:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005396:	b29b      	uxth	r3, r3
 8005398:	ebaa 0303 	sub.w	r3, sl, r3
 800539c:	f8dc a000 	ldr.w	sl, [ip]
 80053a0:	0c12      	lsrs	r2, r2, #16
 80053a2:	fa13 f38a 	uxtah	r3, r3, sl
 80053a6:	fb06 e202 	mla	r2, r6, r2, lr
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	9b00      	ldr	r3, [sp, #0]
 80053ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80053b2:	b292      	uxth	r2, r2
 80053b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80053b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80053c0:	4581      	cmp	r9, r0
 80053c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053c6:	f84c 3b04 	str.w	r3, [ip], #4
 80053ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80053ce:	d2db      	bcs.n	8005388 <quorem+0x44>
 80053d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80053d4:	b92b      	cbnz	r3, 80053e2 <quorem+0x9e>
 80053d6:	9b01      	ldr	r3, [sp, #4]
 80053d8:	3b04      	subs	r3, #4
 80053da:	429d      	cmp	r5, r3
 80053dc:	461a      	mov	r2, r3
 80053de:	d32e      	bcc.n	800543e <quorem+0xfa>
 80053e0:	613c      	str	r4, [r7, #16]
 80053e2:	4638      	mov	r0, r7
 80053e4:	f001 fad8 	bl	8006998 <__mcmp>
 80053e8:	2800      	cmp	r0, #0
 80053ea:	db24      	blt.n	8005436 <quorem+0xf2>
 80053ec:	3601      	adds	r6, #1
 80053ee:	4628      	mov	r0, r5
 80053f0:	f04f 0c00 	mov.w	ip, #0
 80053f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80053f8:	f8d0 e000 	ldr.w	lr, [r0]
 80053fc:	b293      	uxth	r3, r2
 80053fe:	ebac 0303 	sub.w	r3, ip, r3
 8005402:	0c12      	lsrs	r2, r2, #16
 8005404:	fa13 f38e 	uxtah	r3, r3, lr
 8005408:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800540c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005410:	b29b      	uxth	r3, r3
 8005412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005416:	45c1      	cmp	r9, r8
 8005418:	f840 3b04 	str.w	r3, [r0], #4
 800541c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005420:	d2e8      	bcs.n	80053f4 <quorem+0xb0>
 8005422:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005426:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800542a:	b922      	cbnz	r2, 8005436 <quorem+0xf2>
 800542c:	3b04      	subs	r3, #4
 800542e:	429d      	cmp	r5, r3
 8005430:	461a      	mov	r2, r3
 8005432:	d30a      	bcc.n	800544a <quorem+0x106>
 8005434:	613c      	str	r4, [r7, #16]
 8005436:	4630      	mov	r0, r6
 8005438:	b003      	add	sp, #12
 800543a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800543e:	6812      	ldr	r2, [r2, #0]
 8005440:	3b04      	subs	r3, #4
 8005442:	2a00      	cmp	r2, #0
 8005444:	d1cc      	bne.n	80053e0 <quorem+0x9c>
 8005446:	3c01      	subs	r4, #1
 8005448:	e7c7      	b.n	80053da <quorem+0x96>
 800544a:	6812      	ldr	r2, [r2, #0]
 800544c:	3b04      	subs	r3, #4
 800544e:	2a00      	cmp	r2, #0
 8005450:	d1f0      	bne.n	8005434 <quorem+0xf0>
 8005452:	3c01      	subs	r4, #1
 8005454:	e7eb      	b.n	800542e <quorem+0xea>
 8005456:	2000      	movs	r0, #0
 8005458:	e7ee      	b.n	8005438 <quorem+0xf4>
 800545a:	0000      	movs	r0, r0
 800545c:	0000      	movs	r0, r0
	...

08005460 <_dtoa_r>:
 8005460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005464:	ed2d 8b04 	vpush	{d8-d9}
 8005468:	ec57 6b10 	vmov	r6, r7, d0
 800546c:	b093      	sub	sp, #76	; 0x4c
 800546e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005470:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005474:	9106      	str	r1, [sp, #24]
 8005476:	ee10 aa10 	vmov	sl, s0
 800547a:	4604      	mov	r4, r0
 800547c:	9209      	str	r2, [sp, #36]	; 0x24
 800547e:	930c      	str	r3, [sp, #48]	; 0x30
 8005480:	46bb      	mov	fp, r7
 8005482:	b975      	cbnz	r5, 80054a2 <_dtoa_r+0x42>
 8005484:	2010      	movs	r0, #16
 8005486:	f000 fffd 	bl	8006484 <malloc>
 800548a:	4602      	mov	r2, r0
 800548c:	6260      	str	r0, [r4, #36]	; 0x24
 800548e:	b920      	cbnz	r0, 800549a <_dtoa_r+0x3a>
 8005490:	4ba7      	ldr	r3, [pc, #668]	; (8005730 <_dtoa_r+0x2d0>)
 8005492:	21ea      	movs	r1, #234	; 0xea
 8005494:	48a7      	ldr	r0, [pc, #668]	; (8005734 <_dtoa_r+0x2d4>)
 8005496:	f001 fe37 	bl	8007108 <__assert_func>
 800549a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800549e:	6005      	str	r5, [r0, #0]
 80054a0:	60c5      	str	r5, [r0, #12]
 80054a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054a4:	6819      	ldr	r1, [r3, #0]
 80054a6:	b151      	cbz	r1, 80054be <_dtoa_r+0x5e>
 80054a8:	685a      	ldr	r2, [r3, #4]
 80054aa:	604a      	str	r2, [r1, #4]
 80054ac:	2301      	movs	r3, #1
 80054ae:	4093      	lsls	r3, r2
 80054b0:	608b      	str	r3, [r1, #8]
 80054b2:	4620      	mov	r0, r4
 80054b4:	f001 f82e 	bl	8006514 <_Bfree>
 80054b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054ba:	2200      	movs	r2, #0
 80054bc:	601a      	str	r2, [r3, #0]
 80054be:	1e3b      	subs	r3, r7, #0
 80054c0:	bfaa      	itet	ge
 80054c2:	2300      	movge	r3, #0
 80054c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80054c8:	f8c8 3000 	strge.w	r3, [r8]
 80054cc:	4b9a      	ldr	r3, [pc, #616]	; (8005738 <_dtoa_r+0x2d8>)
 80054ce:	bfbc      	itt	lt
 80054d0:	2201      	movlt	r2, #1
 80054d2:	f8c8 2000 	strlt.w	r2, [r8]
 80054d6:	ea33 030b 	bics.w	r3, r3, fp
 80054da:	d11b      	bne.n	8005514 <_dtoa_r+0xb4>
 80054dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80054de:	f242 730f 	movw	r3, #9999	; 0x270f
 80054e2:	6013      	str	r3, [r2, #0]
 80054e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80054e8:	4333      	orrs	r3, r6
 80054ea:	f000 8592 	beq.w	8006012 <_dtoa_r+0xbb2>
 80054ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054f0:	b963      	cbnz	r3, 800550c <_dtoa_r+0xac>
 80054f2:	4b92      	ldr	r3, [pc, #584]	; (800573c <_dtoa_r+0x2dc>)
 80054f4:	e022      	b.n	800553c <_dtoa_r+0xdc>
 80054f6:	4b92      	ldr	r3, [pc, #584]	; (8005740 <_dtoa_r+0x2e0>)
 80054f8:	9301      	str	r3, [sp, #4]
 80054fa:	3308      	adds	r3, #8
 80054fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	9801      	ldr	r0, [sp, #4]
 8005502:	b013      	add	sp, #76	; 0x4c
 8005504:	ecbd 8b04 	vpop	{d8-d9}
 8005508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800550c:	4b8b      	ldr	r3, [pc, #556]	; (800573c <_dtoa_r+0x2dc>)
 800550e:	9301      	str	r3, [sp, #4]
 8005510:	3303      	adds	r3, #3
 8005512:	e7f3      	b.n	80054fc <_dtoa_r+0x9c>
 8005514:	2200      	movs	r2, #0
 8005516:	2300      	movs	r3, #0
 8005518:	4650      	mov	r0, sl
 800551a:	4659      	mov	r1, fp
 800551c:	f7fb fadc 	bl	8000ad8 <__aeabi_dcmpeq>
 8005520:	ec4b ab19 	vmov	d9, sl, fp
 8005524:	4680      	mov	r8, r0
 8005526:	b158      	cbz	r0, 8005540 <_dtoa_r+0xe0>
 8005528:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800552a:	2301      	movs	r3, #1
 800552c:	6013      	str	r3, [r2, #0]
 800552e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005530:	2b00      	cmp	r3, #0
 8005532:	f000 856b 	beq.w	800600c <_dtoa_r+0xbac>
 8005536:	4883      	ldr	r0, [pc, #524]	; (8005744 <_dtoa_r+0x2e4>)
 8005538:	6018      	str	r0, [r3, #0]
 800553a:	1e43      	subs	r3, r0, #1
 800553c:	9301      	str	r3, [sp, #4]
 800553e:	e7df      	b.n	8005500 <_dtoa_r+0xa0>
 8005540:	ec4b ab10 	vmov	d0, sl, fp
 8005544:	aa10      	add	r2, sp, #64	; 0x40
 8005546:	a911      	add	r1, sp, #68	; 0x44
 8005548:	4620      	mov	r0, r4
 800554a:	f001 facb 	bl	8006ae4 <__d2b>
 800554e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005552:	ee08 0a10 	vmov	s16, r0
 8005556:	2d00      	cmp	r5, #0
 8005558:	f000 8084 	beq.w	8005664 <_dtoa_r+0x204>
 800555c:	ee19 3a90 	vmov	r3, s19
 8005560:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005564:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005568:	4656      	mov	r6, sl
 800556a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800556e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005572:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005576:	4b74      	ldr	r3, [pc, #464]	; (8005748 <_dtoa_r+0x2e8>)
 8005578:	2200      	movs	r2, #0
 800557a:	4630      	mov	r0, r6
 800557c:	4639      	mov	r1, r7
 800557e:	f7fa fe8b 	bl	8000298 <__aeabi_dsub>
 8005582:	a365      	add	r3, pc, #404	; (adr r3, 8005718 <_dtoa_r+0x2b8>)
 8005584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005588:	f7fb f83e 	bl	8000608 <__aeabi_dmul>
 800558c:	a364      	add	r3, pc, #400	; (adr r3, 8005720 <_dtoa_r+0x2c0>)
 800558e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005592:	f7fa fe83 	bl	800029c <__adddf3>
 8005596:	4606      	mov	r6, r0
 8005598:	4628      	mov	r0, r5
 800559a:	460f      	mov	r7, r1
 800559c:	f7fa ffca 	bl	8000534 <__aeabi_i2d>
 80055a0:	a361      	add	r3, pc, #388	; (adr r3, 8005728 <_dtoa_r+0x2c8>)
 80055a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a6:	f7fb f82f 	bl	8000608 <__aeabi_dmul>
 80055aa:	4602      	mov	r2, r0
 80055ac:	460b      	mov	r3, r1
 80055ae:	4630      	mov	r0, r6
 80055b0:	4639      	mov	r1, r7
 80055b2:	f7fa fe73 	bl	800029c <__adddf3>
 80055b6:	4606      	mov	r6, r0
 80055b8:	460f      	mov	r7, r1
 80055ba:	f7fb fad5 	bl	8000b68 <__aeabi_d2iz>
 80055be:	2200      	movs	r2, #0
 80055c0:	9000      	str	r0, [sp, #0]
 80055c2:	2300      	movs	r3, #0
 80055c4:	4630      	mov	r0, r6
 80055c6:	4639      	mov	r1, r7
 80055c8:	f7fb fa90 	bl	8000aec <__aeabi_dcmplt>
 80055cc:	b150      	cbz	r0, 80055e4 <_dtoa_r+0x184>
 80055ce:	9800      	ldr	r0, [sp, #0]
 80055d0:	f7fa ffb0 	bl	8000534 <__aeabi_i2d>
 80055d4:	4632      	mov	r2, r6
 80055d6:	463b      	mov	r3, r7
 80055d8:	f7fb fa7e 	bl	8000ad8 <__aeabi_dcmpeq>
 80055dc:	b910      	cbnz	r0, 80055e4 <_dtoa_r+0x184>
 80055de:	9b00      	ldr	r3, [sp, #0]
 80055e0:	3b01      	subs	r3, #1
 80055e2:	9300      	str	r3, [sp, #0]
 80055e4:	9b00      	ldr	r3, [sp, #0]
 80055e6:	2b16      	cmp	r3, #22
 80055e8:	d85a      	bhi.n	80056a0 <_dtoa_r+0x240>
 80055ea:	9a00      	ldr	r2, [sp, #0]
 80055ec:	4b57      	ldr	r3, [pc, #348]	; (800574c <_dtoa_r+0x2ec>)
 80055ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	ec51 0b19 	vmov	r0, r1, d9
 80055fa:	f7fb fa77 	bl	8000aec <__aeabi_dcmplt>
 80055fe:	2800      	cmp	r0, #0
 8005600:	d050      	beq.n	80056a4 <_dtoa_r+0x244>
 8005602:	9b00      	ldr	r3, [sp, #0]
 8005604:	3b01      	subs	r3, #1
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	2300      	movs	r3, #0
 800560a:	930b      	str	r3, [sp, #44]	; 0x2c
 800560c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800560e:	1b5d      	subs	r5, r3, r5
 8005610:	1e6b      	subs	r3, r5, #1
 8005612:	9305      	str	r3, [sp, #20]
 8005614:	bf45      	ittet	mi
 8005616:	f1c5 0301 	rsbmi	r3, r5, #1
 800561a:	9304      	strmi	r3, [sp, #16]
 800561c:	2300      	movpl	r3, #0
 800561e:	2300      	movmi	r3, #0
 8005620:	bf4c      	ite	mi
 8005622:	9305      	strmi	r3, [sp, #20]
 8005624:	9304      	strpl	r3, [sp, #16]
 8005626:	9b00      	ldr	r3, [sp, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	db3d      	blt.n	80056a8 <_dtoa_r+0x248>
 800562c:	9b05      	ldr	r3, [sp, #20]
 800562e:	9a00      	ldr	r2, [sp, #0]
 8005630:	920a      	str	r2, [sp, #40]	; 0x28
 8005632:	4413      	add	r3, r2
 8005634:	9305      	str	r3, [sp, #20]
 8005636:	2300      	movs	r3, #0
 8005638:	9307      	str	r3, [sp, #28]
 800563a:	9b06      	ldr	r3, [sp, #24]
 800563c:	2b09      	cmp	r3, #9
 800563e:	f200 8089 	bhi.w	8005754 <_dtoa_r+0x2f4>
 8005642:	2b05      	cmp	r3, #5
 8005644:	bfc4      	itt	gt
 8005646:	3b04      	subgt	r3, #4
 8005648:	9306      	strgt	r3, [sp, #24]
 800564a:	9b06      	ldr	r3, [sp, #24]
 800564c:	f1a3 0302 	sub.w	r3, r3, #2
 8005650:	bfcc      	ite	gt
 8005652:	2500      	movgt	r5, #0
 8005654:	2501      	movle	r5, #1
 8005656:	2b03      	cmp	r3, #3
 8005658:	f200 8087 	bhi.w	800576a <_dtoa_r+0x30a>
 800565c:	e8df f003 	tbb	[pc, r3]
 8005660:	59383a2d 	.word	0x59383a2d
 8005664:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005668:	441d      	add	r5, r3
 800566a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800566e:	2b20      	cmp	r3, #32
 8005670:	bfc1      	itttt	gt
 8005672:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005676:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800567a:	fa0b f303 	lslgt.w	r3, fp, r3
 800567e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005682:	bfda      	itte	le
 8005684:	f1c3 0320 	rsble	r3, r3, #32
 8005688:	fa06 f003 	lslle.w	r0, r6, r3
 800568c:	4318      	orrgt	r0, r3
 800568e:	f7fa ff41 	bl	8000514 <__aeabi_ui2d>
 8005692:	2301      	movs	r3, #1
 8005694:	4606      	mov	r6, r0
 8005696:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800569a:	3d01      	subs	r5, #1
 800569c:	930e      	str	r3, [sp, #56]	; 0x38
 800569e:	e76a      	b.n	8005576 <_dtoa_r+0x116>
 80056a0:	2301      	movs	r3, #1
 80056a2:	e7b2      	b.n	800560a <_dtoa_r+0x1aa>
 80056a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80056a6:	e7b1      	b.n	800560c <_dtoa_r+0x1ac>
 80056a8:	9b04      	ldr	r3, [sp, #16]
 80056aa:	9a00      	ldr	r2, [sp, #0]
 80056ac:	1a9b      	subs	r3, r3, r2
 80056ae:	9304      	str	r3, [sp, #16]
 80056b0:	4253      	negs	r3, r2
 80056b2:	9307      	str	r3, [sp, #28]
 80056b4:	2300      	movs	r3, #0
 80056b6:	930a      	str	r3, [sp, #40]	; 0x28
 80056b8:	e7bf      	b.n	800563a <_dtoa_r+0x1da>
 80056ba:	2300      	movs	r3, #0
 80056bc:	9308      	str	r3, [sp, #32]
 80056be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	dc55      	bgt.n	8005770 <_dtoa_r+0x310>
 80056c4:	2301      	movs	r3, #1
 80056c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80056ca:	461a      	mov	r2, r3
 80056cc:	9209      	str	r2, [sp, #36]	; 0x24
 80056ce:	e00c      	b.n	80056ea <_dtoa_r+0x28a>
 80056d0:	2301      	movs	r3, #1
 80056d2:	e7f3      	b.n	80056bc <_dtoa_r+0x25c>
 80056d4:	2300      	movs	r3, #0
 80056d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056d8:	9308      	str	r3, [sp, #32]
 80056da:	9b00      	ldr	r3, [sp, #0]
 80056dc:	4413      	add	r3, r2
 80056de:	9302      	str	r3, [sp, #8]
 80056e0:	3301      	adds	r3, #1
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	9303      	str	r3, [sp, #12]
 80056e6:	bfb8      	it	lt
 80056e8:	2301      	movlt	r3, #1
 80056ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80056ec:	2200      	movs	r2, #0
 80056ee:	6042      	str	r2, [r0, #4]
 80056f0:	2204      	movs	r2, #4
 80056f2:	f102 0614 	add.w	r6, r2, #20
 80056f6:	429e      	cmp	r6, r3
 80056f8:	6841      	ldr	r1, [r0, #4]
 80056fa:	d93d      	bls.n	8005778 <_dtoa_r+0x318>
 80056fc:	4620      	mov	r0, r4
 80056fe:	f000 fec9 	bl	8006494 <_Balloc>
 8005702:	9001      	str	r0, [sp, #4]
 8005704:	2800      	cmp	r0, #0
 8005706:	d13b      	bne.n	8005780 <_dtoa_r+0x320>
 8005708:	4b11      	ldr	r3, [pc, #68]	; (8005750 <_dtoa_r+0x2f0>)
 800570a:	4602      	mov	r2, r0
 800570c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005710:	e6c0      	b.n	8005494 <_dtoa_r+0x34>
 8005712:	2301      	movs	r3, #1
 8005714:	e7df      	b.n	80056d6 <_dtoa_r+0x276>
 8005716:	bf00      	nop
 8005718:	636f4361 	.word	0x636f4361
 800571c:	3fd287a7 	.word	0x3fd287a7
 8005720:	8b60c8b3 	.word	0x8b60c8b3
 8005724:	3fc68a28 	.word	0x3fc68a28
 8005728:	509f79fb 	.word	0x509f79fb
 800572c:	3fd34413 	.word	0x3fd34413
 8005730:	0800737d 	.word	0x0800737d
 8005734:	08007394 	.word	0x08007394
 8005738:	7ff00000 	.word	0x7ff00000
 800573c:	08007379 	.word	0x08007379
 8005740:	08007370 	.word	0x08007370
 8005744:	0800734d 	.word	0x0800734d
 8005748:	3ff80000 	.word	0x3ff80000
 800574c:	080074e8 	.word	0x080074e8
 8005750:	080073ef 	.word	0x080073ef
 8005754:	2501      	movs	r5, #1
 8005756:	2300      	movs	r3, #0
 8005758:	9306      	str	r3, [sp, #24]
 800575a:	9508      	str	r5, [sp, #32]
 800575c:	f04f 33ff 	mov.w	r3, #4294967295
 8005760:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005764:	2200      	movs	r2, #0
 8005766:	2312      	movs	r3, #18
 8005768:	e7b0      	b.n	80056cc <_dtoa_r+0x26c>
 800576a:	2301      	movs	r3, #1
 800576c:	9308      	str	r3, [sp, #32]
 800576e:	e7f5      	b.n	800575c <_dtoa_r+0x2fc>
 8005770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005772:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005776:	e7b8      	b.n	80056ea <_dtoa_r+0x28a>
 8005778:	3101      	adds	r1, #1
 800577a:	6041      	str	r1, [r0, #4]
 800577c:	0052      	lsls	r2, r2, #1
 800577e:	e7b8      	b.n	80056f2 <_dtoa_r+0x292>
 8005780:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005782:	9a01      	ldr	r2, [sp, #4]
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	9b03      	ldr	r3, [sp, #12]
 8005788:	2b0e      	cmp	r3, #14
 800578a:	f200 809d 	bhi.w	80058c8 <_dtoa_r+0x468>
 800578e:	2d00      	cmp	r5, #0
 8005790:	f000 809a 	beq.w	80058c8 <_dtoa_r+0x468>
 8005794:	9b00      	ldr	r3, [sp, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	dd32      	ble.n	8005800 <_dtoa_r+0x3a0>
 800579a:	4ab7      	ldr	r2, [pc, #732]	; (8005a78 <_dtoa_r+0x618>)
 800579c:	f003 030f 	and.w	r3, r3, #15
 80057a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80057a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80057a8:	9b00      	ldr	r3, [sp, #0]
 80057aa:	05d8      	lsls	r0, r3, #23
 80057ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 80057b0:	d516      	bpl.n	80057e0 <_dtoa_r+0x380>
 80057b2:	4bb2      	ldr	r3, [pc, #712]	; (8005a7c <_dtoa_r+0x61c>)
 80057b4:	ec51 0b19 	vmov	r0, r1, d9
 80057b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80057bc:	f7fb f84e 	bl	800085c <__aeabi_ddiv>
 80057c0:	f007 070f 	and.w	r7, r7, #15
 80057c4:	4682      	mov	sl, r0
 80057c6:	468b      	mov	fp, r1
 80057c8:	2503      	movs	r5, #3
 80057ca:	4eac      	ldr	r6, [pc, #688]	; (8005a7c <_dtoa_r+0x61c>)
 80057cc:	b957      	cbnz	r7, 80057e4 <_dtoa_r+0x384>
 80057ce:	4642      	mov	r2, r8
 80057d0:	464b      	mov	r3, r9
 80057d2:	4650      	mov	r0, sl
 80057d4:	4659      	mov	r1, fp
 80057d6:	f7fb f841 	bl	800085c <__aeabi_ddiv>
 80057da:	4682      	mov	sl, r0
 80057dc:	468b      	mov	fp, r1
 80057de:	e028      	b.n	8005832 <_dtoa_r+0x3d2>
 80057e0:	2502      	movs	r5, #2
 80057e2:	e7f2      	b.n	80057ca <_dtoa_r+0x36a>
 80057e4:	07f9      	lsls	r1, r7, #31
 80057e6:	d508      	bpl.n	80057fa <_dtoa_r+0x39a>
 80057e8:	4640      	mov	r0, r8
 80057ea:	4649      	mov	r1, r9
 80057ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80057f0:	f7fa ff0a 	bl	8000608 <__aeabi_dmul>
 80057f4:	3501      	adds	r5, #1
 80057f6:	4680      	mov	r8, r0
 80057f8:	4689      	mov	r9, r1
 80057fa:	107f      	asrs	r7, r7, #1
 80057fc:	3608      	adds	r6, #8
 80057fe:	e7e5      	b.n	80057cc <_dtoa_r+0x36c>
 8005800:	f000 809b 	beq.w	800593a <_dtoa_r+0x4da>
 8005804:	9b00      	ldr	r3, [sp, #0]
 8005806:	4f9d      	ldr	r7, [pc, #628]	; (8005a7c <_dtoa_r+0x61c>)
 8005808:	425e      	negs	r6, r3
 800580a:	4b9b      	ldr	r3, [pc, #620]	; (8005a78 <_dtoa_r+0x618>)
 800580c:	f006 020f 	and.w	r2, r6, #15
 8005810:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005818:	ec51 0b19 	vmov	r0, r1, d9
 800581c:	f7fa fef4 	bl	8000608 <__aeabi_dmul>
 8005820:	1136      	asrs	r6, r6, #4
 8005822:	4682      	mov	sl, r0
 8005824:	468b      	mov	fp, r1
 8005826:	2300      	movs	r3, #0
 8005828:	2502      	movs	r5, #2
 800582a:	2e00      	cmp	r6, #0
 800582c:	d17a      	bne.n	8005924 <_dtoa_r+0x4c4>
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1d3      	bne.n	80057da <_dtoa_r+0x37a>
 8005832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 8082 	beq.w	800593e <_dtoa_r+0x4de>
 800583a:	4b91      	ldr	r3, [pc, #580]	; (8005a80 <_dtoa_r+0x620>)
 800583c:	2200      	movs	r2, #0
 800583e:	4650      	mov	r0, sl
 8005840:	4659      	mov	r1, fp
 8005842:	f7fb f953 	bl	8000aec <__aeabi_dcmplt>
 8005846:	2800      	cmp	r0, #0
 8005848:	d079      	beq.n	800593e <_dtoa_r+0x4de>
 800584a:	9b03      	ldr	r3, [sp, #12]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d076      	beq.n	800593e <_dtoa_r+0x4de>
 8005850:	9b02      	ldr	r3, [sp, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	dd36      	ble.n	80058c4 <_dtoa_r+0x464>
 8005856:	9b00      	ldr	r3, [sp, #0]
 8005858:	4650      	mov	r0, sl
 800585a:	4659      	mov	r1, fp
 800585c:	1e5f      	subs	r7, r3, #1
 800585e:	2200      	movs	r2, #0
 8005860:	4b88      	ldr	r3, [pc, #544]	; (8005a84 <_dtoa_r+0x624>)
 8005862:	f7fa fed1 	bl	8000608 <__aeabi_dmul>
 8005866:	9e02      	ldr	r6, [sp, #8]
 8005868:	4682      	mov	sl, r0
 800586a:	468b      	mov	fp, r1
 800586c:	3501      	adds	r5, #1
 800586e:	4628      	mov	r0, r5
 8005870:	f7fa fe60 	bl	8000534 <__aeabi_i2d>
 8005874:	4652      	mov	r2, sl
 8005876:	465b      	mov	r3, fp
 8005878:	f7fa fec6 	bl	8000608 <__aeabi_dmul>
 800587c:	4b82      	ldr	r3, [pc, #520]	; (8005a88 <_dtoa_r+0x628>)
 800587e:	2200      	movs	r2, #0
 8005880:	f7fa fd0c 	bl	800029c <__adddf3>
 8005884:	46d0      	mov	r8, sl
 8005886:	46d9      	mov	r9, fp
 8005888:	4682      	mov	sl, r0
 800588a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800588e:	2e00      	cmp	r6, #0
 8005890:	d158      	bne.n	8005944 <_dtoa_r+0x4e4>
 8005892:	4b7e      	ldr	r3, [pc, #504]	; (8005a8c <_dtoa_r+0x62c>)
 8005894:	2200      	movs	r2, #0
 8005896:	4640      	mov	r0, r8
 8005898:	4649      	mov	r1, r9
 800589a:	f7fa fcfd 	bl	8000298 <__aeabi_dsub>
 800589e:	4652      	mov	r2, sl
 80058a0:	465b      	mov	r3, fp
 80058a2:	4680      	mov	r8, r0
 80058a4:	4689      	mov	r9, r1
 80058a6:	f7fb f93f 	bl	8000b28 <__aeabi_dcmpgt>
 80058aa:	2800      	cmp	r0, #0
 80058ac:	f040 8295 	bne.w	8005dda <_dtoa_r+0x97a>
 80058b0:	4652      	mov	r2, sl
 80058b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80058b6:	4640      	mov	r0, r8
 80058b8:	4649      	mov	r1, r9
 80058ba:	f7fb f917 	bl	8000aec <__aeabi_dcmplt>
 80058be:	2800      	cmp	r0, #0
 80058c0:	f040 8289 	bne.w	8005dd6 <_dtoa_r+0x976>
 80058c4:	ec5b ab19 	vmov	sl, fp, d9
 80058c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f2c0 8148 	blt.w	8005b60 <_dtoa_r+0x700>
 80058d0:	9a00      	ldr	r2, [sp, #0]
 80058d2:	2a0e      	cmp	r2, #14
 80058d4:	f300 8144 	bgt.w	8005b60 <_dtoa_r+0x700>
 80058d8:	4b67      	ldr	r3, [pc, #412]	; (8005a78 <_dtoa_r+0x618>)
 80058da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80058e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f280 80d5 	bge.w	8005a94 <_dtoa_r+0x634>
 80058ea:	9b03      	ldr	r3, [sp, #12]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f300 80d1 	bgt.w	8005a94 <_dtoa_r+0x634>
 80058f2:	f040 826f 	bne.w	8005dd4 <_dtoa_r+0x974>
 80058f6:	4b65      	ldr	r3, [pc, #404]	; (8005a8c <_dtoa_r+0x62c>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	4640      	mov	r0, r8
 80058fc:	4649      	mov	r1, r9
 80058fe:	f7fa fe83 	bl	8000608 <__aeabi_dmul>
 8005902:	4652      	mov	r2, sl
 8005904:	465b      	mov	r3, fp
 8005906:	f7fb f905 	bl	8000b14 <__aeabi_dcmpge>
 800590a:	9e03      	ldr	r6, [sp, #12]
 800590c:	4637      	mov	r7, r6
 800590e:	2800      	cmp	r0, #0
 8005910:	f040 8245 	bne.w	8005d9e <_dtoa_r+0x93e>
 8005914:	9d01      	ldr	r5, [sp, #4]
 8005916:	2331      	movs	r3, #49	; 0x31
 8005918:	f805 3b01 	strb.w	r3, [r5], #1
 800591c:	9b00      	ldr	r3, [sp, #0]
 800591e:	3301      	adds	r3, #1
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	e240      	b.n	8005da6 <_dtoa_r+0x946>
 8005924:	07f2      	lsls	r2, r6, #31
 8005926:	d505      	bpl.n	8005934 <_dtoa_r+0x4d4>
 8005928:	e9d7 2300 	ldrd	r2, r3, [r7]
 800592c:	f7fa fe6c 	bl	8000608 <__aeabi_dmul>
 8005930:	3501      	adds	r5, #1
 8005932:	2301      	movs	r3, #1
 8005934:	1076      	asrs	r6, r6, #1
 8005936:	3708      	adds	r7, #8
 8005938:	e777      	b.n	800582a <_dtoa_r+0x3ca>
 800593a:	2502      	movs	r5, #2
 800593c:	e779      	b.n	8005832 <_dtoa_r+0x3d2>
 800593e:	9f00      	ldr	r7, [sp, #0]
 8005940:	9e03      	ldr	r6, [sp, #12]
 8005942:	e794      	b.n	800586e <_dtoa_r+0x40e>
 8005944:	9901      	ldr	r1, [sp, #4]
 8005946:	4b4c      	ldr	r3, [pc, #304]	; (8005a78 <_dtoa_r+0x618>)
 8005948:	4431      	add	r1, r6
 800594a:	910d      	str	r1, [sp, #52]	; 0x34
 800594c:	9908      	ldr	r1, [sp, #32]
 800594e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005952:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005956:	2900      	cmp	r1, #0
 8005958:	d043      	beq.n	80059e2 <_dtoa_r+0x582>
 800595a:	494d      	ldr	r1, [pc, #308]	; (8005a90 <_dtoa_r+0x630>)
 800595c:	2000      	movs	r0, #0
 800595e:	f7fa ff7d 	bl	800085c <__aeabi_ddiv>
 8005962:	4652      	mov	r2, sl
 8005964:	465b      	mov	r3, fp
 8005966:	f7fa fc97 	bl	8000298 <__aeabi_dsub>
 800596a:	9d01      	ldr	r5, [sp, #4]
 800596c:	4682      	mov	sl, r0
 800596e:	468b      	mov	fp, r1
 8005970:	4649      	mov	r1, r9
 8005972:	4640      	mov	r0, r8
 8005974:	f7fb f8f8 	bl	8000b68 <__aeabi_d2iz>
 8005978:	4606      	mov	r6, r0
 800597a:	f7fa fddb 	bl	8000534 <__aeabi_i2d>
 800597e:	4602      	mov	r2, r0
 8005980:	460b      	mov	r3, r1
 8005982:	4640      	mov	r0, r8
 8005984:	4649      	mov	r1, r9
 8005986:	f7fa fc87 	bl	8000298 <__aeabi_dsub>
 800598a:	3630      	adds	r6, #48	; 0x30
 800598c:	f805 6b01 	strb.w	r6, [r5], #1
 8005990:	4652      	mov	r2, sl
 8005992:	465b      	mov	r3, fp
 8005994:	4680      	mov	r8, r0
 8005996:	4689      	mov	r9, r1
 8005998:	f7fb f8a8 	bl	8000aec <__aeabi_dcmplt>
 800599c:	2800      	cmp	r0, #0
 800599e:	d163      	bne.n	8005a68 <_dtoa_r+0x608>
 80059a0:	4642      	mov	r2, r8
 80059a2:	464b      	mov	r3, r9
 80059a4:	4936      	ldr	r1, [pc, #216]	; (8005a80 <_dtoa_r+0x620>)
 80059a6:	2000      	movs	r0, #0
 80059a8:	f7fa fc76 	bl	8000298 <__aeabi_dsub>
 80059ac:	4652      	mov	r2, sl
 80059ae:	465b      	mov	r3, fp
 80059b0:	f7fb f89c 	bl	8000aec <__aeabi_dcmplt>
 80059b4:	2800      	cmp	r0, #0
 80059b6:	f040 80b5 	bne.w	8005b24 <_dtoa_r+0x6c4>
 80059ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059bc:	429d      	cmp	r5, r3
 80059be:	d081      	beq.n	80058c4 <_dtoa_r+0x464>
 80059c0:	4b30      	ldr	r3, [pc, #192]	; (8005a84 <_dtoa_r+0x624>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	4650      	mov	r0, sl
 80059c6:	4659      	mov	r1, fp
 80059c8:	f7fa fe1e 	bl	8000608 <__aeabi_dmul>
 80059cc:	4b2d      	ldr	r3, [pc, #180]	; (8005a84 <_dtoa_r+0x624>)
 80059ce:	4682      	mov	sl, r0
 80059d0:	468b      	mov	fp, r1
 80059d2:	4640      	mov	r0, r8
 80059d4:	4649      	mov	r1, r9
 80059d6:	2200      	movs	r2, #0
 80059d8:	f7fa fe16 	bl	8000608 <__aeabi_dmul>
 80059dc:	4680      	mov	r8, r0
 80059de:	4689      	mov	r9, r1
 80059e0:	e7c6      	b.n	8005970 <_dtoa_r+0x510>
 80059e2:	4650      	mov	r0, sl
 80059e4:	4659      	mov	r1, fp
 80059e6:	f7fa fe0f 	bl	8000608 <__aeabi_dmul>
 80059ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059ec:	9d01      	ldr	r5, [sp, #4]
 80059ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80059f0:	4682      	mov	sl, r0
 80059f2:	468b      	mov	fp, r1
 80059f4:	4649      	mov	r1, r9
 80059f6:	4640      	mov	r0, r8
 80059f8:	f7fb f8b6 	bl	8000b68 <__aeabi_d2iz>
 80059fc:	4606      	mov	r6, r0
 80059fe:	f7fa fd99 	bl	8000534 <__aeabi_i2d>
 8005a02:	3630      	adds	r6, #48	; 0x30
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	4640      	mov	r0, r8
 8005a0a:	4649      	mov	r1, r9
 8005a0c:	f7fa fc44 	bl	8000298 <__aeabi_dsub>
 8005a10:	f805 6b01 	strb.w	r6, [r5], #1
 8005a14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a16:	429d      	cmp	r5, r3
 8005a18:	4680      	mov	r8, r0
 8005a1a:	4689      	mov	r9, r1
 8005a1c:	f04f 0200 	mov.w	r2, #0
 8005a20:	d124      	bne.n	8005a6c <_dtoa_r+0x60c>
 8005a22:	4b1b      	ldr	r3, [pc, #108]	; (8005a90 <_dtoa_r+0x630>)
 8005a24:	4650      	mov	r0, sl
 8005a26:	4659      	mov	r1, fp
 8005a28:	f7fa fc38 	bl	800029c <__adddf3>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	460b      	mov	r3, r1
 8005a30:	4640      	mov	r0, r8
 8005a32:	4649      	mov	r1, r9
 8005a34:	f7fb f878 	bl	8000b28 <__aeabi_dcmpgt>
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	d173      	bne.n	8005b24 <_dtoa_r+0x6c4>
 8005a3c:	4652      	mov	r2, sl
 8005a3e:	465b      	mov	r3, fp
 8005a40:	4913      	ldr	r1, [pc, #76]	; (8005a90 <_dtoa_r+0x630>)
 8005a42:	2000      	movs	r0, #0
 8005a44:	f7fa fc28 	bl	8000298 <__aeabi_dsub>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	4640      	mov	r0, r8
 8005a4e:	4649      	mov	r1, r9
 8005a50:	f7fb f84c 	bl	8000aec <__aeabi_dcmplt>
 8005a54:	2800      	cmp	r0, #0
 8005a56:	f43f af35 	beq.w	80058c4 <_dtoa_r+0x464>
 8005a5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005a5c:	1e6b      	subs	r3, r5, #1
 8005a5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005a64:	2b30      	cmp	r3, #48	; 0x30
 8005a66:	d0f8      	beq.n	8005a5a <_dtoa_r+0x5fa>
 8005a68:	9700      	str	r7, [sp, #0]
 8005a6a:	e049      	b.n	8005b00 <_dtoa_r+0x6a0>
 8005a6c:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <_dtoa_r+0x624>)
 8005a6e:	f7fa fdcb 	bl	8000608 <__aeabi_dmul>
 8005a72:	4680      	mov	r8, r0
 8005a74:	4689      	mov	r9, r1
 8005a76:	e7bd      	b.n	80059f4 <_dtoa_r+0x594>
 8005a78:	080074e8 	.word	0x080074e8
 8005a7c:	080074c0 	.word	0x080074c0
 8005a80:	3ff00000 	.word	0x3ff00000
 8005a84:	40240000 	.word	0x40240000
 8005a88:	401c0000 	.word	0x401c0000
 8005a8c:	40140000 	.word	0x40140000
 8005a90:	3fe00000 	.word	0x3fe00000
 8005a94:	9d01      	ldr	r5, [sp, #4]
 8005a96:	4656      	mov	r6, sl
 8005a98:	465f      	mov	r7, fp
 8005a9a:	4642      	mov	r2, r8
 8005a9c:	464b      	mov	r3, r9
 8005a9e:	4630      	mov	r0, r6
 8005aa0:	4639      	mov	r1, r7
 8005aa2:	f7fa fedb 	bl	800085c <__aeabi_ddiv>
 8005aa6:	f7fb f85f 	bl	8000b68 <__aeabi_d2iz>
 8005aaa:	4682      	mov	sl, r0
 8005aac:	f7fa fd42 	bl	8000534 <__aeabi_i2d>
 8005ab0:	4642      	mov	r2, r8
 8005ab2:	464b      	mov	r3, r9
 8005ab4:	f7fa fda8 	bl	8000608 <__aeabi_dmul>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	460b      	mov	r3, r1
 8005abc:	4630      	mov	r0, r6
 8005abe:	4639      	mov	r1, r7
 8005ac0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005ac4:	f7fa fbe8 	bl	8000298 <__aeabi_dsub>
 8005ac8:	f805 6b01 	strb.w	r6, [r5], #1
 8005acc:	9e01      	ldr	r6, [sp, #4]
 8005ace:	9f03      	ldr	r7, [sp, #12]
 8005ad0:	1bae      	subs	r6, r5, r6
 8005ad2:	42b7      	cmp	r7, r6
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	d135      	bne.n	8005b46 <_dtoa_r+0x6e6>
 8005ada:	f7fa fbdf 	bl	800029c <__adddf3>
 8005ade:	4642      	mov	r2, r8
 8005ae0:	464b      	mov	r3, r9
 8005ae2:	4606      	mov	r6, r0
 8005ae4:	460f      	mov	r7, r1
 8005ae6:	f7fb f81f 	bl	8000b28 <__aeabi_dcmpgt>
 8005aea:	b9d0      	cbnz	r0, 8005b22 <_dtoa_r+0x6c2>
 8005aec:	4642      	mov	r2, r8
 8005aee:	464b      	mov	r3, r9
 8005af0:	4630      	mov	r0, r6
 8005af2:	4639      	mov	r1, r7
 8005af4:	f7fa fff0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005af8:	b110      	cbz	r0, 8005b00 <_dtoa_r+0x6a0>
 8005afa:	f01a 0f01 	tst.w	sl, #1
 8005afe:	d110      	bne.n	8005b22 <_dtoa_r+0x6c2>
 8005b00:	4620      	mov	r0, r4
 8005b02:	ee18 1a10 	vmov	r1, s16
 8005b06:	f000 fd05 	bl	8006514 <_Bfree>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	9800      	ldr	r0, [sp, #0]
 8005b0e:	702b      	strb	r3, [r5, #0]
 8005b10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b12:	3001      	adds	r0, #1
 8005b14:	6018      	str	r0, [r3, #0]
 8005b16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f43f acf1 	beq.w	8005500 <_dtoa_r+0xa0>
 8005b1e:	601d      	str	r5, [r3, #0]
 8005b20:	e4ee      	b.n	8005500 <_dtoa_r+0xa0>
 8005b22:	9f00      	ldr	r7, [sp, #0]
 8005b24:	462b      	mov	r3, r5
 8005b26:	461d      	mov	r5, r3
 8005b28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b2c:	2a39      	cmp	r2, #57	; 0x39
 8005b2e:	d106      	bne.n	8005b3e <_dtoa_r+0x6de>
 8005b30:	9a01      	ldr	r2, [sp, #4]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d1f7      	bne.n	8005b26 <_dtoa_r+0x6c6>
 8005b36:	9901      	ldr	r1, [sp, #4]
 8005b38:	2230      	movs	r2, #48	; 0x30
 8005b3a:	3701      	adds	r7, #1
 8005b3c:	700a      	strb	r2, [r1, #0]
 8005b3e:	781a      	ldrb	r2, [r3, #0]
 8005b40:	3201      	adds	r2, #1
 8005b42:	701a      	strb	r2, [r3, #0]
 8005b44:	e790      	b.n	8005a68 <_dtoa_r+0x608>
 8005b46:	4ba6      	ldr	r3, [pc, #664]	; (8005de0 <_dtoa_r+0x980>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f7fa fd5d 	bl	8000608 <__aeabi_dmul>
 8005b4e:	2200      	movs	r2, #0
 8005b50:	2300      	movs	r3, #0
 8005b52:	4606      	mov	r6, r0
 8005b54:	460f      	mov	r7, r1
 8005b56:	f7fa ffbf 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	d09d      	beq.n	8005a9a <_dtoa_r+0x63a>
 8005b5e:	e7cf      	b.n	8005b00 <_dtoa_r+0x6a0>
 8005b60:	9a08      	ldr	r2, [sp, #32]
 8005b62:	2a00      	cmp	r2, #0
 8005b64:	f000 80d7 	beq.w	8005d16 <_dtoa_r+0x8b6>
 8005b68:	9a06      	ldr	r2, [sp, #24]
 8005b6a:	2a01      	cmp	r2, #1
 8005b6c:	f300 80ba 	bgt.w	8005ce4 <_dtoa_r+0x884>
 8005b70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b72:	2a00      	cmp	r2, #0
 8005b74:	f000 80b2 	beq.w	8005cdc <_dtoa_r+0x87c>
 8005b78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005b7c:	9e07      	ldr	r6, [sp, #28]
 8005b7e:	9d04      	ldr	r5, [sp, #16]
 8005b80:	9a04      	ldr	r2, [sp, #16]
 8005b82:	441a      	add	r2, r3
 8005b84:	9204      	str	r2, [sp, #16]
 8005b86:	9a05      	ldr	r2, [sp, #20]
 8005b88:	2101      	movs	r1, #1
 8005b8a:	441a      	add	r2, r3
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	9205      	str	r2, [sp, #20]
 8005b90:	f000 fd78 	bl	8006684 <__i2b>
 8005b94:	4607      	mov	r7, r0
 8005b96:	2d00      	cmp	r5, #0
 8005b98:	dd0c      	ble.n	8005bb4 <_dtoa_r+0x754>
 8005b9a:	9b05      	ldr	r3, [sp, #20]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	dd09      	ble.n	8005bb4 <_dtoa_r+0x754>
 8005ba0:	42ab      	cmp	r3, r5
 8005ba2:	9a04      	ldr	r2, [sp, #16]
 8005ba4:	bfa8      	it	ge
 8005ba6:	462b      	movge	r3, r5
 8005ba8:	1ad2      	subs	r2, r2, r3
 8005baa:	9204      	str	r2, [sp, #16]
 8005bac:	9a05      	ldr	r2, [sp, #20]
 8005bae:	1aed      	subs	r5, r5, r3
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	9305      	str	r3, [sp, #20]
 8005bb4:	9b07      	ldr	r3, [sp, #28]
 8005bb6:	b31b      	cbz	r3, 8005c00 <_dtoa_r+0x7a0>
 8005bb8:	9b08      	ldr	r3, [sp, #32]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f000 80af 	beq.w	8005d1e <_dtoa_r+0x8be>
 8005bc0:	2e00      	cmp	r6, #0
 8005bc2:	dd13      	ble.n	8005bec <_dtoa_r+0x78c>
 8005bc4:	4639      	mov	r1, r7
 8005bc6:	4632      	mov	r2, r6
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f000 fe1b 	bl	8006804 <__pow5mult>
 8005bce:	ee18 2a10 	vmov	r2, s16
 8005bd2:	4601      	mov	r1, r0
 8005bd4:	4607      	mov	r7, r0
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	f000 fd6a 	bl	80066b0 <__multiply>
 8005bdc:	ee18 1a10 	vmov	r1, s16
 8005be0:	4680      	mov	r8, r0
 8005be2:	4620      	mov	r0, r4
 8005be4:	f000 fc96 	bl	8006514 <_Bfree>
 8005be8:	ee08 8a10 	vmov	s16, r8
 8005bec:	9b07      	ldr	r3, [sp, #28]
 8005bee:	1b9a      	subs	r2, r3, r6
 8005bf0:	d006      	beq.n	8005c00 <_dtoa_r+0x7a0>
 8005bf2:	ee18 1a10 	vmov	r1, s16
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	f000 fe04 	bl	8006804 <__pow5mult>
 8005bfc:	ee08 0a10 	vmov	s16, r0
 8005c00:	2101      	movs	r1, #1
 8005c02:	4620      	mov	r0, r4
 8005c04:	f000 fd3e 	bl	8006684 <__i2b>
 8005c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	4606      	mov	r6, r0
 8005c0e:	f340 8088 	ble.w	8005d22 <_dtoa_r+0x8c2>
 8005c12:	461a      	mov	r2, r3
 8005c14:	4601      	mov	r1, r0
 8005c16:	4620      	mov	r0, r4
 8005c18:	f000 fdf4 	bl	8006804 <__pow5mult>
 8005c1c:	9b06      	ldr	r3, [sp, #24]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	4606      	mov	r6, r0
 8005c22:	f340 8081 	ble.w	8005d28 <_dtoa_r+0x8c8>
 8005c26:	f04f 0800 	mov.w	r8, #0
 8005c2a:	6933      	ldr	r3, [r6, #16]
 8005c2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005c30:	6918      	ldr	r0, [r3, #16]
 8005c32:	f000 fcd7 	bl	80065e4 <__hi0bits>
 8005c36:	f1c0 0020 	rsb	r0, r0, #32
 8005c3a:	9b05      	ldr	r3, [sp, #20]
 8005c3c:	4418      	add	r0, r3
 8005c3e:	f010 001f 	ands.w	r0, r0, #31
 8005c42:	f000 8092 	beq.w	8005d6a <_dtoa_r+0x90a>
 8005c46:	f1c0 0320 	rsb	r3, r0, #32
 8005c4a:	2b04      	cmp	r3, #4
 8005c4c:	f340 808a 	ble.w	8005d64 <_dtoa_r+0x904>
 8005c50:	f1c0 001c 	rsb	r0, r0, #28
 8005c54:	9b04      	ldr	r3, [sp, #16]
 8005c56:	4403      	add	r3, r0
 8005c58:	9304      	str	r3, [sp, #16]
 8005c5a:	9b05      	ldr	r3, [sp, #20]
 8005c5c:	4403      	add	r3, r0
 8005c5e:	4405      	add	r5, r0
 8005c60:	9305      	str	r3, [sp, #20]
 8005c62:	9b04      	ldr	r3, [sp, #16]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	dd07      	ble.n	8005c78 <_dtoa_r+0x818>
 8005c68:	ee18 1a10 	vmov	r1, s16
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	4620      	mov	r0, r4
 8005c70:	f000 fe22 	bl	80068b8 <__lshift>
 8005c74:	ee08 0a10 	vmov	s16, r0
 8005c78:	9b05      	ldr	r3, [sp, #20]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	dd05      	ble.n	8005c8a <_dtoa_r+0x82a>
 8005c7e:	4631      	mov	r1, r6
 8005c80:	461a      	mov	r2, r3
 8005c82:	4620      	mov	r0, r4
 8005c84:	f000 fe18 	bl	80068b8 <__lshift>
 8005c88:	4606      	mov	r6, r0
 8005c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d06e      	beq.n	8005d6e <_dtoa_r+0x90e>
 8005c90:	ee18 0a10 	vmov	r0, s16
 8005c94:	4631      	mov	r1, r6
 8005c96:	f000 fe7f 	bl	8006998 <__mcmp>
 8005c9a:	2800      	cmp	r0, #0
 8005c9c:	da67      	bge.n	8005d6e <_dtoa_r+0x90e>
 8005c9e:	9b00      	ldr	r3, [sp, #0]
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	ee18 1a10 	vmov	r1, s16
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	220a      	movs	r2, #10
 8005caa:	2300      	movs	r3, #0
 8005cac:	4620      	mov	r0, r4
 8005cae:	f000 fc53 	bl	8006558 <__multadd>
 8005cb2:	9b08      	ldr	r3, [sp, #32]
 8005cb4:	ee08 0a10 	vmov	s16, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 81b1 	beq.w	8006020 <_dtoa_r+0xbc0>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	4639      	mov	r1, r7
 8005cc2:	220a      	movs	r2, #10
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	f000 fc47 	bl	8006558 <__multadd>
 8005cca:	9b02      	ldr	r3, [sp, #8]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	4607      	mov	r7, r0
 8005cd0:	f300 808e 	bgt.w	8005df0 <_dtoa_r+0x990>
 8005cd4:	9b06      	ldr	r3, [sp, #24]
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	dc51      	bgt.n	8005d7e <_dtoa_r+0x91e>
 8005cda:	e089      	b.n	8005df0 <_dtoa_r+0x990>
 8005cdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005cde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005ce2:	e74b      	b.n	8005b7c <_dtoa_r+0x71c>
 8005ce4:	9b03      	ldr	r3, [sp, #12]
 8005ce6:	1e5e      	subs	r6, r3, #1
 8005ce8:	9b07      	ldr	r3, [sp, #28]
 8005cea:	42b3      	cmp	r3, r6
 8005cec:	bfbf      	itttt	lt
 8005cee:	9b07      	ldrlt	r3, [sp, #28]
 8005cf0:	9607      	strlt	r6, [sp, #28]
 8005cf2:	1af2      	sublt	r2, r6, r3
 8005cf4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005cf6:	bfb6      	itet	lt
 8005cf8:	189b      	addlt	r3, r3, r2
 8005cfa:	1b9e      	subge	r6, r3, r6
 8005cfc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005cfe:	9b03      	ldr	r3, [sp, #12]
 8005d00:	bfb8      	it	lt
 8005d02:	2600      	movlt	r6, #0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	bfb7      	itett	lt
 8005d08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005d0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005d10:	1a9d      	sublt	r5, r3, r2
 8005d12:	2300      	movlt	r3, #0
 8005d14:	e734      	b.n	8005b80 <_dtoa_r+0x720>
 8005d16:	9e07      	ldr	r6, [sp, #28]
 8005d18:	9d04      	ldr	r5, [sp, #16]
 8005d1a:	9f08      	ldr	r7, [sp, #32]
 8005d1c:	e73b      	b.n	8005b96 <_dtoa_r+0x736>
 8005d1e:	9a07      	ldr	r2, [sp, #28]
 8005d20:	e767      	b.n	8005bf2 <_dtoa_r+0x792>
 8005d22:	9b06      	ldr	r3, [sp, #24]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	dc18      	bgt.n	8005d5a <_dtoa_r+0x8fa>
 8005d28:	f1ba 0f00 	cmp.w	sl, #0
 8005d2c:	d115      	bne.n	8005d5a <_dtoa_r+0x8fa>
 8005d2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005d32:	b993      	cbnz	r3, 8005d5a <_dtoa_r+0x8fa>
 8005d34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005d38:	0d1b      	lsrs	r3, r3, #20
 8005d3a:	051b      	lsls	r3, r3, #20
 8005d3c:	b183      	cbz	r3, 8005d60 <_dtoa_r+0x900>
 8005d3e:	9b04      	ldr	r3, [sp, #16]
 8005d40:	3301      	adds	r3, #1
 8005d42:	9304      	str	r3, [sp, #16]
 8005d44:	9b05      	ldr	r3, [sp, #20]
 8005d46:	3301      	adds	r3, #1
 8005d48:	9305      	str	r3, [sp, #20]
 8005d4a:	f04f 0801 	mov.w	r8, #1
 8005d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f47f af6a 	bne.w	8005c2a <_dtoa_r+0x7ca>
 8005d56:	2001      	movs	r0, #1
 8005d58:	e76f      	b.n	8005c3a <_dtoa_r+0x7da>
 8005d5a:	f04f 0800 	mov.w	r8, #0
 8005d5e:	e7f6      	b.n	8005d4e <_dtoa_r+0x8ee>
 8005d60:	4698      	mov	r8, r3
 8005d62:	e7f4      	b.n	8005d4e <_dtoa_r+0x8ee>
 8005d64:	f43f af7d 	beq.w	8005c62 <_dtoa_r+0x802>
 8005d68:	4618      	mov	r0, r3
 8005d6a:	301c      	adds	r0, #28
 8005d6c:	e772      	b.n	8005c54 <_dtoa_r+0x7f4>
 8005d6e:	9b03      	ldr	r3, [sp, #12]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	dc37      	bgt.n	8005de4 <_dtoa_r+0x984>
 8005d74:	9b06      	ldr	r3, [sp, #24]
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	dd34      	ble.n	8005de4 <_dtoa_r+0x984>
 8005d7a:	9b03      	ldr	r3, [sp, #12]
 8005d7c:	9302      	str	r3, [sp, #8]
 8005d7e:	9b02      	ldr	r3, [sp, #8]
 8005d80:	b96b      	cbnz	r3, 8005d9e <_dtoa_r+0x93e>
 8005d82:	4631      	mov	r1, r6
 8005d84:	2205      	movs	r2, #5
 8005d86:	4620      	mov	r0, r4
 8005d88:	f000 fbe6 	bl	8006558 <__multadd>
 8005d8c:	4601      	mov	r1, r0
 8005d8e:	4606      	mov	r6, r0
 8005d90:	ee18 0a10 	vmov	r0, s16
 8005d94:	f000 fe00 	bl	8006998 <__mcmp>
 8005d98:	2800      	cmp	r0, #0
 8005d9a:	f73f adbb 	bgt.w	8005914 <_dtoa_r+0x4b4>
 8005d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005da0:	9d01      	ldr	r5, [sp, #4]
 8005da2:	43db      	mvns	r3, r3
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	f04f 0800 	mov.w	r8, #0
 8005daa:	4631      	mov	r1, r6
 8005dac:	4620      	mov	r0, r4
 8005dae:	f000 fbb1 	bl	8006514 <_Bfree>
 8005db2:	2f00      	cmp	r7, #0
 8005db4:	f43f aea4 	beq.w	8005b00 <_dtoa_r+0x6a0>
 8005db8:	f1b8 0f00 	cmp.w	r8, #0
 8005dbc:	d005      	beq.n	8005dca <_dtoa_r+0x96a>
 8005dbe:	45b8      	cmp	r8, r7
 8005dc0:	d003      	beq.n	8005dca <_dtoa_r+0x96a>
 8005dc2:	4641      	mov	r1, r8
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	f000 fba5 	bl	8006514 <_Bfree>
 8005dca:	4639      	mov	r1, r7
 8005dcc:	4620      	mov	r0, r4
 8005dce:	f000 fba1 	bl	8006514 <_Bfree>
 8005dd2:	e695      	b.n	8005b00 <_dtoa_r+0x6a0>
 8005dd4:	2600      	movs	r6, #0
 8005dd6:	4637      	mov	r7, r6
 8005dd8:	e7e1      	b.n	8005d9e <_dtoa_r+0x93e>
 8005dda:	9700      	str	r7, [sp, #0]
 8005ddc:	4637      	mov	r7, r6
 8005dde:	e599      	b.n	8005914 <_dtoa_r+0x4b4>
 8005de0:	40240000 	.word	0x40240000
 8005de4:	9b08      	ldr	r3, [sp, #32]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 80ca 	beq.w	8005f80 <_dtoa_r+0xb20>
 8005dec:	9b03      	ldr	r3, [sp, #12]
 8005dee:	9302      	str	r3, [sp, #8]
 8005df0:	2d00      	cmp	r5, #0
 8005df2:	dd05      	ble.n	8005e00 <_dtoa_r+0x9a0>
 8005df4:	4639      	mov	r1, r7
 8005df6:	462a      	mov	r2, r5
 8005df8:	4620      	mov	r0, r4
 8005dfa:	f000 fd5d 	bl	80068b8 <__lshift>
 8005dfe:	4607      	mov	r7, r0
 8005e00:	f1b8 0f00 	cmp.w	r8, #0
 8005e04:	d05b      	beq.n	8005ebe <_dtoa_r+0xa5e>
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	4620      	mov	r0, r4
 8005e0a:	f000 fb43 	bl	8006494 <_Balloc>
 8005e0e:	4605      	mov	r5, r0
 8005e10:	b928      	cbnz	r0, 8005e1e <_dtoa_r+0x9be>
 8005e12:	4b87      	ldr	r3, [pc, #540]	; (8006030 <_dtoa_r+0xbd0>)
 8005e14:	4602      	mov	r2, r0
 8005e16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005e1a:	f7ff bb3b 	b.w	8005494 <_dtoa_r+0x34>
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	3202      	adds	r2, #2
 8005e22:	0092      	lsls	r2, r2, #2
 8005e24:	f107 010c 	add.w	r1, r7, #12
 8005e28:	300c      	adds	r0, #12
 8005e2a:	f7fe fd4b 	bl	80048c4 <memcpy>
 8005e2e:	2201      	movs	r2, #1
 8005e30:	4629      	mov	r1, r5
 8005e32:	4620      	mov	r0, r4
 8005e34:	f000 fd40 	bl	80068b8 <__lshift>
 8005e38:	9b01      	ldr	r3, [sp, #4]
 8005e3a:	f103 0901 	add.w	r9, r3, #1
 8005e3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005e42:	4413      	add	r3, r2
 8005e44:	9305      	str	r3, [sp, #20]
 8005e46:	f00a 0301 	and.w	r3, sl, #1
 8005e4a:	46b8      	mov	r8, r7
 8005e4c:	9304      	str	r3, [sp, #16]
 8005e4e:	4607      	mov	r7, r0
 8005e50:	4631      	mov	r1, r6
 8005e52:	ee18 0a10 	vmov	r0, s16
 8005e56:	f7ff fa75 	bl	8005344 <quorem>
 8005e5a:	4641      	mov	r1, r8
 8005e5c:	9002      	str	r0, [sp, #8]
 8005e5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005e62:	ee18 0a10 	vmov	r0, s16
 8005e66:	f000 fd97 	bl	8006998 <__mcmp>
 8005e6a:	463a      	mov	r2, r7
 8005e6c:	9003      	str	r0, [sp, #12]
 8005e6e:	4631      	mov	r1, r6
 8005e70:	4620      	mov	r0, r4
 8005e72:	f000 fdad 	bl	80069d0 <__mdiff>
 8005e76:	68c2      	ldr	r2, [r0, #12]
 8005e78:	f109 3bff 	add.w	fp, r9, #4294967295
 8005e7c:	4605      	mov	r5, r0
 8005e7e:	bb02      	cbnz	r2, 8005ec2 <_dtoa_r+0xa62>
 8005e80:	4601      	mov	r1, r0
 8005e82:	ee18 0a10 	vmov	r0, s16
 8005e86:	f000 fd87 	bl	8006998 <__mcmp>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	4629      	mov	r1, r5
 8005e8e:	4620      	mov	r0, r4
 8005e90:	9207      	str	r2, [sp, #28]
 8005e92:	f000 fb3f 	bl	8006514 <_Bfree>
 8005e96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005e9a:	ea43 0102 	orr.w	r1, r3, r2
 8005e9e:	9b04      	ldr	r3, [sp, #16]
 8005ea0:	430b      	orrs	r3, r1
 8005ea2:	464d      	mov	r5, r9
 8005ea4:	d10f      	bne.n	8005ec6 <_dtoa_r+0xa66>
 8005ea6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005eaa:	d02a      	beq.n	8005f02 <_dtoa_r+0xaa2>
 8005eac:	9b03      	ldr	r3, [sp, #12]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	dd02      	ble.n	8005eb8 <_dtoa_r+0xa58>
 8005eb2:	9b02      	ldr	r3, [sp, #8]
 8005eb4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005eb8:	f88b a000 	strb.w	sl, [fp]
 8005ebc:	e775      	b.n	8005daa <_dtoa_r+0x94a>
 8005ebe:	4638      	mov	r0, r7
 8005ec0:	e7ba      	b.n	8005e38 <_dtoa_r+0x9d8>
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	e7e2      	b.n	8005e8c <_dtoa_r+0xa2c>
 8005ec6:	9b03      	ldr	r3, [sp, #12]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	db04      	blt.n	8005ed6 <_dtoa_r+0xa76>
 8005ecc:	9906      	ldr	r1, [sp, #24]
 8005ece:	430b      	orrs	r3, r1
 8005ed0:	9904      	ldr	r1, [sp, #16]
 8005ed2:	430b      	orrs	r3, r1
 8005ed4:	d122      	bne.n	8005f1c <_dtoa_r+0xabc>
 8005ed6:	2a00      	cmp	r2, #0
 8005ed8:	ddee      	ble.n	8005eb8 <_dtoa_r+0xa58>
 8005eda:	ee18 1a10 	vmov	r1, s16
 8005ede:	2201      	movs	r2, #1
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	f000 fce9 	bl	80068b8 <__lshift>
 8005ee6:	4631      	mov	r1, r6
 8005ee8:	ee08 0a10 	vmov	s16, r0
 8005eec:	f000 fd54 	bl	8006998 <__mcmp>
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	dc03      	bgt.n	8005efc <_dtoa_r+0xa9c>
 8005ef4:	d1e0      	bne.n	8005eb8 <_dtoa_r+0xa58>
 8005ef6:	f01a 0f01 	tst.w	sl, #1
 8005efa:	d0dd      	beq.n	8005eb8 <_dtoa_r+0xa58>
 8005efc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005f00:	d1d7      	bne.n	8005eb2 <_dtoa_r+0xa52>
 8005f02:	2339      	movs	r3, #57	; 0x39
 8005f04:	f88b 3000 	strb.w	r3, [fp]
 8005f08:	462b      	mov	r3, r5
 8005f0a:	461d      	mov	r5, r3
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005f12:	2a39      	cmp	r2, #57	; 0x39
 8005f14:	d071      	beq.n	8005ffa <_dtoa_r+0xb9a>
 8005f16:	3201      	adds	r2, #1
 8005f18:	701a      	strb	r2, [r3, #0]
 8005f1a:	e746      	b.n	8005daa <_dtoa_r+0x94a>
 8005f1c:	2a00      	cmp	r2, #0
 8005f1e:	dd07      	ble.n	8005f30 <_dtoa_r+0xad0>
 8005f20:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005f24:	d0ed      	beq.n	8005f02 <_dtoa_r+0xaa2>
 8005f26:	f10a 0301 	add.w	r3, sl, #1
 8005f2a:	f88b 3000 	strb.w	r3, [fp]
 8005f2e:	e73c      	b.n	8005daa <_dtoa_r+0x94a>
 8005f30:	9b05      	ldr	r3, [sp, #20]
 8005f32:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005f36:	4599      	cmp	r9, r3
 8005f38:	d047      	beq.n	8005fca <_dtoa_r+0xb6a>
 8005f3a:	ee18 1a10 	vmov	r1, s16
 8005f3e:	2300      	movs	r3, #0
 8005f40:	220a      	movs	r2, #10
 8005f42:	4620      	mov	r0, r4
 8005f44:	f000 fb08 	bl	8006558 <__multadd>
 8005f48:	45b8      	cmp	r8, r7
 8005f4a:	ee08 0a10 	vmov	s16, r0
 8005f4e:	f04f 0300 	mov.w	r3, #0
 8005f52:	f04f 020a 	mov.w	r2, #10
 8005f56:	4641      	mov	r1, r8
 8005f58:	4620      	mov	r0, r4
 8005f5a:	d106      	bne.n	8005f6a <_dtoa_r+0xb0a>
 8005f5c:	f000 fafc 	bl	8006558 <__multadd>
 8005f60:	4680      	mov	r8, r0
 8005f62:	4607      	mov	r7, r0
 8005f64:	f109 0901 	add.w	r9, r9, #1
 8005f68:	e772      	b.n	8005e50 <_dtoa_r+0x9f0>
 8005f6a:	f000 faf5 	bl	8006558 <__multadd>
 8005f6e:	4639      	mov	r1, r7
 8005f70:	4680      	mov	r8, r0
 8005f72:	2300      	movs	r3, #0
 8005f74:	220a      	movs	r2, #10
 8005f76:	4620      	mov	r0, r4
 8005f78:	f000 faee 	bl	8006558 <__multadd>
 8005f7c:	4607      	mov	r7, r0
 8005f7e:	e7f1      	b.n	8005f64 <_dtoa_r+0xb04>
 8005f80:	9b03      	ldr	r3, [sp, #12]
 8005f82:	9302      	str	r3, [sp, #8]
 8005f84:	9d01      	ldr	r5, [sp, #4]
 8005f86:	ee18 0a10 	vmov	r0, s16
 8005f8a:	4631      	mov	r1, r6
 8005f8c:	f7ff f9da 	bl	8005344 <quorem>
 8005f90:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005f94:	9b01      	ldr	r3, [sp, #4]
 8005f96:	f805 ab01 	strb.w	sl, [r5], #1
 8005f9a:	1aea      	subs	r2, r5, r3
 8005f9c:	9b02      	ldr	r3, [sp, #8]
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	dd09      	ble.n	8005fb6 <_dtoa_r+0xb56>
 8005fa2:	ee18 1a10 	vmov	r1, s16
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	220a      	movs	r2, #10
 8005faa:	4620      	mov	r0, r4
 8005fac:	f000 fad4 	bl	8006558 <__multadd>
 8005fb0:	ee08 0a10 	vmov	s16, r0
 8005fb4:	e7e7      	b.n	8005f86 <_dtoa_r+0xb26>
 8005fb6:	9b02      	ldr	r3, [sp, #8]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	bfc8      	it	gt
 8005fbc:	461d      	movgt	r5, r3
 8005fbe:	9b01      	ldr	r3, [sp, #4]
 8005fc0:	bfd8      	it	le
 8005fc2:	2501      	movle	r5, #1
 8005fc4:	441d      	add	r5, r3
 8005fc6:	f04f 0800 	mov.w	r8, #0
 8005fca:	ee18 1a10 	vmov	r1, s16
 8005fce:	2201      	movs	r2, #1
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f000 fc71 	bl	80068b8 <__lshift>
 8005fd6:	4631      	mov	r1, r6
 8005fd8:	ee08 0a10 	vmov	s16, r0
 8005fdc:	f000 fcdc 	bl	8006998 <__mcmp>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	dc91      	bgt.n	8005f08 <_dtoa_r+0xaa8>
 8005fe4:	d102      	bne.n	8005fec <_dtoa_r+0xb8c>
 8005fe6:	f01a 0f01 	tst.w	sl, #1
 8005fea:	d18d      	bne.n	8005f08 <_dtoa_r+0xaa8>
 8005fec:	462b      	mov	r3, r5
 8005fee:	461d      	mov	r5, r3
 8005ff0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ff4:	2a30      	cmp	r2, #48	; 0x30
 8005ff6:	d0fa      	beq.n	8005fee <_dtoa_r+0xb8e>
 8005ff8:	e6d7      	b.n	8005daa <_dtoa_r+0x94a>
 8005ffa:	9a01      	ldr	r2, [sp, #4]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d184      	bne.n	8005f0a <_dtoa_r+0xaaa>
 8006000:	9b00      	ldr	r3, [sp, #0]
 8006002:	3301      	adds	r3, #1
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	2331      	movs	r3, #49	; 0x31
 8006008:	7013      	strb	r3, [r2, #0]
 800600a:	e6ce      	b.n	8005daa <_dtoa_r+0x94a>
 800600c:	4b09      	ldr	r3, [pc, #36]	; (8006034 <_dtoa_r+0xbd4>)
 800600e:	f7ff ba95 	b.w	800553c <_dtoa_r+0xdc>
 8006012:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006014:	2b00      	cmp	r3, #0
 8006016:	f47f aa6e 	bne.w	80054f6 <_dtoa_r+0x96>
 800601a:	4b07      	ldr	r3, [pc, #28]	; (8006038 <_dtoa_r+0xbd8>)
 800601c:	f7ff ba8e 	b.w	800553c <_dtoa_r+0xdc>
 8006020:	9b02      	ldr	r3, [sp, #8]
 8006022:	2b00      	cmp	r3, #0
 8006024:	dcae      	bgt.n	8005f84 <_dtoa_r+0xb24>
 8006026:	9b06      	ldr	r3, [sp, #24]
 8006028:	2b02      	cmp	r3, #2
 800602a:	f73f aea8 	bgt.w	8005d7e <_dtoa_r+0x91e>
 800602e:	e7a9      	b.n	8005f84 <_dtoa_r+0xb24>
 8006030:	080073ef 	.word	0x080073ef
 8006034:	0800734c 	.word	0x0800734c
 8006038:	08007370 	.word	0x08007370

0800603c <__sflush_r>:
 800603c:	898a      	ldrh	r2, [r1, #12]
 800603e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006042:	4605      	mov	r5, r0
 8006044:	0710      	lsls	r0, r2, #28
 8006046:	460c      	mov	r4, r1
 8006048:	d458      	bmi.n	80060fc <__sflush_r+0xc0>
 800604a:	684b      	ldr	r3, [r1, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	dc05      	bgt.n	800605c <__sflush_r+0x20>
 8006050:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006052:	2b00      	cmp	r3, #0
 8006054:	dc02      	bgt.n	800605c <__sflush_r+0x20>
 8006056:	2000      	movs	r0, #0
 8006058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800605c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800605e:	2e00      	cmp	r6, #0
 8006060:	d0f9      	beq.n	8006056 <__sflush_r+0x1a>
 8006062:	2300      	movs	r3, #0
 8006064:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006068:	682f      	ldr	r7, [r5, #0]
 800606a:	602b      	str	r3, [r5, #0]
 800606c:	d032      	beq.n	80060d4 <__sflush_r+0x98>
 800606e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006070:	89a3      	ldrh	r3, [r4, #12]
 8006072:	075a      	lsls	r2, r3, #29
 8006074:	d505      	bpl.n	8006082 <__sflush_r+0x46>
 8006076:	6863      	ldr	r3, [r4, #4]
 8006078:	1ac0      	subs	r0, r0, r3
 800607a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800607c:	b10b      	cbz	r3, 8006082 <__sflush_r+0x46>
 800607e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006080:	1ac0      	subs	r0, r0, r3
 8006082:	2300      	movs	r3, #0
 8006084:	4602      	mov	r2, r0
 8006086:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006088:	6a21      	ldr	r1, [r4, #32]
 800608a:	4628      	mov	r0, r5
 800608c:	47b0      	blx	r6
 800608e:	1c43      	adds	r3, r0, #1
 8006090:	89a3      	ldrh	r3, [r4, #12]
 8006092:	d106      	bne.n	80060a2 <__sflush_r+0x66>
 8006094:	6829      	ldr	r1, [r5, #0]
 8006096:	291d      	cmp	r1, #29
 8006098:	d82c      	bhi.n	80060f4 <__sflush_r+0xb8>
 800609a:	4a2a      	ldr	r2, [pc, #168]	; (8006144 <__sflush_r+0x108>)
 800609c:	40ca      	lsrs	r2, r1
 800609e:	07d6      	lsls	r6, r2, #31
 80060a0:	d528      	bpl.n	80060f4 <__sflush_r+0xb8>
 80060a2:	2200      	movs	r2, #0
 80060a4:	6062      	str	r2, [r4, #4]
 80060a6:	04d9      	lsls	r1, r3, #19
 80060a8:	6922      	ldr	r2, [r4, #16]
 80060aa:	6022      	str	r2, [r4, #0]
 80060ac:	d504      	bpl.n	80060b8 <__sflush_r+0x7c>
 80060ae:	1c42      	adds	r2, r0, #1
 80060b0:	d101      	bne.n	80060b6 <__sflush_r+0x7a>
 80060b2:	682b      	ldr	r3, [r5, #0]
 80060b4:	b903      	cbnz	r3, 80060b8 <__sflush_r+0x7c>
 80060b6:	6560      	str	r0, [r4, #84]	; 0x54
 80060b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060ba:	602f      	str	r7, [r5, #0]
 80060bc:	2900      	cmp	r1, #0
 80060be:	d0ca      	beq.n	8006056 <__sflush_r+0x1a>
 80060c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060c4:	4299      	cmp	r1, r3
 80060c6:	d002      	beq.n	80060ce <__sflush_r+0x92>
 80060c8:	4628      	mov	r0, r5
 80060ca:	f000 fd7d 	bl	8006bc8 <_free_r>
 80060ce:	2000      	movs	r0, #0
 80060d0:	6360      	str	r0, [r4, #52]	; 0x34
 80060d2:	e7c1      	b.n	8006058 <__sflush_r+0x1c>
 80060d4:	6a21      	ldr	r1, [r4, #32]
 80060d6:	2301      	movs	r3, #1
 80060d8:	4628      	mov	r0, r5
 80060da:	47b0      	blx	r6
 80060dc:	1c41      	adds	r1, r0, #1
 80060de:	d1c7      	bne.n	8006070 <__sflush_r+0x34>
 80060e0:	682b      	ldr	r3, [r5, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d0c4      	beq.n	8006070 <__sflush_r+0x34>
 80060e6:	2b1d      	cmp	r3, #29
 80060e8:	d001      	beq.n	80060ee <__sflush_r+0xb2>
 80060ea:	2b16      	cmp	r3, #22
 80060ec:	d101      	bne.n	80060f2 <__sflush_r+0xb6>
 80060ee:	602f      	str	r7, [r5, #0]
 80060f0:	e7b1      	b.n	8006056 <__sflush_r+0x1a>
 80060f2:	89a3      	ldrh	r3, [r4, #12]
 80060f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060f8:	81a3      	strh	r3, [r4, #12]
 80060fa:	e7ad      	b.n	8006058 <__sflush_r+0x1c>
 80060fc:	690f      	ldr	r7, [r1, #16]
 80060fe:	2f00      	cmp	r7, #0
 8006100:	d0a9      	beq.n	8006056 <__sflush_r+0x1a>
 8006102:	0793      	lsls	r3, r2, #30
 8006104:	680e      	ldr	r6, [r1, #0]
 8006106:	bf08      	it	eq
 8006108:	694b      	ldreq	r3, [r1, #20]
 800610a:	600f      	str	r7, [r1, #0]
 800610c:	bf18      	it	ne
 800610e:	2300      	movne	r3, #0
 8006110:	eba6 0807 	sub.w	r8, r6, r7
 8006114:	608b      	str	r3, [r1, #8]
 8006116:	f1b8 0f00 	cmp.w	r8, #0
 800611a:	dd9c      	ble.n	8006056 <__sflush_r+0x1a>
 800611c:	6a21      	ldr	r1, [r4, #32]
 800611e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006120:	4643      	mov	r3, r8
 8006122:	463a      	mov	r2, r7
 8006124:	4628      	mov	r0, r5
 8006126:	47b0      	blx	r6
 8006128:	2800      	cmp	r0, #0
 800612a:	dc06      	bgt.n	800613a <__sflush_r+0xfe>
 800612c:	89a3      	ldrh	r3, [r4, #12]
 800612e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006132:	81a3      	strh	r3, [r4, #12]
 8006134:	f04f 30ff 	mov.w	r0, #4294967295
 8006138:	e78e      	b.n	8006058 <__sflush_r+0x1c>
 800613a:	4407      	add	r7, r0
 800613c:	eba8 0800 	sub.w	r8, r8, r0
 8006140:	e7e9      	b.n	8006116 <__sflush_r+0xda>
 8006142:	bf00      	nop
 8006144:	20400001 	.word	0x20400001

08006148 <_fflush_r>:
 8006148:	b538      	push	{r3, r4, r5, lr}
 800614a:	690b      	ldr	r3, [r1, #16]
 800614c:	4605      	mov	r5, r0
 800614e:	460c      	mov	r4, r1
 8006150:	b913      	cbnz	r3, 8006158 <_fflush_r+0x10>
 8006152:	2500      	movs	r5, #0
 8006154:	4628      	mov	r0, r5
 8006156:	bd38      	pop	{r3, r4, r5, pc}
 8006158:	b118      	cbz	r0, 8006162 <_fflush_r+0x1a>
 800615a:	6983      	ldr	r3, [r0, #24]
 800615c:	b90b      	cbnz	r3, 8006162 <_fflush_r+0x1a>
 800615e:	f000 f887 	bl	8006270 <__sinit>
 8006162:	4b14      	ldr	r3, [pc, #80]	; (80061b4 <_fflush_r+0x6c>)
 8006164:	429c      	cmp	r4, r3
 8006166:	d11b      	bne.n	80061a0 <_fflush_r+0x58>
 8006168:	686c      	ldr	r4, [r5, #4]
 800616a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d0ef      	beq.n	8006152 <_fflush_r+0xa>
 8006172:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006174:	07d0      	lsls	r0, r2, #31
 8006176:	d404      	bmi.n	8006182 <_fflush_r+0x3a>
 8006178:	0599      	lsls	r1, r3, #22
 800617a:	d402      	bmi.n	8006182 <_fflush_r+0x3a>
 800617c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800617e:	f000 f91a 	bl	80063b6 <__retarget_lock_acquire_recursive>
 8006182:	4628      	mov	r0, r5
 8006184:	4621      	mov	r1, r4
 8006186:	f7ff ff59 	bl	800603c <__sflush_r>
 800618a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800618c:	07da      	lsls	r2, r3, #31
 800618e:	4605      	mov	r5, r0
 8006190:	d4e0      	bmi.n	8006154 <_fflush_r+0xc>
 8006192:	89a3      	ldrh	r3, [r4, #12]
 8006194:	059b      	lsls	r3, r3, #22
 8006196:	d4dd      	bmi.n	8006154 <_fflush_r+0xc>
 8006198:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800619a:	f000 f90d 	bl	80063b8 <__retarget_lock_release_recursive>
 800619e:	e7d9      	b.n	8006154 <_fflush_r+0xc>
 80061a0:	4b05      	ldr	r3, [pc, #20]	; (80061b8 <_fflush_r+0x70>)
 80061a2:	429c      	cmp	r4, r3
 80061a4:	d101      	bne.n	80061aa <_fflush_r+0x62>
 80061a6:	68ac      	ldr	r4, [r5, #8]
 80061a8:	e7df      	b.n	800616a <_fflush_r+0x22>
 80061aa:	4b04      	ldr	r3, [pc, #16]	; (80061bc <_fflush_r+0x74>)
 80061ac:	429c      	cmp	r4, r3
 80061ae:	bf08      	it	eq
 80061b0:	68ec      	ldreq	r4, [r5, #12]
 80061b2:	e7da      	b.n	800616a <_fflush_r+0x22>
 80061b4:	08007420 	.word	0x08007420
 80061b8:	08007440 	.word	0x08007440
 80061bc:	08007400 	.word	0x08007400

080061c0 <std>:
 80061c0:	2300      	movs	r3, #0
 80061c2:	b510      	push	{r4, lr}
 80061c4:	4604      	mov	r4, r0
 80061c6:	e9c0 3300 	strd	r3, r3, [r0]
 80061ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061ce:	6083      	str	r3, [r0, #8]
 80061d0:	8181      	strh	r1, [r0, #12]
 80061d2:	6643      	str	r3, [r0, #100]	; 0x64
 80061d4:	81c2      	strh	r2, [r0, #14]
 80061d6:	6183      	str	r3, [r0, #24]
 80061d8:	4619      	mov	r1, r3
 80061da:	2208      	movs	r2, #8
 80061dc:	305c      	adds	r0, #92	; 0x5c
 80061de:	f7fe fb7f 	bl	80048e0 <memset>
 80061e2:	4b05      	ldr	r3, [pc, #20]	; (80061f8 <std+0x38>)
 80061e4:	6263      	str	r3, [r4, #36]	; 0x24
 80061e6:	4b05      	ldr	r3, [pc, #20]	; (80061fc <std+0x3c>)
 80061e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80061ea:	4b05      	ldr	r3, [pc, #20]	; (8006200 <std+0x40>)
 80061ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061ee:	4b05      	ldr	r3, [pc, #20]	; (8006204 <std+0x44>)
 80061f0:	6224      	str	r4, [r4, #32]
 80061f2:	6323      	str	r3, [r4, #48]	; 0x30
 80061f4:	bd10      	pop	{r4, pc}
 80061f6:	bf00      	nop
 80061f8:	0800705d 	.word	0x0800705d
 80061fc:	0800707f 	.word	0x0800707f
 8006200:	080070b7 	.word	0x080070b7
 8006204:	080070db 	.word	0x080070db

08006208 <_cleanup_r>:
 8006208:	4901      	ldr	r1, [pc, #4]	; (8006210 <_cleanup_r+0x8>)
 800620a:	f000 b8af 	b.w	800636c <_fwalk_reent>
 800620e:	bf00      	nop
 8006210:	08006149 	.word	0x08006149

08006214 <__sfmoreglue>:
 8006214:	b570      	push	{r4, r5, r6, lr}
 8006216:	2268      	movs	r2, #104	; 0x68
 8006218:	1e4d      	subs	r5, r1, #1
 800621a:	4355      	muls	r5, r2
 800621c:	460e      	mov	r6, r1
 800621e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006222:	f000 fd3d 	bl	8006ca0 <_malloc_r>
 8006226:	4604      	mov	r4, r0
 8006228:	b140      	cbz	r0, 800623c <__sfmoreglue+0x28>
 800622a:	2100      	movs	r1, #0
 800622c:	e9c0 1600 	strd	r1, r6, [r0]
 8006230:	300c      	adds	r0, #12
 8006232:	60a0      	str	r0, [r4, #8]
 8006234:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006238:	f7fe fb52 	bl	80048e0 <memset>
 800623c:	4620      	mov	r0, r4
 800623e:	bd70      	pop	{r4, r5, r6, pc}

08006240 <__sfp_lock_acquire>:
 8006240:	4801      	ldr	r0, [pc, #4]	; (8006248 <__sfp_lock_acquire+0x8>)
 8006242:	f000 b8b8 	b.w	80063b6 <__retarget_lock_acquire_recursive>
 8006246:	bf00      	nop
 8006248:	20000415 	.word	0x20000415

0800624c <__sfp_lock_release>:
 800624c:	4801      	ldr	r0, [pc, #4]	; (8006254 <__sfp_lock_release+0x8>)
 800624e:	f000 b8b3 	b.w	80063b8 <__retarget_lock_release_recursive>
 8006252:	bf00      	nop
 8006254:	20000415 	.word	0x20000415

08006258 <__sinit_lock_acquire>:
 8006258:	4801      	ldr	r0, [pc, #4]	; (8006260 <__sinit_lock_acquire+0x8>)
 800625a:	f000 b8ac 	b.w	80063b6 <__retarget_lock_acquire_recursive>
 800625e:	bf00      	nop
 8006260:	20000416 	.word	0x20000416

08006264 <__sinit_lock_release>:
 8006264:	4801      	ldr	r0, [pc, #4]	; (800626c <__sinit_lock_release+0x8>)
 8006266:	f000 b8a7 	b.w	80063b8 <__retarget_lock_release_recursive>
 800626a:	bf00      	nop
 800626c:	20000416 	.word	0x20000416

08006270 <__sinit>:
 8006270:	b510      	push	{r4, lr}
 8006272:	4604      	mov	r4, r0
 8006274:	f7ff fff0 	bl	8006258 <__sinit_lock_acquire>
 8006278:	69a3      	ldr	r3, [r4, #24]
 800627a:	b11b      	cbz	r3, 8006284 <__sinit+0x14>
 800627c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006280:	f7ff bff0 	b.w	8006264 <__sinit_lock_release>
 8006284:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006288:	6523      	str	r3, [r4, #80]	; 0x50
 800628a:	4b13      	ldr	r3, [pc, #76]	; (80062d8 <__sinit+0x68>)
 800628c:	4a13      	ldr	r2, [pc, #76]	; (80062dc <__sinit+0x6c>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	62a2      	str	r2, [r4, #40]	; 0x28
 8006292:	42a3      	cmp	r3, r4
 8006294:	bf04      	itt	eq
 8006296:	2301      	moveq	r3, #1
 8006298:	61a3      	streq	r3, [r4, #24]
 800629a:	4620      	mov	r0, r4
 800629c:	f000 f820 	bl	80062e0 <__sfp>
 80062a0:	6060      	str	r0, [r4, #4]
 80062a2:	4620      	mov	r0, r4
 80062a4:	f000 f81c 	bl	80062e0 <__sfp>
 80062a8:	60a0      	str	r0, [r4, #8]
 80062aa:	4620      	mov	r0, r4
 80062ac:	f000 f818 	bl	80062e0 <__sfp>
 80062b0:	2200      	movs	r2, #0
 80062b2:	60e0      	str	r0, [r4, #12]
 80062b4:	2104      	movs	r1, #4
 80062b6:	6860      	ldr	r0, [r4, #4]
 80062b8:	f7ff ff82 	bl	80061c0 <std>
 80062bc:	68a0      	ldr	r0, [r4, #8]
 80062be:	2201      	movs	r2, #1
 80062c0:	2109      	movs	r1, #9
 80062c2:	f7ff ff7d 	bl	80061c0 <std>
 80062c6:	68e0      	ldr	r0, [r4, #12]
 80062c8:	2202      	movs	r2, #2
 80062ca:	2112      	movs	r1, #18
 80062cc:	f7ff ff78 	bl	80061c0 <std>
 80062d0:	2301      	movs	r3, #1
 80062d2:	61a3      	str	r3, [r4, #24]
 80062d4:	e7d2      	b.n	800627c <__sinit+0xc>
 80062d6:	bf00      	nop
 80062d8:	08007338 	.word	0x08007338
 80062dc:	08006209 	.word	0x08006209

080062e0 <__sfp>:
 80062e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e2:	4607      	mov	r7, r0
 80062e4:	f7ff ffac 	bl	8006240 <__sfp_lock_acquire>
 80062e8:	4b1e      	ldr	r3, [pc, #120]	; (8006364 <__sfp+0x84>)
 80062ea:	681e      	ldr	r6, [r3, #0]
 80062ec:	69b3      	ldr	r3, [r6, #24]
 80062ee:	b913      	cbnz	r3, 80062f6 <__sfp+0x16>
 80062f0:	4630      	mov	r0, r6
 80062f2:	f7ff ffbd 	bl	8006270 <__sinit>
 80062f6:	3648      	adds	r6, #72	; 0x48
 80062f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80062fc:	3b01      	subs	r3, #1
 80062fe:	d503      	bpl.n	8006308 <__sfp+0x28>
 8006300:	6833      	ldr	r3, [r6, #0]
 8006302:	b30b      	cbz	r3, 8006348 <__sfp+0x68>
 8006304:	6836      	ldr	r6, [r6, #0]
 8006306:	e7f7      	b.n	80062f8 <__sfp+0x18>
 8006308:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800630c:	b9d5      	cbnz	r5, 8006344 <__sfp+0x64>
 800630e:	4b16      	ldr	r3, [pc, #88]	; (8006368 <__sfp+0x88>)
 8006310:	60e3      	str	r3, [r4, #12]
 8006312:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006316:	6665      	str	r5, [r4, #100]	; 0x64
 8006318:	f000 f84c 	bl	80063b4 <__retarget_lock_init_recursive>
 800631c:	f7ff ff96 	bl	800624c <__sfp_lock_release>
 8006320:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006324:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006328:	6025      	str	r5, [r4, #0]
 800632a:	61a5      	str	r5, [r4, #24]
 800632c:	2208      	movs	r2, #8
 800632e:	4629      	mov	r1, r5
 8006330:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006334:	f7fe fad4 	bl	80048e0 <memset>
 8006338:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800633c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006340:	4620      	mov	r0, r4
 8006342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006344:	3468      	adds	r4, #104	; 0x68
 8006346:	e7d9      	b.n	80062fc <__sfp+0x1c>
 8006348:	2104      	movs	r1, #4
 800634a:	4638      	mov	r0, r7
 800634c:	f7ff ff62 	bl	8006214 <__sfmoreglue>
 8006350:	4604      	mov	r4, r0
 8006352:	6030      	str	r0, [r6, #0]
 8006354:	2800      	cmp	r0, #0
 8006356:	d1d5      	bne.n	8006304 <__sfp+0x24>
 8006358:	f7ff ff78 	bl	800624c <__sfp_lock_release>
 800635c:	230c      	movs	r3, #12
 800635e:	603b      	str	r3, [r7, #0]
 8006360:	e7ee      	b.n	8006340 <__sfp+0x60>
 8006362:	bf00      	nop
 8006364:	08007338 	.word	0x08007338
 8006368:	ffff0001 	.word	0xffff0001

0800636c <_fwalk_reent>:
 800636c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006370:	4606      	mov	r6, r0
 8006372:	4688      	mov	r8, r1
 8006374:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006378:	2700      	movs	r7, #0
 800637a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800637e:	f1b9 0901 	subs.w	r9, r9, #1
 8006382:	d505      	bpl.n	8006390 <_fwalk_reent+0x24>
 8006384:	6824      	ldr	r4, [r4, #0]
 8006386:	2c00      	cmp	r4, #0
 8006388:	d1f7      	bne.n	800637a <_fwalk_reent+0xe>
 800638a:	4638      	mov	r0, r7
 800638c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006390:	89ab      	ldrh	r3, [r5, #12]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d907      	bls.n	80063a6 <_fwalk_reent+0x3a>
 8006396:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800639a:	3301      	adds	r3, #1
 800639c:	d003      	beq.n	80063a6 <_fwalk_reent+0x3a>
 800639e:	4629      	mov	r1, r5
 80063a0:	4630      	mov	r0, r6
 80063a2:	47c0      	blx	r8
 80063a4:	4307      	orrs	r7, r0
 80063a6:	3568      	adds	r5, #104	; 0x68
 80063a8:	e7e9      	b.n	800637e <_fwalk_reent+0x12>
	...

080063ac <_localeconv_r>:
 80063ac:	4800      	ldr	r0, [pc, #0]	; (80063b0 <_localeconv_r+0x4>)
 80063ae:	4770      	bx	lr
 80063b0:	20000160 	.word	0x20000160

080063b4 <__retarget_lock_init_recursive>:
 80063b4:	4770      	bx	lr

080063b6 <__retarget_lock_acquire_recursive>:
 80063b6:	4770      	bx	lr

080063b8 <__retarget_lock_release_recursive>:
 80063b8:	4770      	bx	lr

080063ba <__swhatbuf_r>:
 80063ba:	b570      	push	{r4, r5, r6, lr}
 80063bc:	460e      	mov	r6, r1
 80063be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063c2:	2900      	cmp	r1, #0
 80063c4:	b096      	sub	sp, #88	; 0x58
 80063c6:	4614      	mov	r4, r2
 80063c8:	461d      	mov	r5, r3
 80063ca:	da08      	bge.n	80063de <__swhatbuf_r+0x24>
 80063cc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	602a      	str	r2, [r5, #0]
 80063d4:	061a      	lsls	r2, r3, #24
 80063d6:	d410      	bmi.n	80063fa <__swhatbuf_r+0x40>
 80063d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063dc:	e00e      	b.n	80063fc <__swhatbuf_r+0x42>
 80063de:	466a      	mov	r2, sp
 80063e0:	f000 fed2 	bl	8007188 <_fstat_r>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	dbf1      	blt.n	80063cc <__swhatbuf_r+0x12>
 80063e8:	9a01      	ldr	r2, [sp, #4]
 80063ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80063ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80063f2:	425a      	negs	r2, r3
 80063f4:	415a      	adcs	r2, r3
 80063f6:	602a      	str	r2, [r5, #0]
 80063f8:	e7ee      	b.n	80063d8 <__swhatbuf_r+0x1e>
 80063fa:	2340      	movs	r3, #64	; 0x40
 80063fc:	2000      	movs	r0, #0
 80063fe:	6023      	str	r3, [r4, #0]
 8006400:	b016      	add	sp, #88	; 0x58
 8006402:	bd70      	pop	{r4, r5, r6, pc}

08006404 <__smakebuf_r>:
 8006404:	898b      	ldrh	r3, [r1, #12]
 8006406:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006408:	079d      	lsls	r5, r3, #30
 800640a:	4606      	mov	r6, r0
 800640c:	460c      	mov	r4, r1
 800640e:	d507      	bpl.n	8006420 <__smakebuf_r+0x1c>
 8006410:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006414:	6023      	str	r3, [r4, #0]
 8006416:	6123      	str	r3, [r4, #16]
 8006418:	2301      	movs	r3, #1
 800641a:	6163      	str	r3, [r4, #20]
 800641c:	b002      	add	sp, #8
 800641e:	bd70      	pop	{r4, r5, r6, pc}
 8006420:	ab01      	add	r3, sp, #4
 8006422:	466a      	mov	r2, sp
 8006424:	f7ff ffc9 	bl	80063ba <__swhatbuf_r>
 8006428:	9900      	ldr	r1, [sp, #0]
 800642a:	4605      	mov	r5, r0
 800642c:	4630      	mov	r0, r6
 800642e:	f000 fc37 	bl	8006ca0 <_malloc_r>
 8006432:	b948      	cbnz	r0, 8006448 <__smakebuf_r+0x44>
 8006434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006438:	059a      	lsls	r2, r3, #22
 800643a:	d4ef      	bmi.n	800641c <__smakebuf_r+0x18>
 800643c:	f023 0303 	bic.w	r3, r3, #3
 8006440:	f043 0302 	orr.w	r3, r3, #2
 8006444:	81a3      	strh	r3, [r4, #12]
 8006446:	e7e3      	b.n	8006410 <__smakebuf_r+0xc>
 8006448:	4b0d      	ldr	r3, [pc, #52]	; (8006480 <__smakebuf_r+0x7c>)
 800644a:	62b3      	str	r3, [r6, #40]	; 0x28
 800644c:	89a3      	ldrh	r3, [r4, #12]
 800644e:	6020      	str	r0, [r4, #0]
 8006450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006454:	81a3      	strh	r3, [r4, #12]
 8006456:	9b00      	ldr	r3, [sp, #0]
 8006458:	6163      	str	r3, [r4, #20]
 800645a:	9b01      	ldr	r3, [sp, #4]
 800645c:	6120      	str	r0, [r4, #16]
 800645e:	b15b      	cbz	r3, 8006478 <__smakebuf_r+0x74>
 8006460:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006464:	4630      	mov	r0, r6
 8006466:	f000 fea1 	bl	80071ac <_isatty_r>
 800646a:	b128      	cbz	r0, 8006478 <__smakebuf_r+0x74>
 800646c:	89a3      	ldrh	r3, [r4, #12]
 800646e:	f023 0303 	bic.w	r3, r3, #3
 8006472:	f043 0301 	orr.w	r3, r3, #1
 8006476:	81a3      	strh	r3, [r4, #12]
 8006478:	89a0      	ldrh	r0, [r4, #12]
 800647a:	4305      	orrs	r5, r0
 800647c:	81a5      	strh	r5, [r4, #12]
 800647e:	e7cd      	b.n	800641c <__smakebuf_r+0x18>
 8006480:	08006209 	.word	0x08006209

08006484 <malloc>:
 8006484:	4b02      	ldr	r3, [pc, #8]	; (8006490 <malloc+0xc>)
 8006486:	4601      	mov	r1, r0
 8006488:	6818      	ldr	r0, [r3, #0]
 800648a:	f000 bc09 	b.w	8006ca0 <_malloc_r>
 800648e:	bf00      	nop
 8006490:	2000000c 	.word	0x2000000c

08006494 <_Balloc>:
 8006494:	b570      	push	{r4, r5, r6, lr}
 8006496:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006498:	4604      	mov	r4, r0
 800649a:	460d      	mov	r5, r1
 800649c:	b976      	cbnz	r6, 80064bc <_Balloc+0x28>
 800649e:	2010      	movs	r0, #16
 80064a0:	f7ff fff0 	bl	8006484 <malloc>
 80064a4:	4602      	mov	r2, r0
 80064a6:	6260      	str	r0, [r4, #36]	; 0x24
 80064a8:	b920      	cbnz	r0, 80064b4 <_Balloc+0x20>
 80064aa:	4b18      	ldr	r3, [pc, #96]	; (800650c <_Balloc+0x78>)
 80064ac:	4818      	ldr	r0, [pc, #96]	; (8006510 <_Balloc+0x7c>)
 80064ae:	2166      	movs	r1, #102	; 0x66
 80064b0:	f000 fe2a 	bl	8007108 <__assert_func>
 80064b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064b8:	6006      	str	r6, [r0, #0]
 80064ba:	60c6      	str	r6, [r0, #12]
 80064bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80064be:	68f3      	ldr	r3, [r6, #12]
 80064c0:	b183      	cbz	r3, 80064e4 <_Balloc+0x50>
 80064c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064ca:	b9b8      	cbnz	r0, 80064fc <_Balloc+0x68>
 80064cc:	2101      	movs	r1, #1
 80064ce:	fa01 f605 	lsl.w	r6, r1, r5
 80064d2:	1d72      	adds	r2, r6, #5
 80064d4:	0092      	lsls	r2, r2, #2
 80064d6:	4620      	mov	r0, r4
 80064d8:	f000 fb60 	bl	8006b9c <_calloc_r>
 80064dc:	b160      	cbz	r0, 80064f8 <_Balloc+0x64>
 80064de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064e2:	e00e      	b.n	8006502 <_Balloc+0x6e>
 80064e4:	2221      	movs	r2, #33	; 0x21
 80064e6:	2104      	movs	r1, #4
 80064e8:	4620      	mov	r0, r4
 80064ea:	f000 fb57 	bl	8006b9c <_calloc_r>
 80064ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064f0:	60f0      	str	r0, [r6, #12]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1e4      	bne.n	80064c2 <_Balloc+0x2e>
 80064f8:	2000      	movs	r0, #0
 80064fa:	bd70      	pop	{r4, r5, r6, pc}
 80064fc:	6802      	ldr	r2, [r0, #0]
 80064fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006502:	2300      	movs	r3, #0
 8006504:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006508:	e7f7      	b.n	80064fa <_Balloc+0x66>
 800650a:	bf00      	nop
 800650c:	0800737d 	.word	0x0800737d
 8006510:	08007460 	.word	0x08007460

08006514 <_Bfree>:
 8006514:	b570      	push	{r4, r5, r6, lr}
 8006516:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006518:	4605      	mov	r5, r0
 800651a:	460c      	mov	r4, r1
 800651c:	b976      	cbnz	r6, 800653c <_Bfree+0x28>
 800651e:	2010      	movs	r0, #16
 8006520:	f7ff ffb0 	bl	8006484 <malloc>
 8006524:	4602      	mov	r2, r0
 8006526:	6268      	str	r0, [r5, #36]	; 0x24
 8006528:	b920      	cbnz	r0, 8006534 <_Bfree+0x20>
 800652a:	4b09      	ldr	r3, [pc, #36]	; (8006550 <_Bfree+0x3c>)
 800652c:	4809      	ldr	r0, [pc, #36]	; (8006554 <_Bfree+0x40>)
 800652e:	218a      	movs	r1, #138	; 0x8a
 8006530:	f000 fdea 	bl	8007108 <__assert_func>
 8006534:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006538:	6006      	str	r6, [r0, #0]
 800653a:	60c6      	str	r6, [r0, #12]
 800653c:	b13c      	cbz	r4, 800654e <_Bfree+0x3a>
 800653e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006540:	6862      	ldr	r2, [r4, #4]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006548:	6021      	str	r1, [r4, #0]
 800654a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800654e:	bd70      	pop	{r4, r5, r6, pc}
 8006550:	0800737d 	.word	0x0800737d
 8006554:	08007460 	.word	0x08007460

08006558 <__multadd>:
 8006558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800655c:	690d      	ldr	r5, [r1, #16]
 800655e:	4607      	mov	r7, r0
 8006560:	460c      	mov	r4, r1
 8006562:	461e      	mov	r6, r3
 8006564:	f101 0c14 	add.w	ip, r1, #20
 8006568:	2000      	movs	r0, #0
 800656a:	f8dc 3000 	ldr.w	r3, [ip]
 800656e:	b299      	uxth	r1, r3
 8006570:	fb02 6101 	mla	r1, r2, r1, r6
 8006574:	0c1e      	lsrs	r6, r3, #16
 8006576:	0c0b      	lsrs	r3, r1, #16
 8006578:	fb02 3306 	mla	r3, r2, r6, r3
 800657c:	b289      	uxth	r1, r1
 800657e:	3001      	adds	r0, #1
 8006580:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006584:	4285      	cmp	r5, r0
 8006586:	f84c 1b04 	str.w	r1, [ip], #4
 800658a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800658e:	dcec      	bgt.n	800656a <__multadd+0x12>
 8006590:	b30e      	cbz	r6, 80065d6 <__multadd+0x7e>
 8006592:	68a3      	ldr	r3, [r4, #8]
 8006594:	42ab      	cmp	r3, r5
 8006596:	dc19      	bgt.n	80065cc <__multadd+0x74>
 8006598:	6861      	ldr	r1, [r4, #4]
 800659a:	4638      	mov	r0, r7
 800659c:	3101      	adds	r1, #1
 800659e:	f7ff ff79 	bl	8006494 <_Balloc>
 80065a2:	4680      	mov	r8, r0
 80065a4:	b928      	cbnz	r0, 80065b2 <__multadd+0x5a>
 80065a6:	4602      	mov	r2, r0
 80065a8:	4b0c      	ldr	r3, [pc, #48]	; (80065dc <__multadd+0x84>)
 80065aa:	480d      	ldr	r0, [pc, #52]	; (80065e0 <__multadd+0x88>)
 80065ac:	21b5      	movs	r1, #181	; 0xb5
 80065ae:	f000 fdab 	bl	8007108 <__assert_func>
 80065b2:	6922      	ldr	r2, [r4, #16]
 80065b4:	3202      	adds	r2, #2
 80065b6:	f104 010c 	add.w	r1, r4, #12
 80065ba:	0092      	lsls	r2, r2, #2
 80065bc:	300c      	adds	r0, #12
 80065be:	f7fe f981 	bl	80048c4 <memcpy>
 80065c2:	4621      	mov	r1, r4
 80065c4:	4638      	mov	r0, r7
 80065c6:	f7ff ffa5 	bl	8006514 <_Bfree>
 80065ca:	4644      	mov	r4, r8
 80065cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80065d0:	3501      	adds	r5, #1
 80065d2:	615e      	str	r6, [r3, #20]
 80065d4:	6125      	str	r5, [r4, #16]
 80065d6:	4620      	mov	r0, r4
 80065d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065dc:	080073ef 	.word	0x080073ef
 80065e0:	08007460 	.word	0x08007460

080065e4 <__hi0bits>:
 80065e4:	0c03      	lsrs	r3, r0, #16
 80065e6:	041b      	lsls	r3, r3, #16
 80065e8:	b9d3      	cbnz	r3, 8006620 <__hi0bits+0x3c>
 80065ea:	0400      	lsls	r0, r0, #16
 80065ec:	2310      	movs	r3, #16
 80065ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80065f2:	bf04      	itt	eq
 80065f4:	0200      	lsleq	r0, r0, #8
 80065f6:	3308      	addeq	r3, #8
 80065f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80065fc:	bf04      	itt	eq
 80065fe:	0100      	lsleq	r0, r0, #4
 8006600:	3304      	addeq	r3, #4
 8006602:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006606:	bf04      	itt	eq
 8006608:	0080      	lsleq	r0, r0, #2
 800660a:	3302      	addeq	r3, #2
 800660c:	2800      	cmp	r0, #0
 800660e:	db05      	blt.n	800661c <__hi0bits+0x38>
 8006610:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006614:	f103 0301 	add.w	r3, r3, #1
 8006618:	bf08      	it	eq
 800661a:	2320      	moveq	r3, #32
 800661c:	4618      	mov	r0, r3
 800661e:	4770      	bx	lr
 8006620:	2300      	movs	r3, #0
 8006622:	e7e4      	b.n	80065ee <__hi0bits+0xa>

08006624 <__lo0bits>:
 8006624:	6803      	ldr	r3, [r0, #0]
 8006626:	f013 0207 	ands.w	r2, r3, #7
 800662a:	4601      	mov	r1, r0
 800662c:	d00b      	beq.n	8006646 <__lo0bits+0x22>
 800662e:	07da      	lsls	r2, r3, #31
 8006630:	d423      	bmi.n	800667a <__lo0bits+0x56>
 8006632:	0798      	lsls	r0, r3, #30
 8006634:	bf49      	itett	mi
 8006636:	085b      	lsrmi	r3, r3, #1
 8006638:	089b      	lsrpl	r3, r3, #2
 800663a:	2001      	movmi	r0, #1
 800663c:	600b      	strmi	r3, [r1, #0]
 800663e:	bf5c      	itt	pl
 8006640:	600b      	strpl	r3, [r1, #0]
 8006642:	2002      	movpl	r0, #2
 8006644:	4770      	bx	lr
 8006646:	b298      	uxth	r0, r3
 8006648:	b9a8      	cbnz	r0, 8006676 <__lo0bits+0x52>
 800664a:	0c1b      	lsrs	r3, r3, #16
 800664c:	2010      	movs	r0, #16
 800664e:	b2da      	uxtb	r2, r3
 8006650:	b90a      	cbnz	r2, 8006656 <__lo0bits+0x32>
 8006652:	3008      	adds	r0, #8
 8006654:	0a1b      	lsrs	r3, r3, #8
 8006656:	071a      	lsls	r2, r3, #28
 8006658:	bf04      	itt	eq
 800665a:	091b      	lsreq	r3, r3, #4
 800665c:	3004      	addeq	r0, #4
 800665e:	079a      	lsls	r2, r3, #30
 8006660:	bf04      	itt	eq
 8006662:	089b      	lsreq	r3, r3, #2
 8006664:	3002      	addeq	r0, #2
 8006666:	07da      	lsls	r2, r3, #31
 8006668:	d403      	bmi.n	8006672 <__lo0bits+0x4e>
 800666a:	085b      	lsrs	r3, r3, #1
 800666c:	f100 0001 	add.w	r0, r0, #1
 8006670:	d005      	beq.n	800667e <__lo0bits+0x5a>
 8006672:	600b      	str	r3, [r1, #0]
 8006674:	4770      	bx	lr
 8006676:	4610      	mov	r0, r2
 8006678:	e7e9      	b.n	800664e <__lo0bits+0x2a>
 800667a:	2000      	movs	r0, #0
 800667c:	4770      	bx	lr
 800667e:	2020      	movs	r0, #32
 8006680:	4770      	bx	lr
	...

08006684 <__i2b>:
 8006684:	b510      	push	{r4, lr}
 8006686:	460c      	mov	r4, r1
 8006688:	2101      	movs	r1, #1
 800668a:	f7ff ff03 	bl	8006494 <_Balloc>
 800668e:	4602      	mov	r2, r0
 8006690:	b928      	cbnz	r0, 800669e <__i2b+0x1a>
 8006692:	4b05      	ldr	r3, [pc, #20]	; (80066a8 <__i2b+0x24>)
 8006694:	4805      	ldr	r0, [pc, #20]	; (80066ac <__i2b+0x28>)
 8006696:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800669a:	f000 fd35 	bl	8007108 <__assert_func>
 800669e:	2301      	movs	r3, #1
 80066a0:	6144      	str	r4, [r0, #20]
 80066a2:	6103      	str	r3, [r0, #16]
 80066a4:	bd10      	pop	{r4, pc}
 80066a6:	bf00      	nop
 80066a8:	080073ef 	.word	0x080073ef
 80066ac:	08007460 	.word	0x08007460

080066b0 <__multiply>:
 80066b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b4:	4691      	mov	r9, r2
 80066b6:	690a      	ldr	r2, [r1, #16]
 80066b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80066bc:	429a      	cmp	r2, r3
 80066be:	bfb8      	it	lt
 80066c0:	460b      	movlt	r3, r1
 80066c2:	460c      	mov	r4, r1
 80066c4:	bfbc      	itt	lt
 80066c6:	464c      	movlt	r4, r9
 80066c8:	4699      	movlt	r9, r3
 80066ca:	6927      	ldr	r7, [r4, #16]
 80066cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80066d0:	68a3      	ldr	r3, [r4, #8]
 80066d2:	6861      	ldr	r1, [r4, #4]
 80066d4:	eb07 060a 	add.w	r6, r7, sl
 80066d8:	42b3      	cmp	r3, r6
 80066da:	b085      	sub	sp, #20
 80066dc:	bfb8      	it	lt
 80066de:	3101      	addlt	r1, #1
 80066e0:	f7ff fed8 	bl	8006494 <_Balloc>
 80066e4:	b930      	cbnz	r0, 80066f4 <__multiply+0x44>
 80066e6:	4602      	mov	r2, r0
 80066e8:	4b44      	ldr	r3, [pc, #272]	; (80067fc <__multiply+0x14c>)
 80066ea:	4845      	ldr	r0, [pc, #276]	; (8006800 <__multiply+0x150>)
 80066ec:	f240 115d 	movw	r1, #349	; 0x15d
 80066f0:	f000 fd0a 	bl	8007108 <__assert_func>
 80066f4:	f100 0514 	add.w	r5, r0, #20
 80066f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80066fc:	462b      	mov	r3, r5
 80066fe:	2200      	movs	r2, #0
 8006700:	4543      	cmp	r3, r8
 8006702:	d321      	bcc.n	8006748 <__multiply+0x98>
 8006704:	f104 0314 	add.w	r3, r4, #20
 8006708:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800670c:	f109 0314 	add.w	r3, r9, #20
 8006710:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006714:	9202      	str	r2, [sp, #8]
 8006716:	1b3a      	subs	r2, r7, r4
 8006718:	3a15      	subs	r2, #21
 800671a:	f022 0203 	bic.w	r2, r2, #3
 800671e:	3204      	adds	r2, #4
 8006720:	f104 0115 	add.w	r1, r4, #21
 8006724:	428f      	cmp	r7, r1
 8006726:	bf38      	it	cc
 8006728:	2204      	movcc	r2, #4
 800672a:	9201      	str	r2, [sp, #4]
 800672c:	9a02      	ldr	r2, [sp, #8]
 800672e:	9303      	str	r3, [sp, #12]
 8006730:	429a      	cmp	r2, r3
 8006732:	d80c      	bhi.n	800674e <__multiply+0x9e>
 8006734:	2e00      	cmp	r6, #0
 8006736:	dd03      	ble.n	8006740 <__multiply+0x90>
 8006738:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800673c:	2b00      	cmp	r3, #0
 800673e:	d05a      	beq.n	80067f6 <__multiply+0x146>
 8006740:	6106      	str	r6, [r0, #16]
 8006742:	b005      	add	sp, #20
 8006744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006748:	f843 2b04 	str.w	r2, [r3], #4
 800674c:	e7d8      	b.n	8006700 <__multiply+0x50>
 800674e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006752:	f1ba 0f00 	cmp.w	sl, #0
 8006756:	d024      	beq.n	80067a2 <__multiply+0xf2>
 8006758:	f104 0e14 	add.w	lr, r4, #20
 800675c:	46a9      	mov	r9, r5
 800675e:	f04f 0c00 	mov.w	ip, #0
 8006762:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006766:	f8d9 1000 	ldr.w	r1, [r9]
 800676a:	fa1f fb82 	uxth.w	fp, r2
 800676e:	b289      	uxth	r1, r1
 8006770:	fb0a 110b 	mla	r1, sl, fp, r1
 8006774:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006778:	f8d9 2000 	ldr.w	r2, [r9]
 800677c:	4461      	add	r1, ip
 800677e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006782:	fb0a c20b 	mla	r2, sl, fp, ip
 8006786:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800678a:	b289      	uxth	r1, r1
 800678c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006790:	4577      	cmp	r7, lr
 8006792:	f849 1b04 	str.w	r1, [r9], #4
 8006796:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800679a:	d8e2      	bhi.n	8006762 <__multiply+0xb2>
 800679c:	9a01      	ldr	r2, [sp, #4]
 800679e:	f845 c002 	str.w	ip, [r5, r2]
 80067a2:	9a03      	ldr	r2, [sp, #12]
 80067a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80067a8:	3304      	adds	r3, #4
 80067aa:	f1b9 0f00 	cmp.w	r9, #0
 80067ae:	d020      	beq.n	80067f2 <__multiply+0x142>
 80067b0:	6829      	ldr	r1, [r5, #0]
 80067b2:	f104 0c14 	add.w	ip, r4, #20
 80067b6:	46ae      	mov	lr, r5
 80067b8:	f04f 0a00 	mov.w	sl, #0
 80067bc:	f8bc b000 	ldrh.w	fp, [ip]
 80067c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80067c4:	fb09 220b 	mla	r2, r9, fp, r2
 80067c8:	4492      	add	sl, r2
 80067ca:	b289      	uxth	r1, r1
 80067cc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80067d0:	f84e 1b04 	str.w	r1, [lr], #4
 80067d4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80067d8:	f8be 1000 	ldrh.w	r1, [lr]
 80067dc:	0c12      	lsrs	r2, r2, #16
 80067de:	fb09 1102 	mla	r1, r9, r2, r1
 80067e2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80067e6:	4567      	cmp	r7, ip
 80067e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80067ec:	d8e6      	bhi.n	80067bc <__multiply+0x10c>
 80067ee:	9a01      	ldr	r2, [sp, #4]
 80067f0:	50a9      	str	r1, [r5, r2]
 80067f2:	3504      	adds	r5, #4
 80067f4:	e79a      	b.n	800672c <__multiply+0x7c>
 80067f6:	3e01      	subs	r6, #1
 80067f8:	e79c      	b.n	8006734 <__multiply+0x84>
 80067fa:	bf00      	nop
 80067fc:	080073ef 	.word	0x080073ef
 8006800:	08007460 	.word	0x08007460

08006804 <__pow5mult>:
 8006804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006808:	4615      	mov	r5, r2
 800680a:	f012 0203 	ands.w	r2, r2, #3
 800680e:	4606      	mov	r6, r0
 8006810:	460f      	mov	r7, r1
 8006812:	d007      	beq.n	8006824 <__pow5mult+0x20>
 8006814:	4c25      	ldr	r4, [pc, #148]	; (80068ac <__pow5mult+0xa8>)
 8006816:	3a01      	subs	r2, #1
 8006818:	2300      	movs	r3, #0
 800681a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800681e:	f7ff fe9b 	bl	8006558 <__multadd>
 8006822:	4607      	mov	r7, r0
 8006824:	10ad      	asrs	r5, r5, #2
 8006826:	d03d      	beq.n	80068a4 <__pow5mult+0xa0>
 8006828:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800682a:	b97c      	cbnz	r4, 800684c <__pow5mult+0x48>
 800682c:	2010      	movs	r0, #16
 800682e:	f7ff fe29 	bl	8006484 <malloc>
 8006832:	4602      	mov	r2, r0
 8006834:	6270      	str	r0, [r6, #36]	; 0x24
 8006836:	b928      	cbnz	r0, 8006844 <__pow5mult+0x40>
 8006838:	4b1d      	ldr	r3, [pc, #116]	; (80068b0 <__pow5mult+0xac>)
 800683a:	481e      	ldr	r0, [pc, #120]	; (80068b4 <__pow5mult+0xb0>)
 800683c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006840:	f000 fc62 	bl	8007108 <__assert_func>
 8006844:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006848:	6004      	str	r4, [r0, #0]
 800684a:	60c4      	str	r4, [r0, #12]
 800684c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006850:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006854:	b94c      	cbnz	r4, 800686a <__pow5mult+0x66>
 8006856:	f240 2171 	movw	r1, #625	; 0x271
 800685a:	4630      	mov	r0, r6
 800685c:	f7ff ff12 	bl	8006684 <__i2b>
 8006860:	2300      	movs	r3, #0
 8006862:	f8c8 0008 	str.w	r0, [r8, #8]
 8006866:	4604      	mov	r4, r0
 8006868:	6003      	str	r3, [r0, #0]
 800686a:	f04f 0900 	mov.w	r9, #0
 800686e:	07eb      	lsls	r3, r5, #31
 8006870:	d50a      	bpl.n	8006888 <__pow5mult+0x84>
 8006872:	4639      	mov	r1, r7
 8006874:	4622      	mov	r2, r4
 8006876:	4630      	mov	r0, r6
 8006878:	f7ff ff1a 	bl	80066b0 <__multiply>
 800687c:	4639      	mov	r1, r7
 800687e:	4680      	mov	r8, r0
 8006880:	4630      	mov	r0, r6
 8006882:	f7ff fe47 	bl	8006514 <_Bfree>
 8006886:	4647      	mov	r7, r8
 8006888:	106d      	asrs	r5, r5, #1
 800688a:	d00b      	beq.n	80068a4 <__pow5mult+0xa0>
 800688c:	6820      	ldr	r0, [r4, #0]
 800688e:	b938      	cbnz	r0, 80068a0 <__pow5mult+0x9c>
 8006890:	4622      	mov	r2, r4
 8006892:	4621      	mov	r1, r4
 8006894:	4630      	mov	r0, r6
 8006896:	f7ff ff0b 	bl	80066b0 <__multiply>
 800689a:	6020      	str	r0, [r4, #0]
 800689c:	f8c0 9000 	str.w	r9, [r0]
 80068a0:	4604      	mov	r4, r0
 80068a2:	e7e4      	b.n	800686e <__pow5mult+0x6a>
 80068a4:	4638      	mov	r0, r7
 80068a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068aa:	bf00      	nop
 80068ac:	080075b0 	.word	0x080075b0
 80068b0:	0800737d 	.word	0x0800737d
 80068b4:	08007460 	.word	0x08007460

080068b8 <__lshift>:
 80068b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068bc:	460c      	mov	r4, r1
 80068be:	6849      	ldr	r1, [r1, #4]
 80068c0:	6923      	ldr	r3, [r4, #16]
 80068c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80068c6:	68a3      	ldr	r3, [r4, #8]
 80068c8:	4607      	mov	r7, r0
 80068ca:	4691      	mov	r9, r2
 80068cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068d0:	f108 0601 	add.w	r6, r8, #1
 80068d4:	42b3      	cmp	r3, r6
 80068d6:	db0b      	blt.n	80068f0 <__lshift+0x38>
 80068d8:	4638      	mov	r0, r7
 80068da:	f7ff fddb 	bl	8006494 <_Balloc>
 80068de:	4605      	mov	r5, r0
 80068e0:	b948      	cbnz	r0, 80068f6 <__lshift+0x3e>
 80068e2:	4602      	mov	r2, r0
 80068e4:	4b2a      	ldr	r3, [pc, #168]	; (8006990 <__lshift+0xd8>)
 80068e6:	482b      	ldr	r0, [pc, #172]	; (8006994 <__lshift+0xdc>)
 80068e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80068ec:	f000 fc0c 	bl	8007108 <__assert_func>
 80068f0:	3101      	adds	r1, #1
 80068f2:	005b      	lsls	r3, r3, #1
 80068f4:	e7ee      	b.n	80068d4 <__lshift+0x1c>
 80068f6:	2300      	movs	r3, #0
 80068f8:	f100 0114 	add.w	r1, r0, #20
 80068fc:	f100 0210 	add.w	r2, r0, #16
 8006900:	4618      	mov	r0, r3
 8006902:	4553      	cmp	r3, sl
 8006904:	db37      	blt.n	8006976 <__lshift+0xbe>
 8006906:	6920      	ldr	r0, [r4, #16]
 8006908:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800690c:	f104 0314 	add.w	r3, r4, #20
 8006910:	f019 091f 	ands.w	r9, r9, #31
 8006914:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006918:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800691c:	d02f      	beq.n	800697e <__lshift+0xc6>
 800691e:	f1c9 0e20 	rsb	lr, r9, #32
 8006922:	468a      	mov	sl, r1
 8006924:	f04f 0c00 	mov.w	ip, #0
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	fa02 f209 	lsl.w	r2, r2, r9
 800692e:	ea42 020c 	orr.w	r2, r2, ip
 8006932:	f84a 2b04 	str.w	r2, [sl], #4
 8006936:	f853 2b04 	ldr.w	r2, [r3], #4
 800693a:	4298      	cmp	r0, r3
 800693c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006940:	d8f2      	bhi.n	8006928 <__lshift+0x70>
 8006942:	1b03      	subs	r3, r0, r4
 8006944:	3b15      	subs	r3, #21
 8006946:	f023 0303 	bic.w	r3, r3, #3
 800694a:	3304      	adds	r3, #4
 800694c:	f104 0215 	add.w	r2, r4, #21
 8006950:	4290      	cmp	r0, r2
 8006952:	bf38      	it	cc
 8006954:	2304      	movcc	r3, #4
 8006956:	f841 c003 	str.w	ip, [r1, r3]
 800695a:	f1bc 0f00 	cmp.w	ip, #0
 800695e:	d001      	beq.n	8006964 <__lshift+0xac>
 8006960:	f108 0602 	add.w	r6, r8, #2
 8006964:	3e01      	subs	r6, #1
 8006966:	4638      	mov	r0, r7
 8006968:	612e      	str	r6, [r5, #16]
 800696a:	4621      	mov	r1, r4
 800696c:	f7ff fdd2 	bl	8006514 <_Bfree>
 8006970:	4628      	mov	r0, r5
 8006972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006976:	f842 0f04 	str.w	r0, [r2, #4]!
 800697a:	3301      	adds	r3, #1
 800697c:	e7c1      	b.n	8006902 <__lshift+0x4a>
 800697e:	3904      	subs	r1, #4
 8006980:	f853 2b04 	ldr.w	r2, [r3], #4
 8006984:	f841 2f04 	str.w	r2, [r1, #4]!
 8006988:	4298      	cmp	r0, r3
 800698a:	d8f9      	bhi.n	8006980 <__lshift+0xc8>
 800698c:	e7ea      	b.n	8006964 <__lshift+0xac>
 800698e:	bf00      	nop
 8006990:	080073ef 	.word	0x080073ef
 8006994:	08007460 	.word	0x08007460

08006998 <__mcmp>:
 8006998:	b530      	push	{r4, r5, lr}
 800699a:	6902      	ldr	r2, [r0, #16]
 800699c:	690c      	ldr	r4, [r1, #16]
 800699e:	1b12      	subs	r2, r2, r4
 80069a0:	d10e      	bne.n	80069c0 <__mcmp+0x28>
 80069a2:	f100 0314 	add.w	r3, r0, #20
 80069a6:	3114      	adds	r1, #20
 80069a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80069ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80069b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80069b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80069b8:	42a5      	cmp	r5, r4
 80069ba:	d003      	beq.n	80069c4 <__mcmp+0x2c>
 80069bc:	d305      	bcc.n	80069ca <__mcmp+0x32>
 80069be:	2201      	movs	r2, #1
 80069c0:	4610      	mov	r0, r2
 80069c2:	bd30      	pop	{r4, r5, pc}
 80069c4:	4283      	cmp	r3, r0
 80069c6:	d3f3      	bcc.n	80069b0 <__mcmp+0x18>
 80069c8:	e7fa      	b.n	80069c0 <__mcmp+0x28>
 80069ca:	f04f 32ff 	mov.w	r2, #4294967295
 80069ce:	e7f7      	b.n	80069c0 <__mcmp+0x28>

080069d0 <__mdiff>:
 80069d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d4:	460c      	mov	r4, r1
 80069d6:	4606      	mov	r6, r0
 80069d8:	4611      	mov	r1, r2
 80069da:	4620      	mov	r0, r4
 80069dc:	4690      	mov	r8, r2
 80069de:	f7ff ffdb 	bl	8006998 <__mcmp>
 80069e2:	1e05      	subs	r5, r0, #0
 80069e4:	d110      	bne.n	8006a08 <__mdiff+0x38>
 80069e6:	4629      	mov	r1, r5
 80069e8:	4630      	mov	r0, r6
 80069ea:	f7ff fd53 	bl	8006494 <_Balloc>
 80069ee:	b930      	cbnz	r0, 80069fe <__mdiff+0x2e>
 80069f0:	4b3a      	ldr	r3, [pc, #232]	; (8006adc <__mdiff+0x10c>)
 80069f2:	4602      	mov	r2, r0
 80069f4:	f240 2132 	movw	r1, #562	; 0x232
 80069f8:	4839      	ldr	r0, [pc, #228]	; (8006ae0 <__mdiff+0x110>)
 80069fa:	f000 fb85 	bl	8007108 <__assert_func>
 80069fe:	2301      	movs	r3, #1
 8006a00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a08:	bfa4      	itt	ge
 8006a0a:	4643      	movge	r3, r8
 8006a0c:	46a0      	movge	r8, r4
 8006a0e:	4630      	mov	r0, r6
 8006a10:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006a14:	bfa6      	itte	ge
 8006a16:	461c      	movge	r4, r3
 8006a18:	2500      	movge	r5, #0
 8006a1a:	2501      	movlt	r5, #1
 8006a1c:	f7ff fd3a 	bl	8006494 <_Balloc>
 8006a20:	b920      	cbnz	r0, 8006a2c <__mdiff+0x5c>
 8006a22:	4b2e      	ldr	r3, [pc, #184]	; (8006adc <__mdiff+0x10c>)
 8006a24:	4602      	mov	r2, r0
 8006a26:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006a2a:	e7e5      	b.n	80069f8 <__mdiff+0x28>
 8006a2c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006a30:	6926      	ldr	r6, [r4, #16]
 8006a32:	60c5      	str	r5, [r0, #12]
 8006a34:	f104 0914 	add.w	r9, r4, #20
 8006a38:	f108 0514 	add.w	r5, r8, #20
 8006a3c:	f100 0e14 	add.w	lr, r0, #20
 8006a40:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006a44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006a48:	f108 0210 	add.w	r2, r8, #16
 8006a4c:	46f2      	mov	sl, lr
 8006a4e:	2100      	movs	r1, #0
 8006a50:	f859 3b04 	ldr.w	r3, [r9], #4
 8006a54:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006a58:	fa1f f883 	uxth.w	r8, r3
 8006a5c:	fa11 f18b 	uxtah	r1, r1, fp
 8006a60:	0c1b      	lsrs	r3, r3, #16
 8006a62:	eba1 0808 	sub.w	r8, r1, r8
 8006a66:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006a6a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006a6e:	fa1f f888 	uxth.w	r8, r8
 8006a72:	1419      	asrs	r1, r3, #16
 8006a74:	454e      	cmp	r6, r9
 8006a76:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006a7a:	f84a 3b04 	str.w	r3, [sl], #4
 8006a7e:	d8e7      	bhi.n	8006a50 <__mdiff+0x80>
 8006a80:	1b33      	subs	r3, r6, r4
 8006a82:	3b15      	subs	r3, #21
 8006a84:	f023 0303 	bic.w	r3, r3, #3
 8006a88:	3304      	adds	r3, #4
 8006a8a:	3415      	adds	r4, #21
 8006a8c:	42a6      	cmp	r6, r4
 8006a8e:	bf38      	it	cc
 8006a90:	2304      	movcc	r3, #4
 8006a92:	441d      	add	r5, r3
 8006a94:	4473      	add	r3, lr
 8006a96:	469e      	mov	lr, r3
 8006a98:	462e      	mov	r6, r5
 8006a9a:	4566      	cmp	r6, ip
 8006a9c:	d30e      	bcc.n	8006abc <__mdiff+0xec>
 8006a9e:	f10c 0203 	add.w	r2, ip, #3
 8006aa2:	1b52      	subs	r2, r2, r5
 8006aa4:	f022 0203 	bic.w	r2, r2, #3
 8006aa8:	3d03      	subs	r5, #3
 8006aaa:	45ac      	cmp	ip, r5
 8006aac:	bf38      	it	cc
 8006aae:	2200      	movcc	r2, #0
 8006ab0:	441a      	add	r2, r3
 8006ab2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006ab6:	b17b      	cbz	r3, 8006ad8 <__mdiff+0x108>
 8006ab8:	6107      	str	r7, [r0, #16]
 8006aba:	e7a3      	b.n	8006a04 <__mdiff+0x34>
 8006abc:	f856 8b04 	ldr.w	r8, [r6], #4
 8006ac0:	fa11 f288 	uxtah	r2, r1, r8
 8006ac4:	1414      	asrs	r4, r2, #16
 8006ac6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006aca:	b292      	uxth	r2, r2
 8006acc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006ad0:	f84e 2b04 	str.w	r2, [lr], #4
 8006ad4:	1421      	asrs	r1, r4, #16
 8006ad6:	e7e0      	b.n	8006a9a <__mdiff+0xca>
 8006ad8:	3f01      	subs	r7, #1
 8006ada:	e7ea      	b.n	8006ab2 <__mdiff+0xe2>
 8006adc:	080073ef 	.word	0x080073ef
 8006ae0:	08007460 	.word	0x08007460

08006ae4 <__d2b>:
 8006ae4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ae8:	4689      	mov	r9, r1
 8006aea:	2101      	movs	r1, #1
 8006aec:	ec57 6b10 	vmov	r6, r7, d0
 8006af0:	4690      	mov	r8, r2
 8006af2:	f7ff fccf 	bl	8006494 <_Balloc>
 8006af6:	4604      	mov	r4, r0
 8006af8:	b930      	cbnz	r0, 8006b08 <__d2b+0x24>
 8006afa:	4602      	mov	r2, r0
 8006afc:	4b25      	ldr	r3, [pc, #148]	; (8006b94 <__d2b+0xb0>)
 8006afe:	4826      	ldr	r0, [pc, #152]	; (8006b98 <__d2b+0xb4>)
 8006b00:	f240 310a 	movw	r1, #778	; 0x30a
 8006b04:	f000 fb00 	bl	8007108 <__assert_func>
 8006b08:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006b0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006b10:	bb35      	cbnz	r5, 8006b60 <__d2b+0x7c>
 8006b12:	2e00      	cmp	r6, #0
 8006b14:	9301      	str	r3, [sp, #4]
 8006b16:	d028      	beq.n	8006b6a <__d2b+0x86>
 8006b18:	4668      	mov	r0, sp
 8006b1a:	9600      	str	r6, [sp, #0]
 8006b1c:	f7ff fd82 	bl	8006624 <__lo0bits>
 8006b20:	9900      	ldr	r1, [sp, #0]
 8006b22:	b300      	cbz	r0, 8006b66 <__d2b+0x82>
 8006b24:	9a01      	ldr	r2, [sp, #4]
 8006b26:	f1c0 0320 	rsb	r3, r0, #32
 8006b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b2e:	430b      	orrs	r3, r1
 8006b30:	40c2      	lsrs	r2, r0
 8006b32:	6163      	str	r3, [r4, #20]
 8006b34:	9201      	str	r2, [sp, #4]
 8006b36:	9b01      	ldr	r3, [sp, #4]
 8006b38:	61a3      	str	r3, [r4, #24]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	bf14      	ite	ne
 8006b3e:	2202      	movne	r2, #2
 8006b40:	2201      	moveq	r2, #1
 8006b42:	6122      	str	r2, [r4, #16]
 8006b44:	b1d5      	cbz	r5, 8006b7c <__d2b+0x98>
 8006b46:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006b4a:	4405      	add	r5, r0
 8006b4c:	f8c9 5000 	str.w	r5, [r9]
 8006b50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b54:	f8c8 0000 	str.w	r0, [r8]
 8006b58:	4620      	mov	r0, r4
 8006b5a:	b003      	add	sp, #12
 8006b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b64:	e7d5      	b.n	8006b12 <__d2b+0x2e>
 8006b66:	6161      	str	r1, [r4, #20]
 8006b68:	e7e5      	b.n	8006b36 <__d2b+0x52>
 8006b6a:	a801      	add	r0, sp, #4
 8006b6c:	f7ff fd5a 	bl	8006624 <__lo0bits>
 8006b70:	9b01      	ldr	r3, [sp, #4]
 8006b72:	6163      	str	r3, [r4, #20]
 8006b74:	2201      	movs	r2, #1
 8006b76:	6122      	str	r2, [r4, #16]
 8006b78:	3020      	adds	r0, #32
 8006b7a:	e7e3      	b.n	8006b44 <__d2b+0x60>
 8006b7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b84:	f8c9 0000 	str.w	r0, [r9]
 8006b88:	6918      	ldr	r0, [r3, #16]
 8006b8a:	f7ff fd2b 	bl	80065e4 <__hi0bits>
 8006b8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b92:	e7df      	b.n	8006b54 <__d2b+0x70>
 8006b94:	080073ef 	.word	0x080073ef
 8006b98:	08007460 	.word	0x08007460

08006b9c <_calloc_r>:
 8006b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b9e:	fba1 2402 	umull	r2, r4, r1, r2
 8006ba2:	b94c      	cbnz	r4, 8006bb8 <_calloc_r+0x1c>
 8006ba4:	4611      	mov	r1, r2
 8006ba6:	9201      	str	r2, [sp, #4]
 8006ba8:	f000 f87a 	bl	8006ca0 <_malloc_r>
 8006bac:	9a01      	ldr	r2, [sp, #4]
 8006bae:	4605      	mov	r5, r0
 8006bb0:	b930      	cbnz	r0, 8006bc0 <_calloc_r+0x24>
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	b003      	add	sp, #12
 8006bb6:	bd30      	pop	{r4, r5, pc}
 8006bb8:	220c      	movs	r2, #12
 8006bba:	6002      	str	r2, [r0, #0]
 8006bbc:	2500      	movs	r5, #0
 8006bbe:	e7f8      	b.n	8006bb2 <_calloc_r+0x16>
 8006bc0:	4621      	mov	r1, r4
 8006bc2:	f7fd fe8d 	bl	80048e0 <memset>
 8006bc6:	e7f4      	b.n	8006bb2 <_calloc_r+0x16>

08006bc8 <_free_r>:
 8006bc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bca:	2900      	cmp	r1, #0
 8006bcc:	d044      	beq.n	8006c58 <_free_r+0x90>
 8006bce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bd2:	9001      	str	r0, [sp, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f1a1 0404 	sub.w	r4, r1, #4
 8006bda:	bfb8      	it	lt
 8006bdc:	18e4      	addlt	r4, r4, r3
 8006bde:	f000 fb19 	bl	8007214 <__malloc_lock>
 8006be2:	4a1e      	ldr	r2, [pc, #120]	; (8006c5c <_free_r+0x94>)
 8006be4:	9801      	ldr	r0, [sp, #4]
 8006be6:	6813      	ldr	r3, [r2, #0]
 8006be8:	b933      	cbnz	r3, 8006bf8 <_free_r+0x30>
 8006bea:	6063      	str	r3, [r4, #4]
 8006bec:	6014      	str	r4, [r2, #0]
 8006bee:	b003      	add	sp, #12
 8006bf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bf4:	f000 bb14 	b.w	8007220 <__malloc_unlock>
 8006bf8:	42a3      	cmp	r3, r4
 8006bfa:	d908      	bls.n	8006c0e <_free_r+0x46>
 8006bfc:	6825      	ldr	r5, [r4, #0]
 8006bfe:	1961      	adds	r1, r4, r5
 8006c00:	428b      	cmp	r3, r1
 8006c02:	bf01      	itttt	eq
 8006c04:	6819      	ldreq	r1, [r3, #0]
 8006c06:	685b      	ldreq	r3, [r3, #4]
 8006c08:	1949      	addeq	r1, r1, r5
 8006c0a:	6021      	streq	r1, [r4, #0]
 8006c0c:	e7ed      	b.n	8006bea <_free_r+0x22>
 8006c0e:	461a      	mov	r2, r3
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	b10b      	cbz	r3, 8006c18 <_free_r+0x50>
 8006c14:	42a3      	cmp	r3, r4
 8006c16:	d9fa      	bls.n	8006c0e <_free_r+0x46>
 8006c18:	6811      	ldr	r1, [r2, #0]
 8006c1a:	1855      	adds	r5, r2, r1
 8006c1c:	42a5      	cmp	r5, r4
 8006c1e:	d10b      	bne.n	8006c38 <_free_r+0x70>
 8006c20:	6824      	ldr	r4, [r4, #0]
 8006c22:	4421      	add	r1, r4
 8006c24:	1854      	adds	r4, r2, r1
 8006c26:	42a3      	cmp	r3, r4
 8006c28:	6011      	str	r1, [r2, #0]
 8006c2a:	d1e0      	bne.n	8006bee <_free_r+0x26>
 8006c2c:	681c      	ldr	r4, [r3, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	6053      	str	r3, [r2, #4]
 8006c32:	4421      	add	r1, r4
 8006c34:	6011      	str	r1, [r2, #0]
 8006c36:	e7da      	b.n	8006bee <_free_r+0x26>
 8006c38:	d902      	bls.n	8006c40 <_free_r+0x78>
 8006c3a:	230c      	movs	r3, #12
 8006c3c:	6003      	str	r3, [r0, #0]
 8006c3e:	e7d6      	b.n	8006bee <_free_r+0x26>
 8006c40:	6825      	ldr	r5, [r4, #0]
 8006c42:	1961      	adds	r1, r4, r5
 8006c44:	428b      	cmp	r3, r1
 8006c46:	bf04      	itt	eq
 8006c48:	6819      	ldreq	r1, [r3, #0]
 8006c4a:	685b      	ldreq	r3, [r3, #4]
 8006c4c:	6063      	str	r3, [r4, #4]
 8006c4e:	bf04      	itt	eq
 8006c50:	1949      	addeq	r1, r1, r5
 8006c52:	6021      	streq	r1, [r4, #0]
 8006c54:	6054      	str	r4, [r2, #4]
 8006c56:	e7ca      	b.n	8006bee <_free_r+0x26>
 8006c58:	b003      	add	sp, #12
 8006c5a:	bd30      	pop	{r4, r5, pc}
 8006c5c:	20000418 	.word	0x20000418

08006c60 <sbrk_aligned>:
 8006c60:	b570      	push	{r4, r5, r6, lr}
 8006c62:	4e0e      	ldr	r6, [pc, #56]	; (8006c9c <sbrk_aligned+0x3c>)
 8006c64:	460c      	mov	r4, r1
 8006c66:	6831      	ldr	r1, [r6, #0]
 8006c68:	4605      	mov	r5, r0
 8006c6a:	b911      	cbnz	r1, 8006c72 <sbrk_aligned+0x12>
 8006c6c:	f000 f9e6 	bl	800703c <_sbrk_r>
 8006c70:	6030      	str	r0, [r6, #0]
 8006c72:	4621      	mov	r1, r4
 8006c74:	4628      	mov	r0, r5
 8006c76:	f000 f9e1 	bl	800703c <_sbrk_r>
 8006c7a:	1c43      	adds	r3, r0, #1
 8006c7c:	d00a      	beq.n	8006c94 <sbrk_aligned+0x34>
 8006c7e:	1cc4      	adds	r4, r0, #3
 8006c80:	f024 0403 	bic.w	r4, r4, #3
 8006c84:	42a0      	cmp	r0, r4
 8006c86:	d007      	beq.n	8006c98 <sbrk_aligned+0x38>
 8006c88:	1a21      	subs	r1, r4, r0
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	f000 f9d6 	bl	800703c <_sbrk_r>
 8006c90:	3001      	adds	r0, #1
 8006c92:	d101      	bne.n	8006c98 <sbrk_aligned+0x38>
 8006c94:	f04f 34ff 	mov.w	r4, #4294967295
 8006c98:	4620      	mov	r0, r4
 8006c9a:	bd70      	pop	{r4, r5, r6, pc}
 8006c9c:	2000041c 	.word	0x2000041c

08006ca0 <_malloc_r>:
 8006ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca4:	1ccd      	adds	r5, r1, #3
 8006ca6:	f025 0503 	bic.w	r5, r5, #3
 8006caa:	3508      	adds	r5, #8
 8006cac:	2d0c      	cmp	r5, #12
 8006cae:	bf38      	it	cc
 8006cb0:	250c      	movcc	r5, #12
 8006cb2:	2d00      	cmp	r5, #0
 8006cb4:	4607      	mov	r7, r0
 8006cb6:	db01      	blt.n	8006cbc <_malloc_r+0x1c>
 8006cb8:	42a9      	cmp	r1, r5
 8006cba:	d905      	bls.n	8006cc8 <_malloc_r+0x28>
 8006cbc:	230c      	movs	r3, #12
 8006cbe:	603b      	str	r3, [r7, #0]
 8006cc0:	2600      	movs	r6, #0
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cc8:	4e2e      	ldr	r6, [pc, #184]	; (8006d84 <_malloc_r+0xe4>)
 8006cca:	f000 faa3 	bl	8007214 <__malloc_lock>
 8006cce:	6833      	ldr	r3, [r6, #0]
 8006cd0:	461c      	mov	r4, r3
 8006cd2:	bb34      	cbnz	r4, 8006d22 <_malloc_r+0x82>
 8006cd4:	4629      	mov	r1, r5
 8006cd6:	4638      	mov	r0, r7
 8006cd8:	f7ff ffc2 	bl	8006c60 <sbrk_aligned>
 8006cdc:	1c43      	adds	r3, r0, #1
 8006cde:	4604      	mov	r4, r0
 8006ce0:	d14d      	bne.n	8006d7e <_malloc_r+0xde>
 8006ce2:	6834      	ldr	r4, [r6, #0]
 8006ce4:	4626      	mov	r6, r4
 8006ce6:	2e00      	cmp	r6, #0
 8006ce8:	d140      	bne.n	8006d6c <_malloc_r+0xcc>
 8006cea:	6823      	ldr	r3, [r4, #0]
 8006cec:	4631      	mov	r1, r6
 8006cee:	4638      	mov	r0, r7
 8006cf0:	eb04 0803 	add.w	r8, r4, r3
 8006cf4:	f000 f9a2 	bl	800703c <_sbrk_r>
 8006cf8:	4580      	cmp	r8, r0
 8006cfa:	d13a      	bne.n	8006d72 <_malloc_r+0xd2>
 8006cfc:	6821      	ldr	r1, [r4, #0]
 8006cfe:	3503      	adds	r5, #3
 8006d00:	1a6d      	subs	r5, r5, r1
 8006d02:	f025 0503 	bic.w	r5, r5, #3
 8006d06:	3508      	adds	r5, #8
 8006d08:	2d0c      	cmp	r5, #12
 8006d0a:	bf38      	it	cc
 8006d0c:	250c      	movcc	r5, #12
 8006d0e:	4629      	mov	r1, r5
 8006d10:	4638      	mov	r0, r7
 8006d12:	f7ff ffa5 	bl	8006c60 <sbrk_aligned>
 8006d16:	3001      	adds	r0, #1
 8006d18:	d02b      	beq.n	8006d72 <_malloc_r+0xd2>
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	442b      	add	r3, r5
 8006d1e:	6023      	str	r3, [r4, #0]
 8006d20:	e00e      	b.n	8006d40 <_malloc_r+0xa0>
 8006d22:	6822      	ldr	r2, [r4, #0]
 8006d24:	1b52      	subs	r2, r2, r5
 8006d26:	d41e      	bmi.n	8006d66 <_malloc_r+0xc6>
 8006d28:	2a0b      	cmp	r2, #11
 8006d2a:	d916      	bls.n	8006d5a <_malloc_r+0xba>
 8006d2c:	1961      	adds	r1, r4, r5
 8006d2e:	42a3      	cmp	r3, r4
 8006d30:	6025      	str	r5, [r4, #0]
 8006d32:	bf18      	it	ne
 8006d34:	6059      	strne	r1, [r3, #4]
 8006d36:	6863      	ldr	r3, [r4, #4]
 8006d38:	bf08      	it	eq
 8006d3a:	6031      	streq	r1, [r6, #0]
 8006d3c:	5162      	str	r2, [r4, r5]
 8006d3e:	604b      	str	r3, [r1, #4]
 8006d40:	4638      	mov	r0, r7
 8006d42:	f104 060b 	add.w	r6, r4, #11
 8006d46:	f000 fa6b 	bl	8007220 <__malloc_unlock>
 8006d4a:	f026 0607 	bic.w	r6, r6, #7
 8006d4e:	1d23      	adds	r3, r4, #4
 8006d50:	1af2      	subs	r2, r6, r3
 8006d52:	d0b6      	beq.n	8006cc2 <_malloc_r+0x22>
 8006d54:	1b9b      	subs	r3, r3, r6
 8006d56:	50a3      	str	r3, [r4, r2]
 8006d58:	e7b3      	b.n	8006cc2 <_malloc_r+0x22>
 8006d5a:	6862      	ldr	r2, [r4, #4]
 8006d5c:	42a3      	cmp	r3, r4
 8006d5e:	bf0c      	ite	eq
 8006d60:	6032      	streq	r2, [r6, #0]
 8006d62:	605a      	strne	r2, [r3, #4]
 8006d64:	e7ec      	b.n	8006d40 <_malloc_r+0xa0>
 8006d66:	4623      	mov	r3, r4
 8006d68:	6864      	ldr	r4, [r4, #4]
 8006d6a:	e7b2      	b.n	8006cd2 <_malloc_r+0x32>
 8006d6c:	4634      	mov	r4, r6
 8006d6e:	6876      	ldr	r6, [r6, #4]
 8006d70:	e7b9      	b.n	8006ce6 <_malloc_r+0x46>
 8006d72:	230c      	movs	r3, #12
 8006d74:	603b      	str	r3, [r7, #0]
 8006d76:	4638      	mov	r0, r7
 8006d78:	f000 fa52 	bl	8007220 <__malloc_unlock>
 8006d7c:	e7a1      	b.n	8006cc2 <_malloc_r+0x22>
 8006d7e:	6025      	str	r5, [r4, #0]
 8006d80:	e7de      	b.n	8006d40 <_malloc_r+0xa0>
 8006d82:	bf00      	nop
 8006d84:	20000418 	.word	0x20000418

08006d88 <__sfputc_r>:
 8006d88:	6893      	ldr	r3, [r2, #8]
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	b410      	push	{r4}
 8006d90:	6093      	str	r3, [r2, #8]
 8006d92:	da08      	bge.n	8006da6 <__sfputc_r+0x1e>
 8006d94:	6994      	ldr	r4, [r2, #24]
 8006d96:	42a3      	cmp	r3, r4
 8006d98:	db01      	blt.n	8006d9e <__sfputc_r+0x16>
 8006d9a:	290a      	cmp	r1, #10
 8006d9c:	d103      	bne.n	8006da6 <__sfputc_r+0x1e>
 8006d9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006da2:	f7fe ba0f 	b.w	80051c4 <__swbuf_r>
 8006da6:	6813      	ldr	r3, [r2, #0]
 8006da8:	1c58      	adds	r0, r3, #1
 8006daa:	6010      	str	r0, [r2, #0]
 8006dac:	7019      	strb	r1, [r3, #0]
 8006dae:	4608      	mov	r0, r1
 8006db0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <__sfputs_r>:
 8006db6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db8:	4606      	mov	r6, r0
 8006dba:	460f      	mov	r7, r1
 8006dbc:	4614      	mov	r4, r2
 8006dbe:	18d5      	adds	r5, r2, r3
 8006dc0:	42ac      	cmp	r4, r5
 8006dc2:	d101      	bne.n	8006dc8 <__sfputs_r+0x12>
 8006dc4:	2000      	movs	r0, #0
 8006dc6:	e007      	b.n	8006dd8 <__sfputs_r+0x22>
 8006dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dcc:	463a      	mov	r2, r7
 8006dce:	4630      	mov	r0, r6
 8006dd0:	f7ff ffda 	bl	8006d88 <__sfputc_r>
 8006dd4:	1c43      	adds	r3, r0, #1
 8006dd6:	d1f3      	bne.n	8006dc0 <__sfputs_r+0xa>
 8006dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ddc <_vfiprintf_r>:
 8006ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de0:	460d      	mov	r5, r1
 8006de2:	b09d      	sub	sp, #116	; 0x74
 8006de4:	4614      	mov	r4, r2
 8006de6:	4698      	mov	r8, r3
 8006de8:	4606      	mov	r6, r0
 8006dea:	b118      	cbz	r0, 8006df4 <_vfiprintf_r+0x18>
 8006dec:	6983      	ldr	r3, [r0, #24]
 8006dee:	b90b      	cbnz	r3, 8006df4 <_vfiprintf_r+0x18>
 8006df0:	f7ff fa3e 	bl	8006270 <__sinit>
 8006df4:	4b89      	ldr	r3, [pc, #548]	; (800701c <_vfiprintf_r+0x240>)
 8006df6:	429d      	cmp	r5, r3
 8006df8:	d11b      	bne.n	8006e32 <_vfiprintf_r+0x56>
 8006dfa:	6875      	ldr	r5, [r6, #4]
 8006dfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dfe:	07d9      	lsls	r1, r3, #31
 8006e00:	d405      	bmi.n	8006e0e <_vfiprintf_r+0x32>
 8006e02:	89ab      	ldrh	r3, [r5, #12]
 8006e04:	059a      	lsls	r2, r3, #22
 8006e06:	d402      	bmi.n	8006e0e <_vfiprintf_r+0x32>
 8006e08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e0a:	f7ff fad4 	bl	80063b6 <__retarget_lock_acquire_recursive>
 8006e0e:	89ab      	ldrh	r3, [r5, #12]
 8006e10:	071b      	lsls	r3, r3, #28
 8006e12:	d501      	bpl.n	8006e18 <_vfiprintf_r+0x3c>
 8006e14:	692b      	ldr	r3, [r5, #16]
 8006e16:	b9eb      	cbnz	r3, 8006e54 <_vfiprintf_r+0x78>
 8006e18:	4629      	mov	r1, r5
 8006e1a:	4630      	mov	r0, r6
 8006e1c:	f7fe fa24 	bl	8005268 <__swsetup_r>
 8006e20:	b1c0      	cbz	r0, 8006e54 <_vfiprintf_r+0x78>
 8006e22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e24:	07dc      	lsls	r4, r3, #31
 8006e26:	d50e      	bpl.n	8006e46 <_vfiprintf_r+0x6a>
 8006e28:	f04f 30ff 	mov.w	r0, #4294967295
 8006e2c:	b01d      	add	sp, #116	; 0x74
 8006e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e32:	4b7b      	ldr	r3, [pc, #492]	; (8007020 <_vfiprintf_r+0x244>)
 8006e34:	429d      	cmp	r5, r3
 8006e36:	d101      	bne.n	8006e3c <_vfiprintf_r+0x60>
 8006e38:	68b5      	ldr	r5, [r6, #8]
 8006e3a:	e7df      	b.n	8006dfc <_vfiprintf_r+0x20>
 8006e3c:	4b79      	ldr	r3, [pc, #484]	; (8007024 <_vfiprintf_r+0x248>)
 8006e3e:	429d      	cmp	r5, r3
 8006e40:	bf08      	it	eq
 8006e42:	68f5      	ldreq	r5, [r6, #12]
 8006e44:	e7da      	b.n	8006dfc <_vfiprintf_r+0x20>
 8006e46:	89ab      	ldrh	r3, [r5, #12]
 8006e48:	0598      	lsls	r0, r3, #22
 8006e4a:	d4ed      	bmi.n	8006e28 <_vfiprintf_r+0x4c>
 8006e4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e4e:	f7ff fab3 	bl	80063b8 <__retarget_lock_release_recursive>
 8006e52:	e7e9      	b.n	8006e28 <_vfiprintf_r+0x4c>
 8006e54:	2300      	movs	r3, #0
 8006e56:	9309      	str	r3, [sp, #36]	; 0x24
 8006e58:	2320      	movs	r3, #32
 8006e5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e62:	2330      	movs	r3, #48	; 0x30
 8006e64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007028 <_vfiprintf_r+0x24c>
 8006e68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e6c:	f04f 0901 	mov.w	r9, #1
 8006e70:	4623      	mov	r3, r4
 8006e72:	469a      	mov	sl, r3
 8006e74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e78:	b10a      	cbz	r2, 8006e7e <_vfiprintf_r+0xa2>
 8006e7a:	2a25      	cmp	r2, #37	; 0x25
 8006e7c:	d1f9      	bne.n	8006e72 <_vfiprintf_r+0x96>
 8006e7e:	ebba 0b04 	subs.w	fp, sl, r4
 8006e82:	d00b      	beq.n	8006e9c <_vfiprintf_r+0xc0>
 8006e84:	465b      	mov	r3, fp
 8006e86:	4622      	mov	r2, r4
 8006e88:	4629      	mov	r1, r5
 8006e8a:	4630      	mov	r0, r6
 8006e8c:	f7ff ff93 	bl	8006db6 <__sfputs_r>
 8006e90:	3001      	adds	r0, #1
 8006e92:	f000 80aa 	beq.w	8006fea <_vfiprintf_r+0x20e>
 8006e96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e98:	445a      	add	r2, fp
 8006e9a:	9209      	str	r2, [sp, #36]	; 0x24
 8006e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 80a2 	beq.w	8006fea <_vfiprintf_r+0x20e>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8006eac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006eb0:	f10a 0a01 	add.w	sl, sl, #1
 8006eb4:	9304      	str	r3, [sp, #16]
 8006eb6:	9307      	str	r3, [sp, #28]
 8006eb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ebc:	931a      	str	r3, [sp, #104]	; 0x68
 8006ebe:	4654      	mov	r4, sl
 8006ec0:	2205      	movs	r2, #5
 8006ec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ec6:	4858      	ldr	r0, [pc, #352]	; (8007028 <_vfiprintf_r+0x24c>)
 8006ec8:	f7f9 f992 	bl	80001f0 <memchr>
 8006ecc:	9a04      	ldr	r2, [sp, #16]
 8006ece:	b9d8      	cbnz	r0, 8006f08 <_vfiprintf_r+0x12c>
 8006ed0:	06d1      	lsls	r1, r2, #27
 8006ed2:	bf44      	itt	mi
 8006ed4:	2320      	movmi	r3, #32
 8006ed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006eda:	0713      	lsls	r3, r2, #28
 8006edc:	bf44      	itt	mi
 8006ede:	232b      	movmi	r3, #43	; 0x2b
 8006ee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ee4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ee8:	2b2a      	cmp	r3, #42	; 0x2a
 8006eea:	d015      	beq.n	8006f18 <_vfiprintf_r+0x13c>
 8006eec:	9a07      	ldr	r2, [sp, #28]
 8006eee:	4654      	mov	r4, sl
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	f04f 0c0a 	mov.w	ip, #10
 8006ef6:	4621      	mov	r1, r4
 8006ef8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006efc:	3b30      	subs	r3, #48	; 0x30
 8006efe:	2b09      	cmp	r3, #9
 8006f00:	d94e      	bls.n	8006fa0 <_vfiprintf_r+0x1c4>
 8006f02:	b1b0      	cbz	r0, 8006f32 <_vfiprintf_r+0x156>
 8006f04:	9207      	str	r2, [sp, #28]
 8006f06:	e014      	b.n	8006f32 <_vfiprintf_r+0x156>
 8006f08:	eba0 0308 	sub.w	r3, r0, r8
 8006f0c:	fa09 f303 	lsl.w	r3, r9, r3
 8006f10:	4313      	orrs	r3, r2
 8006f12:	9304      	str	r3, [sp, #16]
 8006f14:	46a2      	mov	sl, r4
 8006f16:	e7d2      	b.n	8006ebe <_vfiprintf_r+0xe2>
 8006f18:	9b03      	ldr	r3, [sp, #12]
 8006f1a:	1d19      	adds	r1, r3, #4
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	9103      	str	r1, [sp, #12]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	bfbb      	ittet	lt
 8006f24:	425b      	neglt	r3, r3
 8006f26:	f042 0202 	orrlt.w	r2, r2, #2
 8006f2a:	9307      	strge	r3, [sp, #28]
 8006f2c:	9307      	strlt	r3, [sp, #28]
 8006f2e:	bfb8      	it	lt
 8006f30:	9204      	strlt	r2, [sp, #16]
 8006f32:	7823      	ldrb	r3, [r4, #0]
 8006f34:	2b2e      	cmp	r3, #46	; 0x2e
 8006f36:	d10c      	bne.n	8006f52 <_vfiprintf_r+0x176>
 8006f38:	7863      	ldrb	r3, [r4, #1]
 8006f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8006f3c:	d135      	bne.n	8006faa <_vfiprintf_r+0x1ce>
 8006f3e:	9b03      	ldr	r3, [sp, #12]
 8006f40:	1d1a      	adds	r2, r3, #4
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	9203      	str	r2, [sp, #12]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	bfb8      	it	lt
 8006f4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f4e:	3402      	adds	r4, #2
 8006f50:	9305      	str	r3, [sp, #20]
 8006f52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007038 <_vfiprintf_r+0x25c>
 8006f56:	7821      	ldrb	r1, [r4, #0]
 8006f58:	2203      	movs	r2, #3
 8006f5a:	4650      	mov	r0, sl
 8006f5c:	f7f9 f948 	bl	80001f0 <memchr>
 8006f60:	b140      	cbz	r0, 8006f74 <_vfiprintf_r+0x198>
 8006f62:	2340      	movs	r3, #64	; 0x40
 8006f64:	eba0 000a 	sub.w	r0, r0, sl
 8006f68:	fa03 f000 	lsl.w	r0, r3, r0
 8006f6c:	9b04      	ldr	r3, [sp, #16]
 8006f6e:	4303      	orrs	r3, r0
 8006f70:	3401      	adds	r4, #1
 8006f72:	9304      	str	r3, [sp, #16]
 8006f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f78:	482c      	ldr	r0, [pc, #176]	; (800702c <_vfiprintf_r+0x250>)
 8006f7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f7e:	2206      	movs	r2, #6
 8006f80:	f7f9 f936 	bl	80001f0 <memchr>
 8006f84:	2800      	cmp	r0, #0
 8006f86:	d03f      	beq.n	8007008 <_vfiprintf_r+0x22c>
 8006f88:	4b29      	ldr	r3, [pc, #164]	; (8007030 <_vfiprintf_r+0x254>)
 8006f8a:	bb1b      	cbnz	r3, 8006fd4 <_vfiprintf_r+0x1f8>
 8006f8c:	9b03      	ldr	r3, [sp, #12]
 8006f8e:	3307      	adds	r3, #7
 8006f90:	f023 0307 	bic.w	r3, r3, #7
 8006f94:	3308      	adds	r3, #8
 8006f96:	9303      	str	r3, [sp, #12]
 8006f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f9a:	443b      	add	r3, r7
 8006f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8006f9e:	e767      	b.n	8006e70 <_vfiprintf_r+0x94>
 8006fa0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fa4:	460c      	mov	r4, r1
 8006fa6:	2001      	movs	r0, #1
 8006fa8:	e7a5      	b.n	8006ef6 <_vfiprintf_r+0x11a>
 8006faa:	2300      	movs	r3, #0
 8006fac:	3401      	adds	r4, #1
 8006fae:	9305      	str	r3, [sp, #20]
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	f04f 0c0a 	mov.w	ip, #10
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fbc:	3a30      	subs	r2, #48	; 0x30
 8006fbe:	2a09      	cmp	r2, #9
 8006fc0:	d903      	bls.n	8006fca <_vfiprintf_r+0x1ee>
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d0c5      	beq.n	8006f52 <_vfiprintf_r+0x176>
 8006fc6:	9105      	str	r1, [sp, #20]
 8006fc8:	e7c3      	b.n	8006f52 <_vfiprintf_r+0x176>
 8006fca:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fce:	4604      	mov	r4, r0
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e7f0      	b.n	8006fb6 <_vfiprintf_r+0x1da>
 8006fd4:	ab03      	add	r3, sp, #12
 8006fd6:	9300      	str	r3, [sp, #0]
 8006fd8:	462a      	mov	r2, r5
 8006fda:	4b16      	ldr	r3, [pc, #88]	; (8007034 <_vfiprintf_r+0x258>)
 8006fdc:	a904      	add	r1, sp, #16
 8006fde:	4630      	mov	r0, r6
 8006fe0:	f7fd fd26 	bl	8004a30 <_printf_float>
 8006fe4:	4607      	mov	r7, r0
 8006fe6:	1c78      	adds	r0, r7, #1
 8006fe8:	d1d6      	bne.n	8006f98 <_vfiprintf_r+0x1bc>
 8006fea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fec:	07d9      	lsls	r1, r3, #31
 8006fee:	d405      	bmi.n	8006ffc <_vfiprintf_r+0x220>
 8006ff0:	89ab      	ldrh	r3, [r5, #12]
 8006ff2:	059a      	lsls	r2, r3, #22
 8006ff4:	d402      	bmi.n	8006ffc <_vfiprintf_r+0x220>
 8006ff6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ff8:	f7ff f9de 	bl	80063b8 <__retarget_lock_release_recursive>
 8006ffc:	89ab      	ldrh	r3, [r5, #12]
 8006ffe:	065b      	lsls	r3, r3, #25
 8007000:	f53f af12 	bmi.w	8006e28 <_vfiprintf_r+0x4c>
 8007004:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007006:	e711      	b.n	8006e2c <_vfiprintf_r+0x50>
 8007008:	ab03      	add	r3, sp, #12
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	462a      	mov	r2, r5
 800700e:	4b09      	ldr	r3, [pc, #36]	; (8007034 <_vfiprintf_r+0x258>)
 8007010:	a904      	add	r1, sp, #16
 8007012:	4630      	mov	r0, r6
 8007014:	f7fd ffb0 	bl	8004f78 <_printf_i>
 8007018:	e7e4      	b.n	8006fe4 <_vfiprintf_r+0x208>
 800701a:	bf00      	nop
 800701c:	08007420 	.word	0x08007420
 8007020:	08007440 	.word	0x08007440
 8007024:	08007400 	.word	0x08007400
 8007028:	080075bc 	.word	0x080075bc
 800702c:	080075c6 	.word	0x080075c6
 8007030:	08004a31 	.word	0x08004a31
 8007034:	08006db7 	.word	0x08006db7
 8007038:	080075c2 	.word	0x080075c2

0800703c <_sbrk_r>:
 800703c:	b538      	push	{r3, r4, r5, lr}
 800703e:	4d06      	ldr	r5, [pc, #24]	; (8007058 <_sbrk_r+0x1c>)
 8007040:	2300      	movs	r3, #0
 8007042:	4604      	mov	r4, r0
 8007044:	4608      	mov	r0, r1
 8007046:	602b      	str	r3, [r5, #0]
 8007048:	f7fa fa50 	bl	80014ec <_sbrk>
 800704c:	1c43      	adds	r3, r0, #1
 800704e:	d102      	bne.n	8007056 <_sbrk_r+0x1a>
 8007050:	682b      	ldr	r3, [r5, #0]
 8007052:	b103      	cbz	r3, 8007056 <_sbrk_r+0x1a>
 8007054:	6023      	str	r3, [r4, #0]
 8007056:	bd38      	pop	{r3, r4, r5, pc}
 8007058:	20000420 	.word	0x20000420

0800705c <__sread>:
 800705c:	b510      	push	{r4, lr}
 800705e:	460c      	mov	r4, r1
 8007060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007064:	f000 f8e2 	bl	800722c <_read_r>
 8007068:	2800      	cmp	r0, #0
 800706a:	bfab      	itete	ge
 800706c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800706e:	89a3      	ldrhlt	r3, [r4, #12]
 8007070:	181b      	addge	r3, r3, r0
 8007072:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007076:	bfac      	ite	ge
 8007078:	6563      	strge	r3, [r4, #84]	; 0x54
 800707a:	81a3      	strhlt	r3, [r4, #12]
 800707c:	bd10      	pop	{r4, pc}

0800707e <__swrite>:
 800707e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007082:	461f      	mov	r7, r3
 8007084:	898b      	ldrh	r3, [r1, #12]
 8007086:	05db      	lsls	r3, r3, #23
 8007088:	4605      	mov	r5, r0
 800708a:	460c      	mov	r4, r1
 800708c:	4616      	mov	r6, r2
 800708e:	d505      	bpl.n	800709c <__swrite+0x1e>
 8007090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007094:	2302      	movs	r3, #2
 8007096:	2200      	movs	r2, #0
 8007098:	f000 f898 	bl	80071cc <_lseek_r>
 800709c:	89a3      	ldrh	r3, [r4, #12]
 800709e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070a6:	81a3      	strh	r3, [r4, #12]
 80070a8:	4632      	mov	r2, r6
 80070aa:	463b      	mov	r3, r7
 80070ac:	4628      	mov	r0, r5
 80070ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070b2:	f000 b817 	b.w	80070e4 <_write_r>

080070b6 <__sseek>:
 80070b6:	b510      	push	{r4, lr}
 80070b8:	460c      	mov	r4, r1
 80070ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070be:	f000 f885 	bl	80071cc <_lseek_r>
 80070c2:	1c43      	adds	r3, r0, #1
 80070c4:	89a3      	ldrh	r3, [r4, #12]
 80070c6:	bf15      	itete	ne
 80070c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80070ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070d2:	81a3      	strheq	r3, [r4, #12]
 80070d4:	bf18      	it	ne
 80070d6:	81a3      	strhne	r3, [r4, #12]
 80070d8:	bd10      	pop	{r4, pc}

080070da <__sclose>:
 80070da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070de:	f000 b831 	b.w	8007144 <_close_r>
	...

080070e4 <_write_r>:
 80070e4:	b538      	push	{r3, r4, r5, lr}
 80070e6:	4d07      	ldr	r5, [pc, #28]	; (8007104 <_write_r+0x20>)
 80070e8:	4604      	mov	r4, r0
 80070ea:	4608      	mov	r0, r1
 80070ec:	4611      	mov	r1, r2
 80070ee:	2200      	movs	r2, #0
 80070f0:	602a      	str	r2, [r5, #0]
 80070f2:	461a      	mov	r2, r3
 80070f4:	f7fa f9a9 	bl	800144a <_write>
 80070f8:	1c43      	adds	r3, r0, #1
 80070fa:	d102      	bne.n	8007102 <_write_r+0x1e>
 80070fc:	682b      	ldr	r3, [r5, #0]
 80070fe:	b103      	cbz	r3, 8007102 <_write_r+0x1e>
 8007100:	6023      	str	r3, [r4, #0]
 8007102:	bd38      	pop	{r3, r4, r5, pc}
 8007104:	20000420 	.word	0x20000420

08007108 <__assert_func>:
 8007108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800710a:	4614      	mov	r4, r2
 800710c:	461a      	mov	r2, r3
 800710e:	4b09      	ldr	r3, [pc, #36]	; (8007134 <__assert_func+0x2c>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4605      	mov	r5, r0
 8007114:	68d8      	ldr	r0, [r3, #12]
 8007116:	b14c      	cbz	r4, 800712c <__assert_func+0x24>
 8007118:	4b07      	ldr	r3, [pc, #28]	; (8007138 <__assert_func+0x30>)
 800711a:	9100      	str	r1, [sp, #0]
 800711c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007120:	4906      	ldr	r1, [pc, #24]	; (800713c <__assert_func+0x34>)
 8007122:	462b      	mov	r3, r5
 8007124:	f000 f81e 	bl	8007164 <fiprintf>
 8007128:	f000 f89f 	bl	800726a <abort>
 800712c:	4b04      	ldr	r3, [pc, #16]	; (8007140 <__assert_func+0x38>)
 800712e:	461c      	mov	r4, r3
 8007130:	e7f3      	b.n	800711a <__assert_func+0x12>
 8007132:	bf00      	nop
 8007134:	2000000c 	.word	0x2000000c
 8007138:	080075cd 	.word	0x080075cd
 800713c:	080075da 	.word	0x080075da
 8007140:	08007608 	.word	0x08007608

08007144 <_close_r>:
 8007144:	b538      	push	{r3, r4, r5, lr}
 8007146:	4d06      	ldr	r5, [pc, #24]	; (8007160 <_close_r+0x1c>)
 8007148:	2300      	movs	r3, #0
 800714a:	4604      	mov	r4, r0
 800714c:	4608      	mov	r0, r1
 800714e:	602b      	str	r3, [r5, #0]
 8007150:	f7fa f997 	bl	8001482 <_close>
 8007154:	1c43      	adds	r3, r0, #1
 8007156:	d102      	bne.n	800715e <_close_r+0x1a>
 8007158:	682b      	ldr	r3, [r5, #0]
 800715a:	b103      	cbz	r3, 800715e <_close_r+0x1a>
 800715c:	6023      	str	r3, [r4, #0]
 800715e:	bd38      	pop	{r3, r4, r5, pc}
 8007160:	20000420 	.word	0x20000420

08007164 <fiprintf>:
 8007164:	b40e      	push	{r1, r2, r3}
 8007166:	b503      	push	{r0, r1, lr}
 8007168:	4601      	mov	r1, r0
 800716a:	ab03      	add	r3, sp, #12
 800716c:	4805      	ldr	r0, [pc, #20]	; (8007184 <fiprintf+0x20>)
 800716e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007172:	6800      	ldr	r0, [r0, #0]
 8007174:	9301      	str	r3, [sp, #4]
 8007176:	f7ff fe31 	bl	8006ddc <_vfiprintf_r>
 800717a:	b002      	add	sp, #8
 800717c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007180:	b003      	add	sp, #12
 8007182:	4770      	bx	lr
 8007184:	2000000c 	.word	0x2000000c

08007188 <_fstat_r>:
 8007188:	b538      	push	{r3, r4, r5, lr}
 800718a:	4d07      	ldr	r5, [pc, #28]	; (80071a8 <_fstat_r+0x20>)
 800718c:	2300      	movs	r3, #0
 800718e:	4604      	mov	r4, r0
 8007190:	4608      	mov	r0, r1
 8007192:	4611      	mov	r1, r2
 8007194:	602b      	str	r3, [r5, #0]
 8007196:	f7fa f980 	bl	800149a <_fstat>
 800719a:	1c43      	adds	r3, r0, #1
 800719c:	d102      	bne.n	80071a4 <_fstat_r+0x1c>
 800719e:	682b      	ldr	r3, [r5, #0]
 80071a0:	b103      	cbz	r3, 80071a4 <_fstat_r+0x1c>
 80071a2:	6023      	str	r3, [r4, #0]
 80071a4:	bd38      	pop	{r3, r4, r5, pc}
 80071a6:	bf00      	nop
 80071a8:	20000420 	.word	0x20000420

080071ac <_isatty_r>:
 80071ac:	b538      	push	{r3, r4, r5, lr}
 80071ae:	4d06      	ldr	r5, [pc, #24]	; (80071c8 <_isatty_r+0x1c>)
 80071b0:	2300      	movs	r3, #0
 80071b2:	4604      	mov	r4, r0
 80071b4:	4608      	mov	r0, r1
 80071b6:	602b      	str	r3, [r5, #0]
 80071b8:	f7fa f97f 	bl	80014ba <_isatty>
 80071bc:	1c43      	adds	r3, r0, #1
 80071be:	d102      	bne.n	80071c6 <_isatty_r+0x1a>
 80071c0:	682b      	ldr	r3, [r5, #0]
 80071c2:	b103      	cbz	r3, 80071c6 <_isatty_r+0x1a>
 80071c4:	6023      	str	r3, [r4, #0]
 80071c6:	bd38      	pop	{r3, r4, r5, pc}
 80071c8:	20000420 	.word	0x20000420

080071cc <_lseek_r>:
 80071cc:	b538      	push	{r3, r4, r5, lr}
 80071ce:	4d07      	ldr	r5, [pc, #28]	; (80071ec <_lseek_r+0x20>)
 80071d0:	4604      	mov	r4, r0
 80071d2:	4608      	mov	r0, r1
 80071d4:	4611      	mov	r1, r2
 80071d6:	2200      	movs	r2, #0
 80071d8:	602a      	str	r2, [r5, #0]
 80071da:	461a      	mov	r2, r3
 80071dc:	f7fa f978 	bl	80014d0 <_lseek>
 80071e0:	1c43      	adds	r3, r0, #1
 80071e2:	d102      	bne.n	80071ea <_lseek_r+0x1e>
 80071e4:	682b      	ldr	r3, [r5, #0]
 80071e6:	b103      	cbz	r3, 80071ea <_lseek_r+0x1e>
 80071e8:	6023      	str	r3, [r4, #0]
 80071ea:	bd38      	pop	{r3, r4, r5, pc}
 80071ec:	20000420 	.word	0x20000420

080071f0 <__ascii_mbtowc>:
 80071f0:	b082      	sub	sp, #8
 80071f2:	b901      	cbnz	r1, 80071f6 <__ascii_mbtowc+0x6>
 80071f4:	a901      	add	r1, sp, #4
 80071f6:	b142      	cbz	r2, 800720a <__ascii_mbtowc+0x1a>
 80071f8:	b14b      	cbz	r3, 800720e <__ascii_mbtowc+0x1e>
 80071fa:	7813      	ldrb	r3, [r2, #0]
 80071fc:	600b      	str	r3, [r1, #0]
 80071fe:	7812      	ldrb	r2, [r2, #0]
 8007200:	1e10      	subs	r0, r2, #0
 8007202:	bf18      	it	ne
 8007204:	2001      	movne	r0, #1
 8007206:	b002      	add	sp, #8
 8007208:	4770      	bx	lr
 800720a:	4610      	mov	r0, r2
 800720c:	e7fb      	b.n	8007206 <__ascii_mbtowc+0x16>
 800720e:	f06f 0001 	mvn.w	r0, #1
 8007212:	e7f8      	b.n	8007206 <__ascii_mbtowc+0x16>

08007214 <__malloc_lock>:
 8007214:	4801      	ldr	r0, [pc, #4]	; (800721c <__malloc_lock+0x8>)
 8007216:	f7ff b8ce 	b.w	80063b6 <__retarget_lock_acquire_recursive>
 800721a:	bf00      	nop
 800721c:	20000414 	.word	0x20000414

08007220 <__malloc_unlock>:
 8007220:	4801      	ldr	r0, [pc, #4]	; (8007228 <__malloc_unlock+0x8>)
 8007222:	f7ff b8c9 	b.w	80063b8 <__retarget_lock_release_recursive>
 8007226:	bf00      	nop
 8007228:	20000414 	.word	0x20000414

0800722c <_read_r>:
 800722c:	b538      	push	{r3, r4, r5, lr}
 800722e:	4d07      	ldr	r5, [pc, #28]	; (800724c <_read_r+0x20>)
 8007230:	4604      	mov	r4, r0
 8007232:	4608      	mov	r0, r1
 8007234:	4611      	mov	r1, r2
 8007236:	2200      	movs	r2, #0
 8007238:	602a      	str	r2, [r5, #0]
 800723a:	461a      	mov	r2, r3
 800723c:	f7fa f8e8 	bl	8001410 <_read>
 8007240:	1c43      	adds	r3, r0, #1
 8007242:	d102      	bne.n	800724a <_read_r+0x1e>
 8007244:	682b      	ldr	r3, [r5, #0]
 8007246:	b103      	cbz	r3, 800724a <_read_r+0x1e>
 8007248:	6023      	str	r3, [r4, #0]
 800724a:	bd38      	pop	{r3, r4, r5, pc}
 800724c:	20000420 	.word	0x20000420

08007250 <__ascii_wctomb>:
 8007250:	b149      	cbz	r1, 8007266 <__ascii_wctomb+0x16>
 8007252:	2aff      	cmp	r2, #255	; 0xff
 8007254:	bf85      	ittet	hi
 8007256:	238a      	movhi	r3, #138	; 0x8a
 8007258:	6003      	strhi	r3, [r0, #0]
 800725a:	700a      	strbls	r2, [r1, #0]
 800725c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007260:	bf98      	it	ls
 8007262:	2001      	movls	r0, #1
 8007264:	4770      	bx	lr
 8007266:	4608      	mov	r0, r1
 8007268:	4770      	bx	lr

0800726a <abort>:
 800726a:	b508      	push	{r3, lr}
 800726c:	2006      	movs	r0, #6
 800726e:	f000 f82b 	bl	80072c8 <raise>
 8007272:	2001      	movs	r0, #1
 8007274:	f7fa f8c2 	bl	80013fc <_exit>

08007278 <_raise_r>:
 8007278:	291f      	cmp	r1, #31
 800727a:	b538      	push	{r3, r4, r5, lr}
 800727c:	4604      	mov	r4, r0
 800727e:	460d      	mov	r5, r1
 8007280:	d904      	bls.n	800728c <_raise_r+0x14>
 8007282:	2316      	movs	r3, #22
 8007284:	6003      	str	r3, [r0, #0]
 8007286:	f04f 30ff 	mov.w	r0, #4294967295
 800728a:	bd38      	pop	{r3, r4, r5, pc}
 800728c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800728e:	b112      	cbz	r2, 8007296 <_raise_r+0x1e>
 8007290:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007294:	b94b      	cbnz	r3, 80072aa <_raise_r+0x32>
 8007296:	4620      	mov	r0, r4
 8007298:	f000 f830 	bl	80072fc <_getpid_r>
 800729c:	462a      	mov	r2, r5
 800729e:	4601      	mov	r1, r0
 80072a0:	4620      	mov	r0, r4
 80072a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072a6:	f000 b817 	b.w	80072d8 <_kill_r>
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d00a      	beq.n	80072c4 <_raise_r+0x4c>
 80072ae:	1c59      	adds	r1, r3, #1
 80072b0:	d103      	bne.n	80072ba <_raise_r+0x42>
 80072b2:	2316      	movs	r3, #22
 80072b4:	6003      	str	r3, [r0, #0]
 80072b6:	2001      	movs	r0, #1
 80072b8:	e7e7      	b.n	800728a <_raise_r+0x12>
 80072ba:	2400      	movs	r4, #0
 80072bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80072c0:	4628      	mov	r0, r5
 80072c2:	4798      	blx	r3
 80072c4:	2000      	movs	r0, #0
 80072c6:	e7e0      	b.n	800728a <_raise_r+0x12>

080072c8 <raise>:
 80072c8:	4b02      	ldr	r3, [pc, #8]	; (80072d4 <raise+0xc>)
 80072ca:	4601      	mov	r1, r0
 80072cc:	6818      	ldr	r0, [r3, #0]
 80072ce:	f7ff bfd3 	b.w	8007278 <_raise_r>
 80072d2:	bf00      	nop
 80072d4:	2000000c 	.word	0x2000000c

080072d8 <_kill_r>:
 80072d8:	b538      	push	{r3, r4, r5, lr}
 80072da:	4d07      	ldr	r5, [pc, #28]	; (80072f8 <_kill_r+0x20>)
 80072dc:	2300      	movs	r3, #0
 80072de:	4604      	mov	r4, r0
 80072e0:	4608      	mov	r0, r1
 80072e2:	4611      	mov	r1, r2
 80072e4:	602b      	str	r3, [r5, #0]
 80072e6:	f7fa f879 	bl	80013dc <_kill>
 80072ea:	1c43      	adds	r3, r0, #1
 80072ec:	d102      	bne.n	80072f4 <_kill_r+0x1c>
 80072ee:	682b      	ldr	r3, [r5, #0]
 80072f0:	b103      	cbz	r3, 80072f4 <_kill_r+0x1c>
 80072f2:	6023      	str	r3, [r4, #0]
 80072f4:	bd38      	pop	{r3, r4, r5, pc}
 80072f6:	bf00      	nop
 80072f8:	20000420 	.word	0x20000420

080072fc <_getpid_r>:
 80072fc:	f7fa b866 	b.w	80013cc <_getpid>

08007300 <_init>:
 8007300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007302:	bf00      	nop
 8007304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007306:	bc08      	pop	{r3}
 8007308:	469e      	mov	lr, r3
 800730a:	4770      	bx	lr

0800730c <_fini>:
 800730c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730e:	bf00      	nop
 8007310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007312:	bc08      	pop	{r3}
 8007314:	469e      	mov	lr, r3
 8007316:	4770      	bx	lr
